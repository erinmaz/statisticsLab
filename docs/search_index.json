[["index.html", "Answering questions with data: Lab Manual Preface 0.1 Important notes", " Answering questions with data: Lab Manual Matthew J. C. Crump, Anjali Krishnan, Stephen Volz, and Alla Chavarga Adapted for PSYC 292, St. Francis Xavier University, by Erin L. Mazerolle, Sherry Neville-MacLean, Christine D. Lomore, and Margaret Vail. Last Compiled 2022-03-11 Preface This is the companion lab to our free introductory statistics for undergraduates in psychology textbook, Answering questions with data. This lab manual involves step by-step tutorials to solve data analysis problems in software. We use open-data sets that are usually paired with a primary research article. Each lab has a separate guide for solving the problems in R &amp; R-studio, Excel, SPSS, and JAMOVI. The manual is a free and open resource. See below for more information about copying, making change, or contributing to the lab manual. 0.1 Important notes This lab manual is released under a creative commons licence CC BY-SA 4.0. Click the link to read more about the license, or read more below in the license section. This lab manual is part of a larger OER course package for teaching undergraduate statistics in Psychology. Team members include, Matthew Crump, Alla Chavarga, Anjali Krishnan, Jeffrey Suzuki, and Stephen Volz. As this OER comes together, we will be providing a course website, written in R Markdown, as well as slide decks for the lectures (these will be more fully available by the end of fall 2018). As a result, this textbook, the lab manual, the course website, and the slide decks will all be free, under a creative commons license. The source code for all material is contained in the GitHub repositories for each, and they are a written in R-markdown, so they are relatively easy to copy and edit. Have Fun! 0.1.1 Attributions and Versions First Draft (version 0.9 = August 15th, 2018) This was the version we used to adapt the lab manual. That project can be found here. It was authored by Matt Crump (R exercises), Anjali Krishnan (JAMOVI exercises), Stephen Volz (EXCEL exercises), and Alla Chavarga (SPSS exercises). Labs 6, 7, and 8 were adapted and expanded from Open Stats Labs. Thanks to Open Stats Labs (Dr. Kevin P. McIntyre) for their fantastic work. Version 1.0 = April, 2021 This version was our first edit of the lab manual for PSYC 292 at StFX (Winter 2021), and was completed by Erin Mazerolle and Sherry Neville-MacLean. The changes were mainly focused on the SPSS sections of Labs 1, 2, 3, 6, and 7, and in particular, the homework questions. We also added Lab 12. In progress: Version 2.0. Last Compiled: 2022-03-11 We are currently working on updating the lab manual to include JAMOVI activities that will use in PSYC 292 at StFX. Section 0.6 of Lab 0 was adapted nearly verbatim, with some editorial changes, from Chapter 3, “Getting started with jamovi,” from Navarro, D.J., &amp; Foxcroft, D.R. (2019). Learning statistics with jamovi: A tutorial for psychology students and other beginners. (Version 0.70) while adhering to its license that states \"The book is released under a creative commons CC BY-SA 4.0 licence. This means that this book can be reused, remixed, retained, revised and redistributed (including commercially) as long as appropriate credit is given to the authors. If you remix, or modify the original version of this open textbook, you must redistribute all versions of this open textbook under the same license - CC BY-SA. DOI: 10.24384/hgc3-7p15 0.1.2 CC BY-SA 4.0 license This license means that you are free to: Share: copy and redistribute the material in any medium or format Adapt: remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlike: If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions: You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. 0.1.3 Copying the lab manual This lab manual was written in R-Studio, using R Markdown, and compiled into a web-book format using the bookdown package. All of the source code for this book is available in a GitHub repository: https://github.com/erinmaz/statisticsLab In addition, the source code for project this book was based on can be found at: https://github.com/CrumpLab/statisticsLab In principle, anybody could fork or otherwise download this repository. Load the Rproj file in R-studio, and then compile the entire book. Then, the individual .rmd files for each chapter could be edited for content and style to better suit your needs. If you want to contribute to this version of the lab manual, you could make pull requests on GitHub, or discuss issues and request on the issues tab. 0.1.4 Acknowledgments Thanks to the librarians at Brooklyn College of CUNY, especially Miriam Deutch, and Emily Fairey, for their support throughout the process. Thanks to CUNY for supporting OER development, and for the grant we received to develop this work. Development of version 2.0 (described above) was funded by the Council of Atlantic University Libraries through an AtlanticOER Development Grant awarded to Erin Mazerolle, Christine Lomore, Margaret Vail, Derrick Lee, Sherry Neville-MacLean, and Lindsay Berrigan. "],["software.html", "Software 0.2 Data 0.3 R 0.4 Excel 0.5 SPSS 0.6 JAMOVI - Week 2 - January 25 &amp; 26", " Software 0.2 Data Data files used for the labs are all taken from open data sources. Links are provided for each lab. For convenience, all of the data files are also available here as single files in the github repository for this lab manual 0.2.1 Data Repository https://github.com/CrumpLab/statisticsLab/tree/master/data 0.2.2 CSV format All of the data files in .csv format are also available to download as a .zip file 0.2.3 SPSS format All of the data files in SPSS format are also available to download as a .zip file 0.3 R In this course we will be using R as a tool to analyze data, and as a tool to help us gain a better understanding of what our analyses are doing. Throughout each lab we will show you how to use R to solve specific problems, and then you will use the examples to solve homework and lab assignments. R is a very deep programming language, and in many ways we will only be skimming the surface of what R can do. Along the way, there will be many pointers to more advanced techniques that interested students can follow to become experts in using R for data-analysis, and computer programming in general. R is primarily a computer programming language for statistical analysis. It is free, and open-source (many people contribute to developing it), and runs on most operating systems. It is a powerful language that can be used for all sorts of mathematical operations, data-processing, analysis, and graphical display of data. I even used R to write this lab manual. And, I use R all the time for my own research, because it makes data-analyis fast, efficient, transparent, reproducible, and exciting. Statistics Software SPSS SAS JMP R Julia Matlab 0.3.1 Why R? There are lots of different options for using computers to analyze data, why use R?. The options all have pros and cons, and can be used in different ways to solve a range of different problems. Some software allows you to load in data, and then analyze the data by clicking different options in a menu. This can sometimes be fast and convenient. For example, once the data is loaded, all you have to do is click a couple buttons to analyse the data! However, many aspects of data-analysis are not so easy. For example, particular analyses often require that the data be formatted in a particular way so that the program can analyze it properly. Often times when a researcher wants to ask a new question of an existing data set, they have to spend time re-formatting the data. If the data is large, then reformatting by hand is very slow, and can lead to errors. Another option, is to use a scripting language to instruct the computer how reformat the data. This is very fast and efficient. R provides the ability to everything all in one place. You can load in data, reformat it any way you like, then anlayze it anyway you like, and create beautiful graphs and tables (publication quality) to display your findings. Once you get the hang of R, it becomes very fast and efficient. 0.3.2 Installing R and R Studio Download and install R onto your computer. The R website is: http://www.r-project.org Find the download R using the link. This will take you to a page with many different mirror links. You can click any of these links to download a version of R that will work on your computer. After you have installed R you can continue. After you have installed R on your computer, you should want to install another program called R studio. This program provides a user-friendly interface for using R. You must already have installed R before you perform this step. The R-studio website is: http://www.rstudio.com Find the download link on the front-page, and then download R studio desktop version for your computer. After you have installed R studio you will be ready to start using R. The website R-fiddle allows you to run R scripts in the cloud, so you can practice R from your web-browser! 0.3.3 R studio notes and tips Figure 0.1: The R-studio workspace 0.3.3.1 Console When you open up R studio you will see three or four main windows (the placement of each are configurable). In the above example, the bottom left window is the command line (terminal or console) for R. This is used to directly enter commands into R. Once you have entered a command here, press enter to execute the command. The console is useful for entering single lines of code and running them. Oftentimes this occurs when you are learning how to correctly execute a line of code in R. Your first few attempts may be incorrect resulting in errors, but trying out different variations on your code in the command line can help you produce the correct code. Pressing the up arrow while in the console will scroll through the most recently executed lines of code. 0.3.3.2 Script Editor The top left corner contains the script editor. This is a simple text editor for writing and saving R scripts with many lines. Several tabs can be opened at once, with each tab representing a different R script. R scripts can be saved from the editor (resulting in a .r file). Whole scripts can be run by copy and pasting them into the console and pressing enter. Alternatively, you can highlight portions of the script that you want to run (in the script editor) and press command-enter to automatically run that portion in the console (or press the button for running the current line/section: green arrow pointing right). 0.3.3.3 Workspace and History The top right panel contains two tabs, one for the workspace and another for history. The workspace lists out all of the variables and functions that are currently loaded in R’s memory. You can inspect each of the variables by clicking on them. This is generally only useful for variables that do not contain large amounts of information. The history tab provides a record of the recent commands executed in the console. 0.3.3.4 File, Plot, Packages, Help The bottom-right window has four tabs for files, plots, packages, and help. The files tab allows browsing of the computers file directory. An important concept in R is the current working directory. This is file folder that R points to by default. Many functions in R will save things directly to this direct, or attempt to read files from this directory. The current working directory can be changed by navigating to the desired folder in the file menu, and then clicking on the more option to set that folder to the current working directory. This is especially important when reading in data to R. The current working directory should be set to the folder containing the data to be inputted into R. The plots tab will show recent plots and figures made in R. The packages tab lists the current R libraries loaded into memory, and provides the ability to download and enable new R packages. The help menu is an invaluable tool. Here, you can search for individual R commands to see examples of how they are used. Sometimes the help files for individual commands are opaque and difficult to understand, so it is necessary to do a Google search to find better examples of using these commands. 0.3.4 How to complete the R Labs Each of the labs focuses on particular data-analysis problems, from graphing data, computing descriptive statistics, to running inferential tests in R. All of the labs come in three parts, a training part, a generalization part, and a writing part. The training part includes step-by-step examples of R code that solves particular problems. The R code is always highlighted in grey. The generalization part gives short assignments to change parts of the provided code to solve a new problem. The writing part tasks you with answering questions about statitiscal concepts. The way to complete each lab is to open a new R Markdown document in R-studio, and then document your progression through each of the parts. By doing this, you will become familiar with how R and R-studio works, and how to create documents that preserve both the code and your notes all in one place. There are a few tricks to getting started that are outline below. Open R-studio 0.3.4.1 R projects Create a new R project Go to the file menu and select new project, or go to the top right-hand corner of R-studio, you should see a blue cube with an R in it, then select New project from the dropdown menu Save the new R project somewhere that you can find it. If you are working on a lab computer, then save the new R project to the desktop. What is an R project? When you create a new R project you are creating two things, 1) a new folder on your computer, and 2) a “.Rproj” file. For example, if you gave your R project the name “Lab1,” then you will have created a folder title “Lab1,” and inside the folder you will find an R project file called “Lab1.Rproj.” As you work inside R-studio you will be creating text documents, and you will be doing things like loading data, and saving the results of your analyses. As your work grows and becomes more complex, you can often find yourself creating many different files. The R project folder is a very useful way of organizing your files all in one place so you can find them later. If you double-clik an R project file, R-studio will automatically load and restore your last session. In the labs, you will be using your R project folder to: save data files into this folder save R-markdown files that you will use to write your R-code and lab notes save the results of your analysis 0.3.4.2 Installing libraries When you install R and R-studio, you get what is called Base R. Base R contains many libraries that allow you to conduct statistical anlayses. Because R is free and open-source, many other developers have created add-on libraries that extend the functionality of R. We use some of these libraries, and you need to install them before you can do the labs. For example, in any of the labs, whenever you see a line code that uses the word library like this library(libraryname), this line of code telling R to load up that library so it can be used. The libraryname would be replaced with the actual name of the library. For example, you will see code like this in the labs: library(data.table) This line of code is saying that the data.table library needs to be loaded. You can check to see if any library is already loaded by clicking on the “packages” tab in the bottom right hand panel. You will see many packages listed in alphabetical order. Packages that are currently loaded and available have a checkmark. If you scroll down and find that you do not have data.table installed, then you need to install it. To install any package follow these steps: Click on the packages tab Find the “install” button in the top left hand corner of the packages tab. Click the install button Make sure “install from:” is set to CRAN repository Make sure “dependencies” is clicked on (with a checkmark) type the name of the library into the search bar. As you type, you should see the names of different packages you can install pop-up in a drop-down menu. You must be connected to the internet to install packages from CRAN Once you find the package (e.g., data.table), click it, or just make sure the full, correctly spelled name, is in the search bar Press the install button You should see some text appear in the console while R installs the package. After you have installed the package, you should now see that it is listed in the packages tab. You can turn the package on by clicking it in the package tab. OR, you can turn the packge on by running the command library(data.table) in the console, to do this type library(data.table) into the console, and press enter. 0.3.4.3 Quick install If you are using R on one of the lab computers, you may find that some of the packages are not installed. The lab computers get wiped everynight, so it may be necessary to install packages each time you come back to the lab. Fortunately, we can tell R to install all of the packages we need in one go. Copy the following lines of code into the console, and press enter. Note you can select all of the lines at once, then copy them, then paste all of them into the console, and press enter to run them all. After each of the packages are installed, you will then be able to load them using library(). install.packages(ggplot2) install.packages(dplyr) install.packages(data.table) install.packages(summarytools) install.packages(gapminder) install.packages(ggpubr) 0.3.4.4 R markdown Once you have the necessary packages installed you can begin creating R markdown documents for each lab. We admit that at the beginning, R markdown documents might seem a little bit confusing, but you will find they are extremely useful and flexible. Basically, what R markdown allows you to do is combine two kinds of writing, 1) writing R code to conduct analyses, and 2) writing normal text, with headers, sub-headers, and paragraphs. You can think of this like a lab journal, that contains both your writing about what you are doing (e.g., notes to self), and the code that you use for analysis. Additionally, when your code does something like make a graph, or run a statistical test, you can ask R markdown to print the results. The R markdown website has an excellent tutorial that is well worth your time to check out: https://rmarkdown.rstudio.com/lesson-1.html 0.3.4.5 R markdown lab templates We have created a set of template documents for each lab that can be downloaded here: download lab templates. When you unzip the file you should find the following: A new folder titled “RMarkdownsLab” Inside the folder you will see the “RMarkdownsLab.Rproj” file A data folder containing data files for the labs A “LabTemplates” folder containing the R markdown templates for each lab. To get started with Lab 1, follow these steps: copy the template file for lab 1, “Lab 01 Graphing_Student Name.Rmd,” and place it into the “RMarkdownsLab” (copy it out of the template folder, and into the RMarkdownsLab folder). Rename the file to add your own name, eg., “Lab1GraphingMattCrump.Rmd” double-click the “RMarkdownsLab.Rproj” file R-studio will now load up. If you click the files tab, you will see all of the files and folders inside the “RMarkdownsLab” folder Click on your lab1 .rmd file, it will now load into the editor window. Each lab template .rmd file contains three main sections, one for each part of the lab. You will write things inside each section to complete the lab. 0.3.5 Screencast tutorial Follow this guide to get up running for Lab 1. 0.3.6 R-studio Cloud R-studio is also in the cloud. This means that if you want to use R and R-studio through your web-browser you can do that without even installing R or R-studio on your computer. It’s also free! sign up for an R-studio cloud account here: https://rstudio.cloud You can make new R projects, work inside them, and everything is saved in the cloud! To see how everything would work, follow the steps in this video. You will need to download this .zip file to your computer to get started The link to the video is https://www.youtube.com/watch?v=WsbnV0t7FE4, or you can watch it here: 0.4 Excel 0.5 SPSS In this course, we will be using SPSS to help us with the analyses about which we are learning in classes. Throughout each lab, we will show you how to use SPSS to solve specific problems, and then you will use the examples to solve in-lab assignments, homework, and the analysis for your team project. 0.5.1 Installing SPSS We will be using SPSS version 27. The file to download and installation instructions can be found here: https://stfx.teamdynamix.com/TDClient/1764/Portal/KB/ArticleDet?ID=44882 0.5.2 Notes and Tips 0.5.2.1 Discrepancies in Visuals Throughout the lab manual, you will encounter visuals of screens in SPSS. If an image looks slightly different from what you observe on your screen, the discrepancy may be due to a difference in version (27 vs older versions) or operating system (Mac vs PC). Most images are not from version 27 – which was made available to us in January of 2021. From time to time, you may notice that the layout of a pop-up window or the set of commands for an analysis differs for you. A difference in layout is likely due to the difference in our operating systems. The difference in the set of commands may be slight and based on our operating systems, or it may be just a matter of there being more than one correct way to accomplish the same task. If you encounter a difference, let us know so that we can share it with other students and update this manual. 0.5.2.2 Hidden Toolbars If the toolbar is hidden when you enter SPSS, you can select View, Toolbars, and Data Editor to access the images used for shortcuts. Figure 0.2: View without Shortcuts Figure 0.3: View with Shortcuts ####Adjusting the Font Size The default font size in SPSS files is small for many readers. If you would like to increase the size of the font in the data file, please click View and Fonts to adjust the font for your preferences. Increasing the size of the font in the output file seems a bit more complicated. You can increase the size of the font in the output pane easily by clicking View and Outline Size; however, the font within the main section of the file is not so easily changed. To increase the size of the tables generated, please click Edit and Options and select the Pivot Tables tab. Within the pop-up window (shown below), change from System Default to Large Font (click to highlight this option) and click OK. 0.5.3 Opening SPSS and the SPSS layout Your lab instructor will take you through the process of opening the SPSS program. You may double-click on its icon located on the desktop of your lab computer, or you may find it using the Start menu. Once the program loads, you will be prompted with a pop-up window that asks you which file you would like to open. For now, we will be examining the basic layout of SPSS without a data set, so you can click Cancel. Once you do, the main SPSS spreadsheet should open. It will look like this, a basic spreadsheet: Figure 0.4: Empty SPSS spreadsheet Notice at the bottom of your window there are two tabs; “Data View” and “Variable View.” In data view, we enter data into our spreadsheet. You will notice that rows are numbered on the left-hand side of the spreadsheet, while columns are labeled “var.” This is an indication of the general structure of SPSS: Variables are contained in the columns, and rows indicate individual observations. For example, if you obtained the heights (in inches) of 5 people {x= 64, 70, 63, 62, 65} and wanted to enter their data into SPSS, each person’s height would be entered in a new row, not across the columns, as seen below: 0.5.3.1 Reviewing variable properties and the Variable View tab Now that we have some data entered, we might want to name our variable so that it’s evident our measurements represent heights. In order to view or modify variable names and other properties, look to the bottom of your SPSS window and switch over to the “Data View” tab. Once you do this, your window will appear as follows: Here, you can edit the name of your variables, and specify their properties. Variable names can be anything you like, with the restriction that you cannot use numbers or spaces. Next, notice several other important properties of variables you may at some point need to set or modify: Name: the name of your variable that will appear as a colum header in Data View. No spaces or numerals. Type: Your data will most often be Numeric, but sometimes, as in data representing currency or data in scientific notation, you may change the data type appropriately. If your data is simply a label, word, or response (such as an open-ended response to a survey question), choose “String”: this tells SPSS not to treat this variable as a number. (Nota bene: if you select the wrong type of variable, SPSS may not be able to process your requested calculations, so always remember to check this parameter!) Width: This refers to how many digits will be visible by default. Decimals: This refers to how many decimal places will be visible by default. Label: This is a description of the variable. Any information too long to be included in the variable name goes here. Values: For nominal scale data, let’s say 1 represents male and 2 represents female, this is where you include the values and their corresponding labels. Measure: This variable property allows you to specify the nature of your data. Depending on the kind of scale you are using, you will choose a different measure type. Nominal and ordinal are chosen for nominal and ordinal scales, respectively. “Scale” is used when your data is measured on a ratio or interval scale. 0.5.4 Practice Problems In your assigned breakout room, collect information to use in a data file. For each member of your group, collect preferred name, year of study (1, 2, 3, etc.), and type of personal device used (Mac, PC, Chromebook, etc.). Remember to check the settings of the variables in Variable View. You should each create an SPSS data file with the collected information, and upload that file in Moodle under the “SPSS Basics – Data File Submission” link. A data file has been provided for you in Moodle. Open that file and answer the questions in the Moodle quiz entitled “Reading an SPSS Data File.” 0.6 JAMOVI - Week 2 - January 25 &amp; 26 In our lab sessions, we will be using jamovi to help us with the analyses about which we are learning in classes. Throughout each lab, we will show you how to use jamovi to solve specific problems, and then you will use the examples to solve in-lab assignments, homework, and the analysis for your team project. 0.6.1 Getting Started with jamovi This section, including its associated figures, is copied almost verbatim, with some minor editorial changes, from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). In this [section], I’ll discuss how to get started in jamovi. I’ll briefly talk about how to download and install jamovi, but most of the chapter will be focused on getting you started with finding your way around the jamovi GUI. Our goal in this chapter is not to learn any statistical concepts: we’re just trying to learn the basics of how jamovi works and get comfortable interacting with the system. To do this, we’ll spend a bit of time looking at datasets and variables. In doing so, you’ll get a bit of a feel for what it’s like to work in jamovi. However, before going into any of the specifics, it’s worth talking a little about why you might want to use jamovi at all. Given that you’re reading this, you’ve probaby got your own reasons. However, if those reasons are because that’s what my stats class uses, it might worth explaining a little why your lecturer has chosen to use jamovi for the class. Of course, I don’t really know why other people choose jamovi, so I’m really talking about why I use it. It’s sort of obvious but worth saying anyway: doing your statistics on a computer is faster, easier and more powerful than doing statistics by hand. Computers excel at mindless repetitive tasks, and a lot of statistical calculations are both mindless and repetitive. For most people, the only reason to ever do statistical calculations with pencil and paper is for learning purposes. In my class, I do occasionally suggest doing some calculations that way, but the only real value to it is pedagogical. It does help you to get a “feel” for statistics to do some calculations yourself, so it’s worth doing it once. But only once! Doing statistics in a conventional spreadsheet (e.g., Microsoft Excel) is generally a bad idea in the long run. Although many people likely feel more familiar with them, spreadsheets are very limited in terms of what analyses they allow you do. If you get into the habit of trying to do your real life data analysis using spreadsheets, then you’ve dug yourself into a very deep hole. Avoiding proprietary software is a very good idea. There are a lot of commercial packages out there that you can buy, some of which I like and some of which I don’t. They’re usually very glossy in their appearance and generally very powerful (much more powerful than spreadsheets). However, they’re also very expensive. Usually, the company sells “student versions” (crippled versions of the real thing) very cheaply, and then they sell full-powered “educational versions” at a price that makes me wince. They will also sell commercial licenses with a staggeringly high price tag. The business model here is to suck you in during your student days and then leave you dependent on their tools when you go out into the real world. It’s hard to blame them for trying, but personally I’m not in favour of shelling out thousands of dollars if I can avoid it, and you can avoid it. If you make use of packages like jamovi that are open source and free, you never get trapped having to pay exorbitant licensing fees. Something that you might not appreciate now, but will love later on if you do anything involving data analysis, is the fact that jamovi is basically a sophisticated front end for the free R statistical programming language. When you download and install R you get all the basic “packages” and those are very powerful on their own. However, because R is so open and so widely used, it’s become something of a standard tool in statistics and so lots of people write their own packages that extend the system. And these are freely available too. One of the consequences of this, I’ve noticed, is that if you look at recent advanced data analysis textbooks then a lot of them use R. Those are the main reasons I use jamovi. It’s not without its flaws, though. It’s relatively new1[As of writing this in August 2018.] so there is not a huge set of textbooks and other resources to support it, and it has a few annoying quirks that we’re all pretty much stuck with, but on the whole I think the strengths outweigh the weakness; more so than any other option I’ve encountered so far. 0.6.1.1 Installing jamovi Okay, enough with the sales pitch. Let’s get started. Just as with any piece of software, jamovi needs to be installed on a computer, which is a magical box that does cool things and delivers free ponies. Or something along those lines; I may be confusing computers with the iPad marketing campaigns. Anyway, jamovi is freely distributed online and you can download it from the jamovi homepage, which is: jamovi Homepage At the top of the page, under the heading “Download,” you’ll see separate links for Windows users, Mac users, and Linux users. If you follow the relevant link, you’ll see that the online instructions are pretty self-explanatory. As of this writing, the current version of jamovi is 0.9, but they usually issue updates every few months, so you’ll probably have a newer version.2[Athough jamovi is updated frequently, it doesn’t usually make much of a difference for the sort of work we’ll do in this book. In fact, during the writing of the book, I upgraded several times, and it didn’t make much difference at all to what is in this book.] 0.6.1.2 Starting jamovi up One way or another, regardless of what operating system you’re using, it’s time to open jamovi and get started. When first starting jamovi, you will be presented with a user interface which looks something like [the figure below]. As previously noted in this section, this figure is copied from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). To the left is the spreadsheet view, and to the right is where the results of statistical tests appear. Down the middle is a bar separating these two regions, and this bar can be dragged to the left or the right to change the sizes of the two view. It is possible to simply begin typing values into the jamovi spreadsheet as you would in any other spreadsheet software. Alternatively, existing data sets in the CSV (.csv) file format can be opened in jamovi. Additionally, you can easily import SPSS, SAS, Stata and JASP files directly into jamovi. To open a file, select the File tab (three horizontal lines signify this tab) at the top left hand corner, select Open and then choose from the files listed on “Browse” depending on whether you want to open an example or a file stored on your computer. 0.6.2 Analyses Analyses can be selected from the analysis ribbon or menu along the top. Selecting an analysis will present an Options panel for that particular analysis, allowing you to assign different variables to different parts of the analysis and to select different options. At the same time, the results for the analysis will appear in the right Results panel and will update in real-time as you make changes to the options. When you have the analysis set up correctly, you can dismiss the analysis options by clicking the arrow to the top right of the optional panel. If you wish to return to these options, you can click on the results that were produced. In this way, you can return to any analysis that you (or say, a colleague) created earlier. If you decide you no longer need a particular analysis, you can remove it with the results context menu. Right-clicking on the analysis results will bring up a menu, and by selecting Analysis and then Remove, the analysis can be removed. But more on this later. First, let’s take a more detailed look at the spreadsheet view. 0.6.3 The Spreadsheet In jamovi, data is represented in a spreadsheet with each column representing a variable and each row representing a case or participant. 0.6.3.1 Variables The most commonly used variables in jamovi are Data Variables, these variables simply contain data either loaded from a data file, or typed in by the user. Data variables can be one of three measurement levels: As previously noted in this section, this figure is copied from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). These levels are designated by the symbol in the header of the variable’s column. The ID variable type is unique to jamovi. It’s intended for variables that contain identifiers that you would almost never want to analyze, for example, a person’s name or a participant ID. Specifying an ID variable type can improve performance when interacting with very large data sets. Nominal variables are for categorical variables which are text labels, for example, a column called Gender with the values Male and Female would be nominal. So would a person’s name. Nominal variable values can also have a numeric value. These variables are used most often when importing data which codes values with numbers rather than text. For example, a column in a dataset may contain the values 1 for males and 2 for females. It is possible to add nice, human-readable labels to these values with the variable editor (more on this later). Ordinal variables are like Nominal variables, except the values have a specific order. An example is a Likert scale with 3 being strongly agree and -3 being strongly disagree. Continuous variables are variables which exist on a continuous scale. Examples might be height or weight. Continuous scales are also referred to as Interval or Ratio scale. In addition, you can also specify different data types: variables have a data type of either Text, Integer, or Decimal. When starting with a blank spreadsheet and typing values in, the variable type will change automatically depending on the data you enter. This is a good way to get a feel for which variable types go with which sorts of data. Similarly, when opening a data file, jamovi will try to guess the variable type from the data in each column. In both cases, this automatic approach may not be correct, and it may be necessary to manually specify the variable type with the variable editor. The variable editor can be opened by selecting Setup from the data tab or by double-clicking on the variable column header. The variable editor allows you to change the name of the variable and, for data variables, the variable type, the order of the levels, and the label displayed for each level. Changes can be applied by clicking the tick to the top right. The variable editor can be dismissed by clicking the Hide arrow. New variables can be inserted or appended to the data set using the Add button from the data ribbon. The Add button also allows the addition of computed variables. 0.6.3.2 Computed Variables Computed Variables are those which take their value by performing a computation on other variables. Computed Variables can be used for a range of purposes, including log transforms, z-scores, sum-scores, negative scoring, and means. Computed variables can be added to the data set with the Add button available on the data tab. This will produce a formula box where you can specify the formula. The usual arithmetic operators are available. Some examples of formulas are: A + B LOG10(len) MEAN(A, B) (dose - VMEAN(dose)) / VSTDEV(dose) In order, these are the sum of A and B, a log (base 10) transform of len, the mean of A and B, and the z-score of the variable dose. [The figure] below shows the jamovi screen for the new variable computed as the z-score of dose (from the `Tooth Growth’ example data set). As previously noted in this section, this figure is copied from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). V-functions. Several functions are already available in jamovi and available from the drop down box labelled fx. A number of functions appear in pairs, one prefixed with a V and the other not. V functions perform their calculation on a variable as a whole whereas non-V functions perform their calculation row by row. For example, MEAN(A, B) will produce the mean of A and B for each row whereas VMEAN(A) gives the mean of all the values in A. 0.6.3.2.1 Copy and Paste jamovi produces nice American Psychological Association (APA) formatted tables and attractive plots. It is often useful to be able to copy and paste these, perhaps into a Word document, or into an email to a colleague. To copy results, right click on the object of interest, and from the menu, select exactly what you want to copy. The menu allows you to choose to copy only the image or the entire analysis. Selecting copy copies the content to the clipboard, and this content can be pasted into other programs in the usual way. You can practice this later on when we do some analyses. 0.6.3.2.2 Syntax Mode jamovi also provides an “R Syntax Mode.” In this mode, jamovi produces equivalent R code for each analysis. To change to syntax mode, select the Application menu to the top right of jamovi (a button with three vertical dots) and click the “Syntax mode” checkbox there. You can turn off syntax mode by clicking this a second time. In syntax mode, analyses continue to operate as before, but now they produce R syntax and ascii output like an R session. Like all results objects in jamovi, you can right click on these items (including the R syntax) and copy and paste them, for example into an R session. At present, the provided R syntax does not include the data import step and so this must be performed manually in R. There are many resources explaining how to import data into R and if you are interested we recommend you take a look at these; just search on the interweb. 0.6.4 Loading Data in jamovi There are several different types of files that are likely to be relevant to us when doing data analysis. There are two in particular that are especially important from the perspective of this book: jamovi files are those with an .omv file extension. This is the standard kind of file that jamovi uses to store data, variables, and analyses. Comma separated value (.csv) files are those with a .csv file extension. These are just regular old text files and they can be opened with many different software programs. It’s quite typical for people to store data in .csv files, precisely because they’re so simple. There are also several other kinds of data file that you might want to import into jamovi. For instance, you might want to open Microsoft Excel spreadsheets (.xls files), or data files that have been saved in the native file formats for other statistics software, such as SPSS or SAS. Whichever file formats you are using, it’s a good idea to create a folder or folders especially for your jamovi data sets and analyses and to make sure you keep these backed up regularly. 0.6.4.1 Importing Data from CSV Files One quite commonly used data format is the humble comma separated value file, also called a .csv file, and usually bearing the file extension .csv. [These] .csv files are just plain old-fashioned text files, and what they store is basically just a table of data. This is illustrated in [the figure below], which shows a file called that I’ve created. As you can see, each row represents the book sales data for one month. The first row doesn’t contain actual data though; it has the names of the variables. As previously noted in this section, this figure is copied from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). It’s easy to open .csv files in jamovi. From the top left menu (the button with three parallel lines), choose Open and browse to where you have stored the csv file on your computer. If you’re on a Mac, it’ll look like the usual Finder window that you use to choose a file; on Windows, it looks like an Explorer window. An example of what it looks like on a Mac is shown in [the following figure]. I’m assuming that you’re familiar with your own computer, so you should have no problem finding the .csv file that you want to import! Find the one you want, and then click on the “Open” button. As previously noted in this section, this figure is copied from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). There are a few things that you can check to make sure that the data gets imported correctly: Heading. Does the first row of the file contain the names for each variable - a header row? The {booksales.csv} file has a header, so that’s a yes. Separator. What character is used to separate different entries? In most .csv files, this will be a comma (it is “comma separated” after all). Decimal. What character is used to specify the decimal point? In English-speaking countries, this is almost always a period (i.e., {.}). That’s not universally true though. Many European countries use a comma. Quote. What character is used to denote a block of text? That’s usually going to be a double quote mark ({\"}). It is for the {booksales.csv} file. 0.6.5 Importing Unusual Data Files Throughout this book, I’ve assumed that your data are stored as a jamovi {.omv} file or as a “properly” formatted .csv file. However, in real life, that’s not a terribly plausible assumption to make so I’d better talk about some of the other possibilities that you might run into. 0.6.5.1 Loading Data from Text Files The first thing I should point out is that if your data are saved as a text file but aren’t quite in the proper .csv format, then there’s still a pretty good chance that jamovi will be able to open it. You just need to try it and see if it works. Sometimes, though, you will need to change some of the formatting. The ones that I’ve often found myself needing to change are: header. A lot of the time when you’re storing data as a .csv file, the first row actually contains the column names and not data. If that’s not true, then it’s a good idea to open up the .csv file in a spreadsheet programme such as Open Office and add the header row manually. sep. As the name “comma separated value” indicates, the values in a row of a .csv file are usually separated by commas. This isn’t universal, however. In Europe, the decimal point is typically written as {,} instead of {.}, and as a consequence, it would be somewhat awkward to use {,} as the separator. Therefore, it is not unusual to use {;} instead of {,} as the separator. At other times, I’ve seen a TAB character used. quote. It’s conventional in .csv files to include a quoting character for textual data. As you can see by looking at the {booksales.csv} file, this is usually a double quote character, {\"}. But sometimes there is no quoting character at all, or you might see a single quote mark (’) used instead. skip. It’s actually very common to receive .csv files in which the first few rows have nothing to do with the actual data. Instead, they provide a human readable summary of where the data came from, or maybe they include some technical info that doesn’t relate to the data. missing values. Often, you’ll be given data with missing values. For one reason or another, some entries in the table are missing. The data file needs to include a “special” value to indicate that the entry is missing. By default, jamovi assumes that this value is {99}3[You can change the default value for missing values in jamovi from the top right menu (three vertical dots), but this only works at the time of importing data files into jamovi. The default missing value in the dataset should not be a valid number associated with any of the variables, e.g. you could use {-9999} as this is unlikely to be a valid value.], for both numeric and text data, so you should make sure that, where necessary, all missing values in the .csv file are replaced with {99} (or {-9999}; whichever you choose) before opening / importing the file into jamovi. Once you have opened / imported the file into jamovi, all the missing values are converted to blank cells in the jamovi spreadsheet view. 0.6.5.1.1 Loading Data from SPSS (and other statistics packages) The commands listed above are the main ones we’ll need for data files in this book. But, in real life, we have many more possibilities. For example, you might want to read data files from other statistics programs. Since SPSS is probably the most widely used statistics package in psychology, it’s worth mentioning that jamovi can also import SPSS data files (.sav file extension). Just follow the instructions above for how to open a .csv file, but this time navigate to the .sav file you want to import. For SPSS files, jamovi will regard all values as missing if they are regarded as “system missing” files in SPSS. The Default missing value does not seem to work as expected when importing SPSS files, so be aware of this - you might need another step: import the SPSS file into jamovi, and then export as a .csv file before re-opening in jamovi.4[I know this is a bot of a fudge, but it does work, and hopefully this will be fixed in a later version of jamovi.]. And that’s pretty much it, at least as far as SPSS goes. As far as other statistical software goes, jamovi can also directly open / import SAS and STATA files. 0.6.5.1.2 Loading Excel Files A different problem is posed by Excel files. Despite years of yelling at people for sending data to me encoded in a proprietary data format, I get sent a lot of Excel files. The way to handle Excel files is to open them up first in Excel or another spreadsheet programme that can handle Excel files, and then export the data as a .csv file before opening / importing the csv file into jamovi. 0.6.6 Changing Data from One Level to Another Sometimes you want to change the variable level. This can happen for all sorts of reasons. Sometimes when you import data from files, it can come to you in the wrong format. Numbers sometimes get imported as nominal, text values. Dates may get imported as text. Participant ID values can sometimes be read as continuous. Nominal values can sometimes be read as ordinal or even continuous. There’s a good chance that sometimes you’ll want to convert a variable from one measurement level into another one. Or, to use the correct term, you want to coerce the variable from one class into another. In Section 0.6.3, we saw how to specify different variable levels, and if you want to change a variable’s measurement level, then you can do this in the jamovi data view for that variable. Just click the check box for the measurement level you want - continuous, ordinal, or nominal. 0.6.7 Installing Add-on Modules into jamovi A really great feature of jamovi is the ability to install add-on modules from the jamovi library. These add-on modules have been developed by the jamovi community, i.e., jamovi users and developers who have created special software add-ons that do other, usually more advanced, analyses that go beyond the capabilities of the base jamovi program. To install add-on modules, just click on the large {“+”} in the top right of the jamovi window, select jamovi-library and then browse through the various add-on modules that are available. Choose the one(s) you want, and then install them, as in [the following figure]. It’s that easy. The newly installed modules can then be accessed from the Analyses button bar. Try it…useful add-on modules to install include scatr (added under Descriptives) and \\R\\ j. As previously noted in this section, this figure is copied from Learning statistics with jamovi: A tutorial for psychology students and other beginners, Version 0.70, according to its CC license. Thank you to Navarro &amp; Foxcroft (2019). 0.6.8 Quitting jamovi There’s one last thing I should cover in this chapter: how to quit jamovi. It’s not hard, just close the program the same way you would any other program. However, what you might want to do before you quit is save your work! There are two parts to this: saving any changes to the data set, and saving the analyses that you ran. It is good practice to save any changes to the data set as a new data set. That way you can always go back to the original data. To save any changes in jamovi, select Export...Data from the main jamovi menu (button with three horizontal bars in the top left) and create a new file name for the changed data set. Alternatively, you can save both the changed data and any analyses you have undertaken by saving as a jamovi file. To do this, from the main jamovi menu select Save as and type in a file name for this jamovi file (.omv). Remember to save the file in a location where you can find it again later. I usually create a new folder for specific data sets and analyses. 0.6.9 Summary Every book that tries to teach a new statistical software program to novices has to cover roughly the same topics, and in roughly the same order. Ours is no exception, and so in the grand tradition of doing it just the same way everyone else did it, this chapter covered the following topics: In Section 0.6.1, we downloaded and installed jamovi, and started it up. In Section 0.6.2, we very briefly oriented to the part of jamovi where analyses are done and results appear, but then deferred this until later in the book. In Section 0.6.3, we spent more time looking at the spreadsheet part of jamovi, and considered different variable types, and how to compute new variables. In Section 0.6.4, we also saw how to load data files in jamovi. Then, in Section 0.6.5, we figured out how to open other data files, from different file types. In Section 0.6.6, we saw that sometimes we need to coerce data from one type to another. According to Section 0.6.7, installing add-on modules from the jamovi community really extends jamovi capabilities. Finally, in Section 0.6.8, we looked at good practice in terms of saving your data set and analyses when you have finished and are about to quit jamovi. We still haven’t arrived at anything that resembles data analysis. Maybe the next Chapter will get us a bit closer! "],["lab-1-graphing-data.html", "Chapter 1 Lab 1: Graphing Data 1.1 General Goals 1.2 R 1.3 Excel 1.4 SPSS 1.5 JAMOVI - Week 3 - February 1 &amp; 2", " Chapter 1 Lab 1: Graphing Data The commonality between science and art is in trying to see profoundly - to develop strategies of seeing and showing. —Edward Tufte As we have found out from the textbook and lecture, when we measure things, we get lots of numbers. Too many. Sometimes so many your head explodes just thinking about them. One of the most helpful things you can do to begin to make sense of these numbers, is to look at them in graphical form. Unfortunately, for sight-impaired individuals, graphical summary of data is much more well-developed than other forms of summarizing data for our human senses. Some researchers are developing auditory versions of visual graphs, a process called sonification, but we aren’t prepared to demonstrate that here. Instead, we will make charts, and plots, and things to look at, rather than the numbers themselves, mainly because these are tools that are easiest to get our hands on, they are the most developed, and they work really well for visual summary. If time permits, at some point I would like to come back here and do the same things with sonification. I think that would be really, really cool! 1.1 General Goals Our general goals for this first lab are to get your feet wet, so to speak. We’ll do these things: Load in some data to a statistical software program Talk a little bit about how the data is structured Make graphs of the data so we can look at it and make sense of it. We will use the EngageNS data to accomplish these goals. 1.1.1 Important info Data for NYC film permits was obtained from the NYC open data website. The .csv file can be found here: Film_Permits.csv Gapminder data from the gapminder project (copied from the R gapminder library) can be downloaded in .csv format here: gapminder.csv 1.2 R 1.2.1 Download the lab templates You will be completing each lab by writing your code and notes in an R Markdown document. Download the RMarkdownsLab.zip to your computer. Unzip the file, this will produce a new folder with three important parts data folder (contains data files for all labs) LabTemplates folder (contains blank templates for completing all the labs) RMarkdownsLab.Rproj A file with a little blue cube with an R in it. Double-click the RMarkdownsLab.Rproj file, this will automatically open R-studio (if you are at home, you must install R and R-studio first, or you can use R-studio Cloud through your web-browser) Copy the template .Rmd file for lab 1 from the LabTemplates folder into the main folder, then open it, and use it to begin adding your code and notes for lab 1. Watch this screencast to help you get started. Your lab instructor will show you how to open R-studio on the lab computer. Just find it and double-click. Now you have R-studio. Your lab instructor will also walk you through the steps to get started completing the first lab. We also wrote down the steps here. There are numerous resources for learning about R, we put some of them on the course website, under the resouces page. You will find these resources helpful as you learn. We also have a kind of general introduction to R and Rstudio here. This shows you how to download R and R-studio at home (it’s free). Throughout the labs you will be writing things called R Markdown documents. You will learn how to do this throughout the labs, but it can also be worthwhile reading other tutorials, such as the one provided by R Markdown. When we made this course, we assumed that most students would be unfamiliar with R and R-studio, and might even be frightened of it, because it is a computer programming language (OOOOHHH NOOOOOOO, I NEED TO DROP THIS COURSE NOW)…Don’t worry. It’s going to be way easier than you think. Let’s compare to other statistics courses where you would learn something like SPSS. That is also a limited programming language, but you would mostly learn how to point with a mouse, and click with button. I bet you already know how to do that. I bet you also already know how to copy and paste text, and press enter. That’s mostly what we’ll be doing to learn R. We will be doing statistics by typing commands, rather than by clicking buttons. However, lucky for you, all of the commands are already written for you. You just have to copy/paste them. We know that this will seem challenging at first. But, we think that with lots of working examples, you will get the hang of it, and by the end of the course you will be able to do things you might never have dreamed you can do. It’s really a fantastic skill to learn, even if you aren’t planning on going on to do research in Psychology (in which case, this kind of thing is necessary skill to learn). With that, let’s begin. 1.2.2 Get some data In order to graph data, we need to have some data first…Actually, with R, that’s not quite true. Run this bit of code and see what happens: hist(rnorm(100, mean=50, sd=25)) You just made R sample 100 numbers, and then plot the results in a histogram. Pretty neat. We’ll be doing some of this later in the course, where get R to make fake data for us, and then we learn to think about how data behaves under different kinds of assumptions. For now, let’s do something that might be a little bit more interesting…what movies are going to be filming in NYC? It turns out that NYC makes a lot of data about a lot things open and free for anyone to download and look at. This is the NYC Open Data website: https://opendata.cityofnewyork.us. I searched through the data, and found a data file that lists the locations of film permits for shooting movies all throughout the Burroughs. There are multiple ways to load this data into R. If you have downloaded the RMarkdownsLab.zip file, then you already have the data file in the data folder. Assuming you are working in your main directory (your .rmd file is saved in the main folder that contains both the data and template folders), then use the following commands to load the data. library(data.table) nyc_films &lt;-fread(&quot;data/Film_Permits.csv&quot;) If the above method doesn’t work, you can try loading the data from the course website using: library(data.table) nyc_films &lt;- fread(&quot;https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Film_Permits.csv&quot;) If you are having issues getting the data loaded, then talk to your lab instructor 1.2.3 Look at the data You will be downloading and analyzing all kinds of data files this semester. We will follow the very same steps every time. The steps are to load the data, then look at it. You want to see what you’ve got. In R-studio, you will now see a variable called nyc_films in the top right-hand corner of the screen, in the environment tab. If you click this thing, it will show you the contents of the data in a new window. The data is stored in something we call a data frame. It’s R lingo, for the thing that contains the data. Notice is a square, with rows going across, and columns going up and down. It looks kind of like an excel spreadsheet if you are familiar with Excel. It’s useful to know you can look at the data frame this way if you need to. But, this data frame is really big, it has 50,728 rows of data. That’s a lot too much to look at. 1.2.3.1 summarytools The summarytools packages give a quick way to summarize all of the data in a data frame. Here’s how. When you run this code you will see the summary in the viewer on the bottom right hand side. There’s a little browser button (arrow on top of little window) that you can click to expand and see the whole thing in a browser. library(summarytools) view(dfSummary(nyc_films)) That is super helpful, but it’s still a lot to look at. Because there is so much data here, it’s pretty much mind-boggling to start thinking about what to do with it. 1.2.4 Make Plots to answer questions Let’s walk through a couple questions we might have about this data. We can see that there were 50,728 film permits made. We can also see that there are different columns telling us information about each of the film permits. For example, the Borough column lists the Borough for each request, whether it was made for: Manhattan, Brooklyn, Bronx, Queen’s, or Staten Island. Now we can ask our first question, and learn how to do some plotting in R. 1.2.4.1 Where are the most film permits being requested? Do you have any guesses? Is it Manhattan, or Brooklyn, of the Bronx? Or Queen’s or Staten Island? We can find out by plotting the data using a bar plot. We just need to count how many film permits are made in each borough, and then make different bars represent the the counts. First, we do the counting in R. Run the following code. library(dplyr) counts &lt;- nyc_films %&gt;% group_by(Borough) %&gt;% summarize(count_of_permits = length(Borough)) The above grouped the data by each of the five Borough’s, and then counted the number of times each Borough occurred (using the length function). The result is a new variable called count. I chose to name this variable count. You can see that it is now displayed in the top-right hand corned in the environment tab. If you gave count a different name, like muppets, then it would be named what you called it. If you click on the counts variable, you will see the five boroughs listed, along with the counts for how many film permits were requested in each Borough. These are the numbers that we want to plot in a graph. We do the plot using a fantastic package called ggplot2. It is very powerful once you get the hand of it, and when you do, you will be able to make all sorts of interesting graphs. Here’s the code to make the plot library(ggplot2) ggplot(counts, aes(x = Borough, y = count_of_permits )) + geom_bar(stat=&quot;identity&quot;) There it is, we’re done here! We can easily look at this graph, and answer our question. Most of the film permits were requested in Manhattan, followed by Brooklyn, then Queen’s, the Bronx, and finally Staten Island. 1.2.4.2 What kind of “films” are being made, what is the category? We think you might be skeptical of what you are doing here, copying and pasting things. Soon you’ll see just how fast you can do things by copying and pasting, and make a few little changes. Let’s quickly ask another question about what kinds of films are being made. The column Category, gives us some information about that. Let’s just copy paste the code we already made, and see what kinds of categories the films fall into. See if you can tell what I changed in the code to make this work, I’ll do it all at once: counts &lt;- nyc_films %&gt;% group_by(Category) %&gt;% summarize(count_of_permits = length(Category)) ggplot(counts, aes(x = Category, y = count_of_permits )) + geom_bar(stat=&quot;identity&quot;)+ theme(axis.text.x = element_text(angle = 90, hjust = 1)) OK, so this figure might look a bit weird because the labels on the bottom are running into each other. We’ll fix that in a bit. First, let’s notice the changes. I changed Borough to Category. That was the main thing I left out a bunch of things from before. None of the library() commands are used again, and I didn’t re-run the very early code to get the data. R already has those things in it’s memory, so we don’t need to do that first. If you ever clear the memory of R, then you will need to reload those things. First-things come first. Fine, so how do we fix the graph? Good question. To be honest, I don’t know right now. I totally forgot how. But, I know ggplot2 can do this, and I’m going to Google it, right now. Then I’m going to find the answer, and use it here. The googling of your questions is a fine way to learn. It’s what everybody does these days….[goes to Google…]. Found it, actually found a lot of ways to do this. The trick is to add the last line. I just copy-pasted it from the solution I found on stack overflow (you will become friend’s with stack overflow, there are many solutions there to all of your questions) counts &lt;- nyc_films %&gt;% group_by(Category) %&gt;% summarize(count_of_permits = length(Category)) ggplot(counts, aes(x = Category, y = count_of_permits )) + geom_bar(stat=&quot;identity&quot;)+ theme(axis.text.x = element_text(angle = 90, hjust = 1)) 1.2.5 ggplot2 basics Before we go further, I want to point out some basic properties of ggplot2, just to give you a sense of how it is working. This will make more sense in a few weeks, so come back here to remind yourself. We’ll do just a bit a basics, and then move on to making more graphs, by copying and pasting. The ggplot function uses layers. Layers you say? What are these layers? Well, it draws things from the bottom up. It lays down one layer of graphics, then you can keep adding on top, drawing more things. So the idea is something like: Layer 1 + Layer 2 + Layer 3, and so on. If you want Layer 3 to be Layer 2, then you just switch them in the code. Here is a way of thinking about ggplot code ggplot(name_of_data, aes(x = name_of_x_variable, y = name_of_y_variable)) + geom_layer()+ geom_layer()+ geom_layer() What I want you to focus on in the above description is the \\(+\\) signs. What we are doing with the plus signs is adding layers to plot. The layers get added in the order that they are written. If you look back to our previous code, you will see we add a geom_bar layer, then we added another layer to change the rotation of the words on the x-axis. This is how it works. BUT WAIT? How am I supposed to know what to add? This is nuts! We know. You’re not supposed to know just yet, how could you? We’ll give you lots of examples where you can copy and paste, and they will work. That’s how you’ll learn. If you really want to read the help manual you can do that too. It’s on the ggplot2 website. This will become useful after you already know what you are doing, before that, it will probably just seem very confusing. However, it is pretty neat to look and see all of the different things you can do, it’s very powerful. For now, let’s the get the hang of adding things to the graph that let us change some stuff we might want to change. For example, how do you add a title? Or change the labels on the axes? Or add different colors, or change the font-size, or change the background? You can change all of these things by adding different lines to the existing code. 1.2.5.1 ylab() changes y label The last graph had count_of_permits as the label on the y-axis. That doesn’t look right. ggplot2 automatically took the label from the column, and made it be the name on the y-axis. We can change that by adding ylab(\"what we want\"). We do this by adding a \\(+\\) to the last line, then adding ylab() ggplot(counts, aes(x = Category, y = count_of_permits )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) 1.2.5.2 xlab() changes x label Let’s slightly modify the x label too: ggplot(counts, aes(x = Category, y = count_of_permits )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) 1.2.5.3 ggtitle() adds title Let’s give our graph a title ggplot(counts, aes(x = Category, y = count_of_permits )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) 1.2.5.4 color adds color Let’s make the bars different colors. To do this, we add new code to the inside of the aes() part: ggplot(counts, aes(x = Category, y = count_of_permits, color=Category )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) 1.2.5.5 fill fills in color Let’s make the bars different colors. To do this, we add new code to the inside of the aes() part…Notice I’ve started using new lines to make the code more readable. ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) 1.2.5.6 get rid of the legend Sometimes you just don’t want the legend on the side, to remove it add theme(legend.position=\"none\") ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) + theme(legend.position=&quot;none&quot;) 1.2.5.7 theme_classic() makes white background The rest is often just visual preference. For example, the graph above has this grey grid behind the bars. For a clean classic no nonsense look, use theme_classic() to take away the grid. ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) + theme(legend.position=&quot;none&quot;) + theme_classic() 1.2.5.8 Sometimes layer order matters Interesting, theme_classic() is misbehaving a little bit. It looks like we have some of our layer out of order, let’s re-order. I just moved theme_classic() to just underneath the geom_bar() line. Now everything get’s drawn properly. ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) + theme(legend.position=&quot;none&quot;) 1.2.5.9 Font-size Changing font-size is often something you want to do. ggplot2 can do this in different ways. I suggest using the base_size option inside theme_classic(). You set one number for the largest font size in the graph, and everything else gets scaled to fit with that that first number. It’s really convenient. Look for the inside of theme_classic() ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme_classic(base_size = 15) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) + theme(legend.position=&quot;none&quot;) or make things small… just to see what happens ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme_classic(base_size = 10) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category&quot;) + theme(legend.position=&quot;none&quot;) 1.2.5.10 ggplot2 summary That’s enough of the ggplot2 basics for now. You will discover that many things are possible with ggplot2. It is amazing. We are going to get back to answering some questions about the data with graphs. But, now that we have built the code to make the graphs, all we need to do is copy-paste, and make a few small changes, and boom, we have our graph. 1.2.6 More questions about NYC films 1.2.6.1 What are the sub-categories of films? Notice the nyc_films data frame also has a column for SubCategoryName. Let’s see what’s going on there with a quick plot. # get the counts (this is a comment it&#39;s just here for you to read) counts &lt;- nyc_films %&gt;% group_by(SubCategoryName) %&gt;% summarize(count_of_permits = length(SubCategoryName)) # make the plot ggplot(counts, aes(x = SubCategoryName, y = count_of_permits, color=SubCategoryName, fill= SubCategoryName )) + geom_bar(stat=&quot;identity&quot;) + theme_classic(base_size = 10) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Sub-category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Sub-category&quot;) + theme(legend.position=&quot;none&quot;) I guess “episodic series” are the most common. Using a graph like this gave us our answer super fast. 1.2.6.2 Categories by different Boroughs Let’s see one more really useful thing about ggplot2. It’s called facet_wrap(). It’s an ugly word, but you will see that it is very cool, and you can do next-level-super-hero graph styles with facet_wrap that other people can’t do very easily. Here’s our question. We know that some films are made in different Boroughs, and that same films are made in different categories, but do different Boroughs have different patterns for the kinds of categories of films they request permits for? Are their more TV shows in Brooklyn? How do we find out? Watch, just like this: # get the counts (this is a comment it&#39;s just here for you to read) counts &lt;- nyc_films %&gt;% group_by(Borough,Category) %&gt;% summarize(count_of_permits = length(Category)) # make the plot ggplot(counts, aes(x = Category, y = count_of_permits, color=Category, fill= Category )) + geom_bar(stat=&quot;identity&quot;) + theme_classic(base_size = 10) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Category of film&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category and Borough&quot;) + theme(legend.position=&quot;none&quot;) + facet_wrap(~Borough, ncol=3) We did two important things. First we added Borough and Category into the group_by() function. This automatically gives separate counts for each category of film, for each Borough. Then we added facet_wrap(~Borough, ncol=3) to the end of the plot, and it automatically drew us 5 different bar graphs, one for each Borough! That was fast. Imagine doing that by hand. The nice thing about this is we can switch things around if we want. For example, we could do it this way by switching the Category with Borough, and facet-wrapping by Category instead of Borough like we did above. Do what works for you. ggplot(counts, aes(x = Borough, y = count_of_permits, color=Borough, fill= Borough )) + geom_bar(stat=&quot;identity&quot;) + theme_classic(base_size = 10) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab(&quot;Number of Film Permits&quot;) + xlab(&quot;Borough&quot;) + ggtitle(&quot;Number of Film permits in NYC by Category and Borough&quot;) + theme(legend.position=&quot;none&quot;) + facet_wrap(~Category, ncol=5) 1.2.7 Gapminder Data https://www.gapminder.org is an organization that collects some really interesting worldwide data. They also make cool visualization tools for looking at the data. There are many neat examples, and they have visualization tools built right into their website that you can play around with https://www.gapminder.org/tools/. That’s fun check it out. There is also an R package called gapminder. When you install this package, it loads in some of the data from gapminder, so we can play with it in R. If you don’t have the gapminder package installed, you can install it by running this code install.packages(&quot;gapminder&quot;) Once the package is installed, you need to load the new library, like this. Then, you can put the gapminder data into a data frame, like we do here: gapminder_df. library(gapminder) gapminder_df&lt;-gapminder 1.2.7.1 Look at the data frame You can look at the data frame to see what is in it, and you can use summarytools again to view a summary of the data. view(dfSummary(gapminder_df)) There are 1704 rows of data, and we see some columns for country, continent, year, life expectancy, population, and GDP per capita. 1.2.8 Asking Questions with the gap minder data We will show you how to graph some the data to answer a few different kinds of questions. Then you will form your own questions, and see if you can answer them with ggplot2 yourself. All you will need to do is copy and paste the following examples, and change them up a little bit 1.2.8.1 Life Expectancy histogram How long are people living all around the world according to this data set? There are many ways we could plot the data to find out. The first way is a histogram. We have many numbers for life expectancy in the column lifeExp. This is a big sample, full of numbers for 142 countries across many years. It’s easy to make a histogram in ggplot to view the distribution: ggplot(gapminder_df, aes(x=lifeExp))+ geom_histogram(color=&quot;white&quot;) See, that was easy. Next, is a code block that adds more layers and settings if you wanted to modify parts of the graph: ggplot(gapminder_df, aes(x = lifeExp)) + geom_histogram(color=&quot;white&quot;)+ theme_classic(base_size = 15) + ylab(&quot;Frequency count&quot;) + xlab(&quot;Life Expectancy&quot;) + ggtitle(&quot;Histogram of Life Expectancy from Gapminder&quot;) The histogram shows a wide range of life expectancies, from below 40 to just over 80. Histograms are useful, they can show you what kinds of values happen more often than others. One final thing about histograms in ggplot. You may want to change the bin size. That controls how wide or narrow, or the number of bars (how they split across the range), in the histogram. You need to set the bins= option in geom_histogram(). ggplot(gapminder_df, aes(x = lifeExp)) + geom_histogram(color=&quot;white&quot;, bins=50)+ theme_classic(base_size = 15) + ylab(&quot;Frequency count&quot;) + xlab(&quot;Life Expectancy&quot;) + ggtitle(&quot;Histogram of Life Expectancy from Gapminder&quot;) See, same basic patter, but now breaking up the range into 50 little equal sized bins, rather than 30, which is the default. You get to choose what you want to do. 1.2.8.2 Life Expectancy by year Scatterplot We can see we have data for life expectancy and different years. So, does worldwide life expectancy change across the years in the data set? As we go into the future, are people living longer? Let’s look at this using a scatter plot. We can set the x-axis to be year, and the y-axis to be life expectancy. Then we can use geom_point() to display a whole bunch of dots, and then look at them. Here’s the simple code: ggplot(gapminder_df, aes(y= lifeExp, x= year))+ geom_point() Whoa, that’s a lot of dots! Remember that each country is measured each year. So, the bands of dots you see, show the life expectancies for the whole range of countries within each year of the database. There is a big spread inside each year. But, on the whole it looks like groups of dots slowly go up over years. 1.2.8.3 One country, life expectancy by year I’m (Matt) from Canada, so maybe I want to know if life expectancy for Canadians is going up over the years. To find out the answer for one country, we first need to split the full data set, into another smaller data set that only contains data for Canada. In other words, we want only the rows where the word “Canada” is found in the country column. We will use the filter function from dplyr for this: # filter rows to contain Canada smaller_df &lt;- gapminder_df %&gt;% filter(country == &quot;Canada&quot;) # plot the new data contained in smaller_df ggplot(smaller_df, aes(y= lifeExp, x= year))+ geom_point() I would say things are looking good for Canadians, their life expectancy is going up over the years! 1.2.8.4 Multiple countries scatterplot What if we want to look at a few countries altogether. We can do this too. We just change how we filter the data so more than one country is allowed, then we plot the data. We will also add some nicer color options and make the plot look pretty. First, the simple code: # filter rows to contain countries of choice smaller_df &lt;- gapminder_df %&gt;% filter(country %in% c(&quot;Canada&quot;,&quot;France&quot;,&quot;Brazil&quot;) == TRUE) # plot the new data contained in smaller_df ggplot(smaller_df, aes(y= lifeExp, x= year, group= country))+ geom_point() Nice, we can now see three sets of dots, but which are countries do they represent? Let’s add a legend, and make the graph better looking. ggplot(smaller_df,aes(y= lifeExp, x= year, group= country, color = country)) + geom_point()+ theme_classic(base_size = 15) + ylab(&quot;Life Expectancy&quot;) + xlab(&quot;Year&quot;) + ggtitle(&quot;Life expectancy by year for three countries&quot;) 1.2.8.5 geom_line() connecting the dots We might also want to connect the dots with a line, to make it easier to see the connection! Remember, ggplot2 draws layers on top of layers. So, we add in a new geom_line() layer. ggplot(smaller_df,aes(y= lifeExp, x= year, group= country, color = country)) + geom_point()+ geom_line()+ theme_classic(base_size = 15) + ylab(&quot;Life Expectancy&quot;) + xlab(&quot;Year&quot;) + ggtitle(&quot;Life expectancy by year for three countries&quot;) 1.2.9 Generalization Exercise The following generalization exercise and writing assignment is also in your lab R Markdown document for this lab. Complete your work in that document and hand it in. (1 point - Pass/Fail) Use the code from above to attempt to solve the extra things we ask you do for this assignment. You generalization exercises are as follows: Make a graph plotting Life Expectancy by year for the five continents, using the continent factor. Make sure you change the title so it reads correctly Make a graph plotting GDP per capita by year for the USA, Canada, and Mexico. Use the gdpPercap column for the GDP per capita data Make a new graph plotting anything you are interested in using the gapminder dataset. It just needs to be a plot that we have not given an example for 1.2.10 Writing assignment Complete the writing assignment described in your R Markdown document for this lab. When you have finished everything. Knit the document and hand in your stuff (you can submit your .RMD file to blackboard if it does not knit.) The question for this lab is a long answer question about histograms. Here is the question: Describe what histograms are, how to interpret them, and what they are useful for. You should answer each of these questions: The answers to each of these questions are worth .25 points each, for a total of 2 points What do the bars on a histogram represent? How many bars can a histogram have? What do the heights of the bars tell you What is on the x-axis and y-axis of a histogram What does the tallest bar on a histogram tell you? What does the shortest bar on a histogram tell you? What are some uses for histograms, why would you want to look at a histogram of some numbers that you collected? Imagine you had two histograms, one was very wide and spread out, the other was very narrow with a very tall peak. Which histogram would you expect to contain more consistent numbers (numbers that are close to each other), explain why. Rubric General grading. You will receive 0 points for missing answers (say, if you do not answer question c, then you will receive 0 out .25 points for that question) You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. For example, if you incorrectly describe what the x and y-axes refer to, then you will receive 0 points for that question. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 1.3 Excel 1.4 SPSS In this lab, we will get you acquainted with the SPSS software layout and graph some sample data to make sense of it. We will be doing the following: Opening SPSS and the SPSS layout Reviewing variable properties and the Variable View tab Opening a data file and producing different types of graphs 1.4.1 Opening SPSS and the SPSS layout Your lab instructor will take you through the process of opening the SPSS program. You may double-click on its icon located on the desktop of your lab computer, or you may find it using the Start menu. Once the program loads, you will be prompted with a pop-up window that asks you which file you would like to open. For now, we will be examining the basic layout of SPSS without a data set, so you can click Cancel. Once you do, the main SPSS spreadsheet should open. It will look like this, a basic spreadsheet: Figure 1.1: Empty SPSS spreadsheet Notice at the bottom of your window there are two tabs; “Data View” and “Variable View.” In data view, we enter data into our spreadsheet. You will notice that rows are numbered on the left-hand side of the spreadsheet, while columns are labeled “var.” This is an indication of the general structure of SPSS: Variables are contained in the columns, and rows indicate individual observations. For example, if you obtained the heights (in inches) of 5 people {x= 64, 70, 63, 62, 65} and wanted to enter their data into SPSS, each person’s height would be entered in a new row, not across the columns, as seen below: 1.4.2 Reviewing variable properties and the Variable View tab Now that we have some data entered, we might want to name our variable so that it’s evident our measurements represent heights. In order to view or modify variable names and other properties, look to the bottom of your SPSS window and switch over to the “Data View” tab. Once you do this, your window will appear as follows: Here, you can edit the name of your variables, and specify their properties. Variable names can be anything you like, with the restriction that you cannot use numbers or spaces. Next, notice several other important properties of variables you may at some point need to set or modify: Name: the name of your variable that will appear as a column header in Data View. No spaces or numerals. Type: Your data will most often be Numeric, but sometimes, as in data representing currency or data in scientific notation, you may change the data type appropriately. If your data is simply a label, word, or response (such as an open-ended response to a survey question), choose “String”: this tells SPSS not to treat this variable as a number. (Nota bene: if you select the wrong type of variable, SPSS may not be able to process your requested calculations, so always remember to check this parameter!) Width: This refers to how many digits will be visible by default. Decimals: This refers to how many decimal places will be visible by default. Label: This is a description of the variable. Any information too long to be included in the variable name goes here. Values: For nominal scale data, let’s say 1 represents male and 2 represents female, this is where you include the values and their corresponding labels. Measure: This variable property allows you to specify the nature of your data. Depending on the kind of scale you are using, you will choose a different measure type. Nominal and ordinal are chosen for nominal and ordinal scales, respectively. “Scale” is used when your data is measured on a ratio or interval scale. 1.4.3 Opening a data file and producing different types of graphs Now that we know about the properties of the SPSS spreadsheet window, let’s open a data file and learn how to make some sense of it by creating different types of graphs. Use the ‘nyc_films.sav’ file from the zip file you downloaded in section 0.2.3, which contains information about film permits (requests made by film companies to shoot TV shows and movies on location) filed in New York City. Once you open the data file, browse through to familiarize yourself with the variables that are being measured. Switch over to Variable View for details of each variable. 1.4.3.1 Bar Graphs Now, back to Data View. We will not be working with every single variable in this spreadsheet, but we’ll select a few interesting ones with which to answer questions. Let’s start with borough. Suppose we wanted to know which borough receives the most film permits (you can probably guess which one is most popular). Let’s use SPSS to produce a graph to answer this question. With your data file open, go up to the top menu and choose Graphs, then Legacy Dialogs. You will see an entire list of possible graphs we can use to plot our data. Let’s think about the nature of our question: we would like to know how many permits were filed for each borough. Borough is simply a label or a name for a region, and we want to know the frequency of permits for each borough. This is a nominal scale variable and so, we will appropriately choose a BAR graph to plot it. Select Bar… The next window will ask you to specify what kind of graph you would like. Select Simple and then Define. The following window will ask which variable you’d like to plot. Select borough from the left-hand list and use the arrow to move it into the field labeled “Category Axis.” Then click OK. SPSS will produce a new output window which will contain the bar graph you have generated. Notice which borough receives the most film permits. Note: your graph might be a different colour. 1.4.3.2 Histograms Now, let’s use a different data set to plot a histogram. The defining difference between a histogram and a bar graph (although they look very similar as they both utilize bars) is that a histogram is used to display a continuous variable (interval or ratio scale). In the previous example, boroughs were simply labels or names, so we used a nominal scale and therefore a bar graph. Here, we will deal with life expectancy (measured in years), an interval scale measure. Open life_expectancy.sav (from the zip file you downloaded from 0.2.3). Open this file and examine its rows and columns. Each column represents a year during which life expectancy was measured. Each row represents a different country. Let’s first get an idea about life expectancy in general. We want to plot a histogram with life expectancy on the x-axis and frequency on the y-axis. Choose Graphs in the top menu, then Legacy Dialogs. From here, remember we want a histogram, not a bar graph, so let’s select Histogram…. The window that appears contains every variable in your spreadsheet listed on the left-hand side. We can choose one variable at a time to plot. Let’s scroll all the way down the list and choose 2017 [v219]. This is the variable containing life expectancies for the year 2017. Using the arrow, move that variable into the field labeled “Variable:” then click OK. SPSS will produce an output window containing the distribution of life expectancy for the year 2017. Note: You may get different axis intervals/labels than what is shown here. 1.4.3.3 Scatterplots Now, we will look to a different type of data plot; the scatterplot. A scatterplot allows us to visualize bivariate data, that is, data for which there are two measurements per individual. For example, we may ask whether life expectancy in a country (or how long you live, on average) is related to the average income. Using the life_expectancy.sav data file, let’s plot both variables: 2017 [v219] and income. The income variable in the spreadsheet refers to data collected in 2017 by the Better Life Initiative. Notice not all the countries listed have estimates for average annual income. For those that do, this value represents household net adjusted income (annual) in US dollars. To create the scatterplot, let’s go to Graphs in the menu toolbar, then Legacy Dialogs, then Scatter. You will choose Simple scatter, then click Define. Next, indicate which variables (there are 2 this time!) you would like in the x- and y-axes. Use the arrows to place income in the x-axis field, and 2017 (V219) in the y-axis field. (For the purposes of graphing a scatterplot, it does not matter which variable goes into the y-axis and x-axis fields for now; you can reverse them if you’d like and you can still interpret the data similarly) Then click OK. SPSS will produce output containing a scatterplot. What relationship do you notice? What happens to life expectancy the more individuals earn, on average? 1.4.4 Homework Create the following three graphs in a single SPSS output file (*.spv). Upload this file to Moodle and use the graphs to answer the questions in the homework “quiz” on Moodle. Note that you can attempt the quiz as many times as you like before the due date and only your highest mark will be counted. Create a histogram for life expectancy in the year 1800. If you haven’t already, create a histogram for life expectancy in the year 2017. Create a scatterplot of life expectancy of each country in 1800 vs. that of 2018. 1.5 JAMOVI - Week 3 - February 1 &amp; 2 This section is copied almost verbatim, with some editorial changes, from Answering questions with data: The lab manual for R, Excel, SPSS and JAMOVI, Lab 1, Section 1.4, SPSS, according to its CC license. Thank you to Crump, Krishnan, Volz, &amp; Chavarga (2018). In this lab, it is hoped you will become more acquainted with the jamovi software layout and graph some sample data to make sense of it. We will be doing the following: Opening jamovi and reviewing the jamovi layout Reviewing variable properties and the Setup button Opening a data file and producing different types of graphs 1.5.1 Opening jamovi and reviewing the jamovi layout To open jamovi if you are using Windows, either double-click its icon located on the desktop of your computer, or click it in the Start menu. To open jamovi if you are using a Mac, find the icon in your Applications folder and double-click it. Once the program loads, you can click on the button that looks like three horizontal lines at the top left. This bottom reveals a menu. Take note that you have some familiar options here: New (for a new file), Open (to open an existing file), and Save. For now, we will be examining the basic layout of jamovi without a data set, so you can click the left facing arrow to close this menu. Once you do, the main jamovi spreadsheet should be apparent. It will look like this, with a basic spreadsheet on the left and a results pane on the right: Figure 1.2: Empty jamovi spreadsheet As explained in Section 0.6.1.2, you can slide the separating line between these two panels to make one panel or the other larger. You should also recall that, in the spreadsheet, each row represents a case or a participant and each column represents a variable. (For more details about the jamovi program, see Section 0.6.) If, for example, you obtained the heights (in inches) of 5 people {x = 64, 70, 63, 62, 65} and wanted to enter their data into jamovi, each person’s height would be entered in a new row, not across the columns, as seen below: 1.5.2 Reviewing variable properties and the Setup button Now that we have some data entered, we might want to name our variable so that it’s evident our measurements represent heights. In order to view or modify variable names and other properties, look to the menu ribbon at the top of the jamovi window. While you are within any column representing a variable, you can click the Setup button which is visible when the Data tab is highlighted. This Setup button will reveal, in a top panel, information about the attributes of the variable. Once selected, your window will appear as follows: A more detailed description of variable types is presented in Section 0.6.3. Within this variable panel, you can edit the name of your variables and specify their properties. Variable names can be anything you like (without the restrictions that SPSS has). Based on some user feedback, however, you may want to consider using Camel Case or underscores in variable names to play it safe (ex. ParticipantNumber or Participant_Number). Also, you may want to consider how much of the variable name you will see in the spreadsheet panel based on the size of screen and the number of variables you have in your data set. Below the variable name is a place for a description of the data. Below the description is a drop-down menu allowing you to identify the measure type: nominal, ordinal, continuous, or ID. Below that is a drop-down menu allowing you to identify the data type: Integer, Decimal, or Text. The final variable attribute on the left side is a place for you to identify any missing values. To the left of the measure type, data type, and missing values is a box wherein levels can be specified. If you need to code data, this is the place to do so. (Just in case it helps you to know this: It is similar to the Values column in the Variable View of SPSS.) Selecting the “Retain unused levels” radio button forces the program to keep levels even if they do not appear in the data set. You may want to click the arrowhead that points to the left or right to move to an adjacent variable. Alternatively, clicking the Setup button again or clicking the upward facing arrow will hide this variable attribute information from your view. 1.5.3 Importing a data file Now that we know about the properties of the jamovi spreadsheet window, let’s import a data file and learn how to make some sense of it by creating different types of graphs. (It is not important for you to Save the jamovi file you just created because we will not be doing anything with those fictitious height data). First, you need to agree to some terms of use for the data we will be using in this class. Complete the quiz here. Next, you can download the data file here. The data file is an Excel spreadsheet (xlsx file). Remember to save the file somewhere sensible on your computer so you can find it later. In jamovi, click the button that looks like three horizontal lines at the top left. Select Import. Click Browse, locate the xlsx file you just downloaded, and double click. It is a somewhat large file and will take a few minutes to import. Once it is finished, we want to save it in jamovi format (omv). Click the button that looks like three horizontal lines at the top left. Select Save As, type a sensible name for your file,ensure it is set to “jamovi file (.omv),” click browse and select the folder in which to save your file, and click Save. Remember that EngageNS surveyed Nova Scotians about various aspects of their quality of life. The data dictionary, which is a *.pdf file found here, lists all the variables that were included in the EngageNS survey and shows how they were measured. Once you open the data file, browse through to familiarize yourself with the variables that are being measured. Take a look at the rows and columns in each file. Each column represents a different variable that was measured in the EngageNS survey. Each row represents the responses of a single survey respondent. Switch over to the Variables tab for details of each variable. JAMOVI has attempted to sort out the scale of measurement for each variable, based on the data. Sometimes it gets it right, but sometimes it doesn’t. We can use the data dictionary and what we know about scales of measurement to input the correct scales of measurement as needed. 1.5.4 Graphs 1.5.4.1 Bar Graphs and Histograms Bar graphs and histograms are different types of graphs. Bar graphs are used for nominal variables. The y-axis of a bar graph could be the mean of each level, the frequency of each level, or some other summary of each level. Histograms are used for continuous variables (interval or ratio scales of measurement). The y-axis is always frequency. Sometimes they are labeled “count” or “density,” but they always represent the number of times certain values appear in the data. Are ordinal variables continuous? No. However, many ordinal variables can be conceptualized as quasi-interval. Likert scales are often quasi-interval. For the scale to be quasi-interval, we generally require at least five options on the scale. In addition, it should be reasonable to assume equal spacing between options on the scale. For example, a scale with the following options might be considered quasi-interval, because there are five options and they all seem equally spaced from one another: Strongly disagree, somewhat disagree, neither agree or disagree, somewhat agree, strongly agree A quirk of JAMOVI is that histograms do not include numbers on the y-axis, which makes them difficult to read. However, bar graphs do include numbers on the y-axis in JAMOVI. For small, quasi-interval scales, you can approximate a histogram with a bar graph. The biggest difference is that usually histograms do not have any space between the bars, whereas bar graphs do have space between the bars, but this is not problematic for small, quasi-interval scales. Let’s use a bar graph to approximate a histogram for participant’s self-reported mental health. In the EngageNS survey, respondents were asked to rate their own mental health on a 5-point scale, ranging from 1 to 5 where 1 = poor, 2 = fair, 3 = good, 4 = very good, and 5 = excellent. The variable name is MNTLHLTH. The first thing to check is whether the variable’s properties are correct. We will explain the following two figures during the lab. Visual for errors in variable attributes: Visual for codes and what they represent from data dictionary: Let’s plot a histogram for this variable. We will do this as a live demo in the lab. 1.5.5 Homework See Moodle. 1.5.6 Thinking about Data - Practice Questions Describe what histograms are, how to interpret them, and what they are useful for. You should answer each of these questions: The answers to each of these questions are worth .25 points each, for a total of 2 points. What do the bars on a histogram represent? How many bars can a histogram have? What do the heights of the bars tell you? What is on the x-axis and y-axis of a histogram? What does the tallest bar on a histogram tell you? What does the shortest bar on a histogram tell you? What are some uses for histograms, or why would you want to look at a histogram of some numbers that you collected? Imagine you had two histograms, one was very wide and spread out while the other was very narrow with a very tall peak. Which histogram would you expect to contain more consistent numbers (numbers that are close to each other)? Explain why. Rubric General grading. You will receive 0 points for missing answers (say, if you do not answer question c, then you will receive 0 out .25 points for that question) You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. For example, if you incorrectly describe what the x and y-axes refer to, then you will receive 0 points for that question. If your answer is generally correct but very difficult to understand and unclear, you may receive half points for the question. Create the appropriate graph for the HB_SUBUSE variable. In this variable, respondents were asked “In the past week, I engaged in substance use (e.g., recreational drugs).” Responses were measured on a 7-point scale where 1 = very strongly disagree to 7 = very strongly agree, with 4 = neutral. What do you learn by looking at the graph? Create the appropriate graph for GAMBLING. In this variable, respondents were asked “In the past year, how often did you engage in gambling (e.g., video lottery; lottery tickets)? Responses were measured on the following scale: 1 = never, 2 = once in the past year, 3 = at least once every 6 months, 4 = at least once every 3 months, 5 = at least once a month, 6 = at least once a week. What do you learn by looking at the graph? Use the data dictionary to find a variable you are interested in. Create the appropriate graph. What do you learn by looking at the graph? "],["lab-2-descriptive-statistics-and-more-graphs.html", "Chapter 2 Lab 2: Descriptive Statistics (and more graphs) 2.1 General Goals 2.2 R 2.3 Excel 2.4 SPSS 2.5 JAMOVI - Week 4 - February 8 &amp; 9", " Chapter 2 Lab 2: Descriptive Statistics (and more graphs) Describing comic sensibility is near impossible. It’s sort of an abstract silliness, that sometimes the joke isn’t the star. —Dana Carvey The purpose of this lab is to show you how to compute basic descriptive statistics, including measures of central tendency (mean, mode, median) and variation (range, variance, standard deviation). 2.1 General Goals Compute measures of central tendency using software Compute measures of variation using software Ask some questions of a data set using descriptive statistics 2.1.1 Important info We will be using data from the gapminder project. You can download a small snippet of the data in .csv format from this link (note this dataset was copied from the gapminder library for R) gapminder.csv. If you are using R, then you can install the gapminder package. This method is described later in the R section. 2.2 R 2.2.1 Descriptives basics in R We learned in lecture and from the textbook that data we want to use ask and answer questions often comes with loads of numbers. Too many numbers to look at all at once. That’s one reason we use descriptive statistics. To reduce the big set of numbers to one or two summary numbers that tell use something about all of the numbers. R can produce descriptive statistics for you in many ways. There are base functions for most of the ones that you want. We’ll go over some R basics for descriptive statistics, and then use our new found skills to ask some questions about real data. 2.2.1.1 Making numbers in R In order to do descriptive statistics we need to put some numbers in a variable. You can also do this using the c() command, which stands for combine my_numbers &lt;- c(1,2,3,4) There a few other handy ways to make numbers. We can use seq() to make a sequence. Here’s making the numbers from 1 to 100 one_to_one_hundred &lt;- seq(1,100,1) We can repeat things, using rep. Here’s making 10 5s, and 25 1s: rep(10,5) ## [1] 10 10 10 10 10 rep(1,25) ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 all_together_now &lt;- c(rep(10,5),rep(1,25)) 2.2.1.2 Sum Let’s play with the number 1 to 100. First, let’s use the sum() function to add them up one_to_one_hundred &lt;- seq(1,100,1) sum(one_to_one_hundred) ## [1] 5050 2.2.1.3 Length We put 100 numbers into the variable one_to_one_hundred. We know how many numbers there are in there. How can we get R to tell us? We use length() for that. length(one_to_one_hundred) ## [1] 100 2.2.2 Central Tendency 2.2.2.1 Mean Remember the mean of some numbers is their sum, divided by the number of numbers. We can compute the mean like this: sum(one_to_one_hundred)/length(one_to_one_hundred) ## [1] 50.5 Or, we could just use the mean() function like this: mean(one_to_one_hundred) ## [1] 50.5 2.2.2.2 Median The median is the number in the exact middle of the numbers ordered from smallest to largest. If there are an even number of numbers (no number in the middle), then we take the number in between the two (decimal .5). Use the median function. There’s only 3 numbers here. The middle one is 2, that should be the median median(c(1,2,3)) ## [1] 2 2.2.2.3 Mode R does not a base function for the Mode. You would have to write one for yourself. Here is an example of writing your own mode function, and then using it. Note I searched how to do this on Google, and am using the mode defined by this answer on stack overflow Remember, the mode is the most frequently occurring number in the set. Below 1 occurs the most, so the mode will be one. my_mode &lt;- function(x) { ux &lt;- unique(x) ux[which.max(tabulate(match(x, ux)))] } my_mode(c(1,1,1,1,1,1,1,2,3,4)) ## [1] 1 2.2.3 Variation We often want to know how variable the numbers are. We are going to look at descriptive statistics to describe this such as the range, variance, the standard deviation, and a few others. First, let’s remind ourselves what variation looks like (it’s when the numbers are different). We will sample 100 numbers from a normal distribution (don’t worry about this yet), with a mean of 10, and a standard deviation of 5, and then make a histogram so we can see the variation around 10.. sample_numbers &lt;- rnorm(100,10,5) hist(sample_numbers) 2.2.3.1 range The range is the minimum and maximum values in the set, we use the range function. range(sample_numbers) ## [1] -2.591563 22.856565 2.2.3.2 var = variance We can find the sample variance using var. Note, divides by (n-1) var(sample_numbers) ## [1] 26.4788 2.2.3.3 sd = standard deviation We find the sample standard deviation us SD. Note, divides by (n-1) sd(sample_numbers) ## [1] 5.145755 Remember that the standard deviation is just the square root of the variance, see: sqrt(var(sample_numbers)) ## [1] 5.145755 2.2.3.4 All Descriptives Let’s put all of the descriptives and other functions so far in one place: sample_numbers &lt;- rnorm(100,10,5) sum(sample_numbers) ## [1] 1092.573 length(sample_numbers) ## [1] 100 mean(sample_numbers) ## [1] 10.92573 median(sample_numbers) ## [1] 10.90372 my_mode(sample_numbers) ## [1] 7.98613 range(sample_numbers) ## [1] -0.308353 24.749855 var(sample_numbers) ## [1] 25.30758 sd(sample_numbers) ## [1] 5.030664 2.2.4 Descriptives by conditions Sometimes you will have a single variable with some numbers, and you can use the above functions to find the descriptives for that variable. Other times (most often in this course), you will have a big data frame of numbers, with different numbers in different conditions. You will want to find descriptive statistics for each the sets of numbers inside each of the conditions. Fortunately, this is where R really shines, it does it all for you in one go. Let’s illustrate the problem. Here I make a date frame with 10 numbers in each condition. There are 10 conditions, each labelled, A, B, C, D, E, F, G, H, I, J. scores &lt;- rnorm(100,10,5) conditions &lt;- rep(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;), each =10) my_df &lt;- data.frame(conditions,scores) If you look at the my_df data frame, you will see it has 100 rows, there are 10 rows for each condition with a label in the conditions column, and 10 scores for each condition in the scores column. What if you wanted to know the mean of the scores in each condition? You would want to find 10 means. The slow way to do it would be like this: mean(my_df[my_df$conditions==&quot;A&quot;,]$scores) ## [1] 12.59648 mean(my_df[my_df$conditions==&quot;B&quot;,]$scores) ## [1] 10.6128 mean(my_df[my_df$conditions==&quot;C&quot;,]$scores) ## [1] 8.266488 # and then keep going Nobody wants to do that! Not, me I stopped doing it that way, you should to. 2.2.4.1 group_by and summarise We can easily do everything all at once using the group_by and summarise function from the dplyr package. Just watch library(dplyr) my_df %&gt;% group_by(conditions) %&gt;% summarise(means = mean(scores)) ## # A tibble: 10 x 2 ## conditions means ## * &lt;fct&gt; &lt;dbl&gt; ## 1 A 12.6 ## 2 B 10.6 ## 3 C 8.27 ## 4 D 6.70 ## 5 E 10.2 ## 6 F 9.12 ## 7 G 8.21 ## 8 H 10.1 ## 9 I 11.6 ## 10 J 10.2 A couple things now. First, the print out of this was ugly. Let’s fix that. we put the results of our code into a new variable, then we use knitr::kable to print it out nicely when we knit the document summary_df &lt;- my_df %&gt;% group_by(conditions) %&gt;% summarise(means = mean(scores)) knitr::kable(summary_df) conditions means A 12.596478 B 10.612800 C 8.266488 D 6.704745 E 10.170008 F 9.120068 G 8.205138 H 10.091734 I 11.555082 J 10.234129 2.2.4.2 multiple descriptives The best thing about the dplyr method, is that we can add more than one function, and we’ll get more than one summary returned, all in a nice format, let’s add the standard deviation: summary_df &lt;- my_df %&gt;% group_by(conditions) %&gt;% summarise(means = mean(scores), sds = sd(scores)) knitr::kable(summary_df) conditions means sds A 12.596478 9.352925 B 10.612800 4.476998 C 8.266488 4.555700 D 6.704745 5.011566 E 10.170008 3.875537 F 9.120068 5.636339 G 8.205138 5.865190 H 10.091734 5.256813 I 11.555082 4.874282 J 10.234129 3.873318 We’ll add the min and the max too: summary_df &lt;- my_df %&gt;% group_by(conditions) %&gt;% summarise(means = mean(scores), sds = sd(scores), min = min(scores), max = max(scores)) knitr::kable(summary_df) conditions means sds min max A 12.596478 9.352925 -1.0708193 27.46081 B 10.612800 4.476998 2.2941837 18.44375 C 8.266488 4.555700 0.0053070 14.46609 D 6.704745 5.011566 0.8117465 14.21022 E 10.170008 3.875537 4.7036641 16.04143 F 9.120068 5.636339 1.1128198 21.33737 G 8.205138 5.865190 -2.4686723 14.91742 H 10.091734 5.256813 0.2377578 14.80595 I 11.555082 4.874282 3.3809716 17.21664 J 10.234129 3.873318 0.4334203 14.07733 2.2.5 Describing gapminder Now that we know how to get descriptive statistics from R, we cam do this will some real data. Let’s quickly ask a few question about the gapminder data. library(gapminder) gapminder_df &lt;- gapminder Note: The above code will only work if you have installed the gapminder package. Make sure you are connected to the internet, then choose the Packages tab from the bottom right panel, and choose install. Thens search for gapminder, choose it, and install it. 2.2.5.1 What are some descriptive for Life expectancy by continent? Copy the code from the last part of descriptives using dplyr, then change the names like this: summary_df &lt;- gapminder_df %&gt;% group_by(continent) %&gt;% summarise(means = mean(lifeExp), sds = sd(lifeExp), min = min(lifeExp), max = max(lifeExp)) knitr::kable(summary_df) continent means sds min max Africa 48.86533 9.150210 23.599 76.442 Americas 64.65874 9.345088 37.579 80.653 Asia 60.06490 11.864532 28.801 82.603 Europe 71.90369 5.433178 43.585 81.757 Oceania 74.32621 3.795611 69.120 81.235 2.2.6 Generalization Exercise (1 point - Pass/Fail) Complete the generalization exercise described in your R Markdown document for this lab. What is the mean, standard deviation, minimum and maximum life expectancy for all the gapminder data (across all the years and countries). Hint: do not use group_by What is the mean, standard deviation, minimum and maximum life expectancy for all of the continents in 2007, the most recent year in the dataset. Hint: add another pipe using filter(year==2007) %&gt;% 2.2.7 Writing assignment (2 points - Graded) Complete the writing assignment described in your R Markdown document for this lab. When you have finished everything. Knit the document and hand in your stuff (you can submit your .RMD file to blackboard if it does not knit.) Your writing assignment is to answer these questions in full sentences using simple plain langauge: Define the mode. Explain what would need to happen in order for a set of numbers to have two modes Define the median Define the mean Define the range When calculating the standard deviation, explain what the difference scores represent Explain why the difference scores are squared when calculating the standard deviation If one set of numbers had a standard deviation of 5, and another had a standard deviation of 10, which set of numbers would have greater variance, explain why. Rubric General grading. You will receive 0 points for missing answers (say, if you do not answer question c, then you will receive 0 out .25 points for that question) You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 2.3 Excel How to do it in Excel 2.4 SPSS In this lab, we will use SPSS to calculate a variety of descriptive statistics. SPSS allows us to specify which statistics we would like calculated and produce them all in one output table. Here, we will learn to: Calculate descriptive statistics Graph data using a histogram Edit graphs Create and interpret a boxplot Let’s begin with a short data set {x= 1, 1, 4, 1, 2, 5, 7} Suppose we want to calculate the measures of central tendency (mean, median, and mode) as well as variability (range, standard deviation, and variance). First, we will have to enter our data into the SPSS spreadsheet. There are 7 measurements, so we will need 7 rows of data (I have also changed the name of this variable in Variable View to x: 2.4.1 Calculating Descriptive Statistics From here, go to the top menu and choose Analyze, then Descriptive Statistics and then Frequencies: A new window will ask you to specify for which variables you want descriptives statistics calculated. Use the arrow to move the x variable from the left-hand to the right-hand field. Now, click the Statistics button. This will open a new window containing a list of statistics. You can choose as many as you want to be calculated. We will choose mean, median, mode, range, standard deviation, and variance. SPSS will not create a table with the inter-quartile range (IQR); however, we will select quartiles which will allow us to calculate IQR ourselves (recall that IQR = Q3 - Q1). Then click Continue, and then OK. SPSS will produce a set of two output tables: one containing the descriptive statistics we have chosen, and the other a frequency table–a list of all the possible values in our data set and their corresponding frequencies. 2.4.2 Descriptive Statistics and Histograms Now let’s use a real dataset to calculate the same measures of central tendency and variability as in the last example, but with the addition of a histogram to visualize a distribution. We want to relate the visualization back to the descriptive statistics. Use the life_expectancy.sav you downloaded from Section 0.2.3 (the same file we used for our lab session on graphing last week). Suppose we wanted to know about life expectancy (around the world) in 2018. This will include calculating descriptive statistics, as well as graphing a histogram to examine the distribution of our data. While the last section of the lab manual showed how to use the Graphs menu to accomplish this task, SPSS often has neat shortcuts to graph data within other menu options. In other words, there is sometimes more than one way to get SPSS to do what we want it to do. For example, in the process of asking SPSS to produce a table of descriptive statistics, we can also add a histogram to the output without having to go to the Graphs menu. First, we go to Analyze, then Descriptive Statistics, then Frequencies. A window will appear asking us to indicate which variable to use. We will scroll all the way down in the list of variables on the left, choose 2018 [V220], and then move it into the field on the right using the arrow. As in the previous example, we will click the Statistics button next, and choose our measures of central tendency (mean, median, mode) as well as variability (range, quartiles, standard deviation, variance). Once we click continue, we are back to the previous window. Here, we can conveniently ask SPSS to insert a histogram. Let’s click on the Charts button: This will open a new window that asks us to specify the type of chart we would like. Let’s select Histogram, and check off Show normal curve on histogram: Click Continue, and then OK. SPSS will produce a table of the requested descriptive statistics, a frequency table (we will ignore this for now because it is long and not relevant to this exercise), and finally, a histogram showing the distribution of life expectancy (in years) with a normal distribution superimposed for comparison. Something to think about: What do the mean, median, and mode indicate about the shape of the distribution? Is it confirmed when we look at the histogram? How does the shape of this distribution compare to the symmetrical normal distribution which is superimposed over it? 2.4.3 Editing graphs It is helpful to know how to manipulate not just the superficial, cosmetic appearance of data visualizations, but also the components of graphs that communicate important information. For example, when you are trying to compare multiple graphs, it is very helpful if all of the features of the graphs are the same. 2.4.3.1 Editing the axes To modify the scale of an axis in a graph, first double-click on the graph itself in the output window. A Chart Editor should pop up. Now, hover your mouse over one of the values on the x-axis, and click down once. You will see all the x-axis values suddenly highlight: Now that you know how to select the entire axis, double click on it. A properties window will pop up: Notice that in the default tab, you can change the fill color of components of your graph. For now, we will select the Scale tab instead: Notice in this tab, we can change the minimum, maximum, and increments of our scale. Let’s change the major increment to 5: Click Apply. 2.4.3.2 Editing the bin width Another important aspect of a histogram’s appearance is the bin width. You can change the bin width in the Chart Editor. Double click on one of the bars to bring the Properties window up. The default tab, Binning, will allow you to change the properties of the bins. You can set the bin width or the number of bins in this tab. For example, to set the bin width, select Custom (in the X Axis box, about halfway down the Properties window). Then select Interval width, input your chosen bin width (in this example, 10), and hit Apply. Then Close. Click the x to close the Chart Editor window. The SPSS output window will now contain your edited graph: 2.4.4 Boxplots Let’s look at another useful graph: the boxplot. A boxplot, or box plot, gives us a visual representation of a data set in terms of its quartiles.You might think about the data in terms of four groups, each with 25% of the total set. Inside the box are the two middle groups. The line inside the box is the median, which is the same as the second quartile. The two ends of the box mark the first (or lower) quartile and the third (or upper) quartile. The difference between the first and third quartile is known as the interquartile range (IQR). Outside the box are two whiskers. The end of the lower whisker is the minimum score (excluding any outliers - we’ll get to what those are later) and the end of the higher/upper whisker is the maximum score (again, excluding any outliers). Note that boxplots can be presented horizontally or vertically. These graphs allow us to visualize the median, quartiles, interquartile range, range, and any potential outliers. Using the life_expectancy.sav data file, let’s create a boxplot to visually inspect the distribution of the data for the variable: 1934 [v136]. To create the boxplot, let’s go to Analyze in the menu toolbar, then Descriptives, then Explore. If you click on Plots, you will notice that SPSS has, by default, settings that will provide both a Boxplot and a Stem-and-Leaf graph. You can deselect Stem-and-Leaf. Next, click Continue and OK. SPSS will produce output containing a boxplot. What do you notice about the relative sizes of the second and third quartiles? Are the whiskers the same size? If not, how might you explain the difference? Notice the circles with numbers next to them in the boxplot. These circle represent outliers, and the numbers correspond to the case/participant/subject number that is being recorded. Sometimes, you will see asterisks with numbers next to them in the boxplot. These asterisks represent extreme outliers. You can imagine that the identification of these outliers gives you reason to go investigate your data more closely. 2.4.5 Homework Create a single SPSS output file (.spv) and upload it to Moodle. The file should contain the following: 1a. Using the life expectancy data set, produce a table of output showing the descriptive statistics (measures of central tendency and variability - don’t forget to include quartiles so you can calculate IQR) for both years 1800 and 1934 (during the Great Depression). Note: We are looking for a single table that contains the descriptives for both years. 1b. Plot histograms of life expectancy for both 1800 and 1934. How are these distributions different? Note: We are looking for two histograms, one for each year. (Hint: Make sure the axes and bins of both graphs are the same, so the histograms are comparable). Download the CCHS Annual 2017 2018 (SPSS sav file) from the “Team Project” section at the bottom of our lab Moodle page. Use the information on your .spv file and the CCHS .sav file to answer the questions in the homework “quiz” on Moodle. Note that you can attempt the quiz as many times as you like before the due date and only your highest mark will be counted. 2.5 JAMOVI - Week 4 - February 8 &amp; 9 This section is copied almost verbatim, with some editorial changes, from Answering questions with data: The lab manual for R, Excel, SPSS and JAMOVI, Lab 2, Section 2.4, SPSS, according to its CC license. Thank you to Crump, Krishnan, Volz, &amp; Chavarga (2018). In this lab, we will use jamovi to calculate a variety of descriptive statistics. jamovi allows us to specify which statistics we would like calculated and produces them all in one output table. Here, we will learn to: Select and calculate descriptive statistics Create and interpret a boxplot 2.5.1 Pre-lab tasks Please complete all of these tasks before your lab starts. Do these tasks as soon as possible and post to the Q&amp;A forum or come to virtual help hours if you run into any trouble. If you have not already done so, read the “Expectations for lab” posts in our Q&amp;A forum: https://moodle.stfx.ca/mod/forum/view.php?id=815450. We have updated the EngageNS dataset. Please delete your current version and download the latest csv file here: https://moodle.stfx.ca/mod/url/view.php?id=830017. If this link does not work for you, you may need to complete the EngageNS terms of use quiz here: https://moodle.stfx.ca/mod/quiz/view.php?id=830016. If you have not already done so, you should also download the data dictionary. It is the pdf file in the OneDrive directory from which you just downloaded the .csv file. The data dictionary contains important information about what the data mean. Open JAMOVI. It might be slow to open. Click on the three lines near the top left of the JAMOVI window (circled in red below). Click Import (solid red circle) and then Browse (dashed red circle). Find the new EngageNS .csv data file you just downloaded. Select it and click open. It may take a few minutes to open. When it has finished opening, your JAMOVI window should look something like this: You can delete the first three columns. Click the Data tab, select a column by clicking on the header (the name of the column, e.g., A), and then click the Delete column button (red circle below). Now save your file as a JAMOVI (.omv) file. Click the three horizontal lines, then click Save As. Input a sensible filename and make sure your file type is set to jamovi file (.omv) (red circle below). Browse to your PSYC 292 lab folder, and click save. Read over the remainder of Chapter 2.5 of this lab manual. Now, you are all ready for lab! You can close everything for now, but before your lab session begins, open your .omv file in JAMOVI and your data dictionary pdf in a pdf viewer such as Preview or Adobe. Come to your lab session with your .omv file open in JAMOVI and your data dictionary pdf open in a pdf viewer such as Preview or Adobe. 2.5.2 The basics In JAMOVI, click the three horizontal lines and then click New to open a new file. Let’s begin with a short data set {x = 1, 1, 4, 1, 2, 5, 7} Suppose we want to calculate the measures of central tendency (mean, median, and mode) as well as variability (range, standard deviation, and variance). First, we will have to enter our data into our new jamovi spreadsheet. There are 7 measurements (1 measurement from each of 7 individual cases), so we will need 7 rows of data (In Setup, I have also changed the name of this variable to X and changed the scale to continuous.): 2.5.3 Calculating Descriptive Statistics From here, go to the top menu, click on Analyses, Exploration, and Descriptives. As soon as you select the variable of interest, X, and use the arrow to move it to the “Variables” window, you will notice that jamovi produces a Descriptives table in the Results pane. By default, jamovi will show you the sample size, number of missing case measurements, mean, median, standard deviation, minimum, and maximum. Recall from the earlier instructions that we would also like to look at the mode, range, and variance – which are not included by default. To include these descriptive statistics, click the Statistics button. Clicking on this button will open a new window containing a list of statistics. You can choose as many as you want to be calculated. We will select those which were missing from the default settings: mode, range, and variance. Another descriptive statistic of interest may be the interquartile range. Let’s select it, too. Click on IQR. In the Results pane, you should see the additional descriptive statistics appear as you select them. 2.5.4 Descriptive Statistics and Graphs 2.5.4.1 Example 1: Sleep Now, let’s use a real dataset to calculate the same measures of central tendency and variability as in the last example, but with the addition of a histogram to visualize a distribution. We want to relate the visualization back to the descriptive statistics. Use the EngageNS data. Remember, you should have already opened your .omv (JAMOVI file) of the EngageNS data on your computer. Because .omv files contain both the data and the output, we want to save a new file before each analysis. So, before you start following along, save a new copy of your .omv file by clicking on the three lines and selecting Save As. Give the file a new name. Then, as you generate output by following the instructions below, you can continue to save this file. When you are ready to start your homework, you can open the original file, save a copy with a new name, and create your homework output in that new file. Suppose we wanted to know about Nova Scotians’ sleep duration. We can use both descriptive statistics and graphs such as histograms to explore a variable such as sleep duration. You can find information about the SLEEP variable in the data dictionary. According to the data dictionary, SLEEP is the number of hours participants’ reported sleep per day, and it includes both night time and naps. To find the SLEEP variable, first click on the Variables tab near the top left (red circle). Now you can search for your variable of interest by typing in the search bar. You will notice that there are two variables with similar names, SLEEP and R_SLEEP. In the EngageNS data, variables that start with R_ are revised variables. This means they have been cleaned in some way. Not all variables needed cleaning, so they do not have a R_ version. Always use the R_ variable if it is there. We will see why in a minute! For our purposes right now, select SLEEP from the list by checking the box. When you click back to the Data tab (next to the Variables tab), you will be on the SLEEP variable. While SLEEP is highlighted, click on the Setup button. Consider including a variable description based on the information in the EngageNS data dictionary. Also, ensure that the information jamovi included for the variable attributes is correct based on your interpretation of this variable. SLEEP is measured in number of hours. It has equal intervals and a true zero (you can’t have negative sleep). So, our SLEEP variable is a ratio scale. The measure type is set to continuous, so we are good to go. After you have considered the variable attributes, click on Descriptives again, or click on the up arrow to close the Setup panel. As you will recall, to get jamovi to produce a table of descriptive statistics, we begin in the top menu by selecting Analyses, Exploration, and Descriptives. Click on the magnifying glass icon at the top of the list of variables to search. Select SLEEP and use the right arrow to move it to the “Variable” window at the right. The default settings may not give us all descriptive statistics in which we are interested. Let’s consider the scale of measurement. Which descriptive statistics are appropriate to consider based on this scale of measurement? The most typical choice for a ratio scale of measurement is to report the mean for central tendency, and the standard deviation for variation. Other choices might also be correct, depending on the data and your research question. As in the previous example, we will click the Statistics button next, and choose our measures of central tendency (mean, median, mode) as well as variability (standard deviation, variance, range, and IQR). As we click to indicate these commands, we will see the resulting Descriptives table in the Results panel. So, we have a mean of 674, a median of 7, and a mode of 7. Pause for a moment and think about that. What does the SLEEP variable represent again? Hours of sleep per day. This table is saying that, on average, Nova Scotians sleep for 674 hours per day. What’s going on? In brief, the SLEEP variable contains some garbage data. You can see that the maximum is 8.00e+6 or 8 million hours of sleep. Another way to evaluate the data is to look at the histogram. Scroll down below the descriptive statistics you selected to the Plots section, and select Histogram. The x-axis on this histogram is too big because of the garbage data. It doesn’t make sense to look at a histogram of sleep from 0 to 8 million hours. Assuming you could fit about 5 bars between 0 and 2 million (2e+06), all that tall bar tells us is that most people sleep between 0 and 400 000 hours. Not very helpful. Luckily, we can check the revised sleep variable, R_SLEEP. The data in this variable have been cleaned to remove any values above 23. Even a sleep duration of 23 would be a bit silly (Would you even have time to fill out the survey if you slept for 23 hours a day?), but at least it is a lower number than the number of hours in the day. Back at the top of this window, move the R_SLEEP variable into the Variables box. This will add a new column to our Descriptives table: The mean of R_SLEEP is 7.04 hours. Much more sensible than 674 hours! We can also ask for a histogram of R_SLEEP: Now that the x-axis stops at 23 instead of 8e+6, we can see the shape of the distribution much better. The tallest bar is somewhere around 7. Almost all of the responses are between 4 and 10. You often have to write sentences to report your descriptive statistics. For sleep, you might write: The mean (standard deviation) hours of sleep per day reported by Nova Scotians was 7.05 (1.30). 2.5.4.2 Example 2: Volunteering Let’s look at another variable. If you simply select another variable as you did just before with R_SLEEP, the new variable will appear in the same table. To begin a new analysis, close the analysis you just completed by clicking on the right-facing arrow (circled in red in the image below) in the Descriptives menu: The VOLUNTEER variable represents whether participants volunteered in the past year. A 1 means they did, and a 2 means they didn’t. Take a moment and make a prediction: What percentage of participants do you expect have volunteered in the past year? Back in the Variables tab, search for VOLUNTEER. Select it by clicking so the check box is visible, and then click the Data tab. Click Setup. The measurement type is nominal, which is correct: the VOLUNTEER variable does not have order, equal spacing between intervals, or a true 0. We don’t need to fix anything here. Click the Analyses tab, click Exploration and then click Descriptives. Search for VOLUNTEER and move the variable into the Variables box (Note: There’s no R_VOLUNTEER variable, so we don’t have to worry about that in this case). As before, select all the measures of Central Tendency and Dispersion. Your table should look like this: We can use this table to check our prediction from above. The mode is 1, so most participants reported volunteering in the past year. We could ask more questions about this variable. How many participants volunteered? You can get that information a few different ways. First, select Frequency tables (red circle): The output panel will now include a new table, Frequencies of VOLUNTEER: This table shows that 6715 participants answered with a 1, meaning they did volunteer in the past year, and 6015 answered with a 2, meaning they did not. You can also get this information from a bar graph. Under Plots, select Bar plot: Your output panel should now include the following graph: Can you see how the frequencies table and bar plot are related? 2.5.5 Selecting the appropriate descriptive statistics We usually report at least two descriptive statistics for each variable: a measure of central tendency and a measure of variation. 2.5.5.1 Selecting the central tendency measure Choosing the right descriptive statistics for a given variable depends on understanding the distribution or shape of the data. It also depends on the scale of measurement of your variable. Sometimes, there can be more than one right answer. If the measurement scale is nominal, we usually look at the mode for information about central tendency. If the measurement scale is ordinal, we usually look at the median for information about central tendency. The central tendency measure used for interval or ratio scales of measurement can vary. If the distribution is not skewed, we would usually consider the mean. If the distribution is skewed, we might look to the median to avoid the influence the long, asymmetric tail of the distribution has on the mean. The median is also a good choice for interval or ratio data if there are outliers present. This is because the mean is “sensitive” to outliers - outliers can impact the mean a lot. The median is not sensitive to outliers. The SLEEP variable is example of how a skewed distribution and/or outliers can impact the mean. Some concepts can be measured at multiple scales of measurement. Consider, for example, exercise behaviour of Nova Scotians. The descriptive statistics you choose to calculate usually depend on the scale of measurement. While browsing through the data dictionary, if we look at HB_EXERCISE, we see that the variable asks participants to indicate their agreement with the following statement: “In the past week, I regularly engaged in good quality exercise.” Participants’ agreement is indicated using a Likert scale, ranging from 1 to 7, wherein 1 = very strongly disagree and 7 = very strongly agree. Likert scales such as this one are ordinal; however, we often treat them as interval. In this case, we call it a quasi-interval scale. If we consider the scale ordinal, we would probably report the median. If we consider the scale quasi-interval, we would most likely report the mean. If, however, we look at PA_VIGOROUS, we see that the variable asks participants to indicate their physical activity participation in the previous month. Participants were instructed to enter the number of times they engaged in a a vigorous activity in the past month. This variable is measured on a ratio scale. Unless the data are skewed or there are outliers, we would likely report the mean. You can see that the answer to a research question about Nova Scotians’ exercise, as well as the statistics you consider to formulate that answer, will depend upon the variable at which you look. 2.5.5.2 Selecting the variation measure To select the appropriate measure of variation, choose the one that goes best with the central tendency measure you chose. Central tendency Variation Mode Frequency of each category Median IQR Mean SD As you read more psychology research articles, you might notice it’s unusual to see statistical variance reported. In addition, we often report the range in addition to another measure of variation. 2.5.5.3 Example: Sense of belonging Participants were also asked about their sense of belonging to the community. As you will see in the data dictionary, their answers could range from 1 = very weak, to 7 = very strong. While it is not explicitly shown, a 4 would be neutral. Thinking about scales of measurement, this is an example of an ordinal variable. Let’s look at the BELONGING variable in the dataset. Select the variable (remember you can search in the Variables tab first to find it faster) and click Setup. This time, we need to change the measurement type. JAMOVI thinks this is a nominal variable, but we know it is ordinal. Change it in the drop-down menu. You may get an error and it may not appear to work. Check whether it worked by closing the Setup panel by clicking the up arrow. You should notice that the icon next to BELONGING in the spreadsheet now corresponds to an ordinal variable, so we know we successfully set the measurement type to ordinal. Let’s look at how Nova Scotians rated their sense of belonging. As before, click Analyses, Exploration, and then Descriptives. Search for the BELONGING variable and move it into the Variable box. This time, we are going to select only the descriptive statistics that are appropriate. BELONGING is measured on an ordinal scale of measurement, so we are going to use the median as a measure of central tendency, and the IQR as a measure of variation. Your JAMOVI window will look like this: You could write a sentence to report these results like this: Participants reported a median (IQR) sense of belonging of 5 (2), corresponding to a sense of belonging between neutral and very strong. Let’s say you felt that the BELONGING variable had equal spacing between intervals, so that you could consider it a quasi-interval variable. In that case, you might wish to report the mean and standard deviation. Now, you might describe your results with a sentence such as: Participants reported a mean (SD) sense of belonging of 4.61 (1.68), corresponding to a sense of belonging between neutral and very strong. Finally, you might want to look at the data graphically. A histogram would be appropriate whether you are considering BELONGING to be ordinal or quasi-interval. 2.5.6 Boxplots Let’s look at another useful graph: the boxplot. A boxplot, or box plot, gives us a visual representation of a data set in terms of its quartiles. You might think about the data in terms of four groups, each with 25% of the total set. Inside the box are the two middle groups. The line inside the box is the median, which is the same as the second quartile (Q2). The two ends of the box mark the first (or lower) quartile (also called Q1) and the third (or upper) quartile (also called Q3). These lines marking the sides of the box might be considered as the medians of the lower half of the data set and the upper half of the data set. The difference between the first and third quartile is known as the interquartile range (IQR). In effect, IQR = Q3 – Q1. Outside the box are two whiskers. The end of the lower whisker is the minimum score (excluding any outliers - we’ll get to what those are later), and the end of the higher/upper whisker is the maximum score (again, excluding any outliers). Note that boxplots can be presented horizontally or vertically. These graphs allow us to visualize the median, quartiles, interquartile range, range, and any potential outliers. Using the SLEEP and R_SLEEP variables, let’s create boxplots. You should now feel comfortable accessing descriptive statistics and graphs in the jamovi menus (Click Analyses, Exploration, and Descriptives). Move both variables into the Variables box. Under Plots, select Box plot. In the Results panel, jamovi will produce output containing two boxplots. Just like when we looked at the histograms, the SLEEP variable isn’t very helpful to look at. The garbage data (participants reporting 8e+06 or 8 million hours of sleep per day) squishes the boxplot, making the individual features impossible to see. The boxplot for R_SLEEP is more helpful. We can clearly see the median, IQR, whiskers (min/max excluding outliers), and outliers (black dots). Remember to save your file before closing jamovi. You might save the .omv file you created as a newly named file as you began reading and following along in this section. The .omv file will have both data and the results of analyses you conducted. To save just your output, click the three lines and select Export. This will allow you to save a pdf. 2.5.7 Editing graphs It is helpful to know how to manipulate not just the superficial, cosmetic appearance of data visualizations, but also the components of graphs that communicate important information. For example, when you are trying to compare multiple graphs, it is very helpful if all of the features of the graphs, such as the axis scales and the bin widths, are the same. Unfortunately, this is not easy to accomplish in jamovi. I might suggest using Excel to quickly chart your graphs, edit them, and compare/contrast them. 2.5.8 Homework Because .omv files contain both the data and the output, we want you to save a new file before each novel analysis task. The lab demonstration would be one analysis task. The homework is another analysis task. So, before you start your homework, save a new copy of your .omv file by clicking on the three lines and selecting Save As. Give the file a new name. Then, as you generate output by following the instructions below, you can continue to save this file. Recall that to save just your output, you can click the three lines and select Export. This will allow you to save a pdf. See Moodle for the homework questions. 2.5.9 Practice Questions Were participants likely to have attended a local/municipal council meeting? How do you know? What is the most populated postal code prefix among participants? What measure of central tendency did you use to determine this, and why? Integrating skills (advanced question): Can you figure out what geographic area this corresponds to? Can you calculate mean and median postal code prefix? Why or why not? Calculate the mean, median, and mode of ETHNIC1. Which is the most useful and why? Who do Nova Scotians trust more: people in their neighbourhood, people they go to work/school with, or strangers? What measure of central tendency did you use to determine this, and why? How would you have answered homework Question #2 differently had you been asked to look at INCOME and NUMJOB? "],["lab-3-sampling-and-sampling-distributions.html", "Chapter 3 Lab 3: Sampling and Sampling Distributions 3.1 R 3.2 Excel 3.3 SPSS 3.4 JAMOVI - Week 7 - March 8 &amp; 9", " Chapter 3 Lab 3: Sampling and Sampling Distributions 3.1 R How to do it in R 3.2 Excel How to do it in Excel 3.3 SPSS How to do it in SPSS 3.4 JAMOVI - Week 7 - March 8 &amp; 9 This lab activity was developed by Erin Mazerolle and Sherry Neville-MacLean. 3.4.1 Learning Objectives Create sampling distributions from a “population” dataset. Interpret sampling distributions, especially with respect to sample size. Use the Filter function to randomly sample from a dataset. Use the Filter function to select specific cases from a dataset. 3.4.2 Pre-lab tasks In order for our computers to run a bit faster, we use a version of the EngageNS Quality of Life data that only contains four variables for this activity. It can be downloaded from Moodle. Download this file to your computer before the beginning of your lab session. Have it open in JAMOVI at the beginning of your lab session. In addition, have a new Excel spreadsheet open. You can use Excel on your computer or Office365. 3.4.3 The impact of sampling on research results When we read about research, only one set of results are presented to us - the results from the sample obtained by the researchers. However, it’s important to realize that the particular results obtained are completely dependent on the sample. This means if they repeated the exact same data collection, but the sample included different participants, the results would be different. “How different?” is an extremely important question. Through this lab activity, you will see that the answer depends quite a bit on sample size. For the purpose of this lab activity, we are going to define all the data in the EngageNS dataset as the population (i.e., all 12871 rows). We are going to randomly sample from that population, using different sample sizes. You should have four columns of data in the “Simplified_CIW-NovaScotiaQualityofLife-SHAREDSurveyData-May2020_cleaned_2022-02-28_SamplingLabActivity.omv” dataset: PC1, REGION, VOLUNTEER, and R_FRIENDS. First, we need to set up our analysis. As we have done in previous labs, click on Analyses, Exploration, and Descriptives. Move the R_FRIENDS variable into the “Variables” box or window. Remember, you can use the data dictionary to learn what the variables are. R_FRIENDS is the revised (cleaned) FRIENDS variable. FRIENDS is described in the data dictionary as: Ask yourself, what is the scale of measurement of R_FRIENDS? Is it recorded correctly in JAMOVI? Back to the JAMOVI program, expand the “Statistics” section. For this activity, we are going to focus on the mean and the sample size, so deselect everything else. Your JAMOVI window should look something like this: While the file has 12871 rows, your table will display an N of 12710. This is because there is no data in this column for some participants. We are going to repeatedly randomly sample using different sample sizes and record the mean each time. Click the Data tab, and then click Filters: The following Row Filters panel will be displayed: Filters allow us to select a subset (or sample) of the data. In this case, we are going to randomly select samples of different sizes. You can see that all the rows are selected by looking at the “Filter 1” column that has appeared as the leftmost column. The green checks indicate that those rows are included. We will start with a sample size of 5 (N = 5). To create a sample from our population of 12871, we are going to use the SAMPLE function. This will tell JAMOVI to select 5 rows at random. Type SAMPLE(REGION,5) after the equals sign, as follows: We use REGION in this filter as a placeholder. The filter also works if you use VOLUNTEER. Now, most of the data are excluded, as indicated by the red Xs. If you scroll around, you should be able to find five rows with a green check. Your rows might look something like this: You will also have a new Results table. Yours might have different numbers, but mine looks like this: Not only might the value of the mean you see be different from the result above, but also the value of N recorded in your Descriptives table might not be exactly 5. This difference in N would be the result of your random sample including rows with missing data. In your Excel spreadsheet, name a column “Means for N = 5” and input your mean into the next row: You can sample a new set of 5 rows by turning the filter on and off. Move the slider to change the filter from active: to inactive: When you move the slider back to “active,” you should have a different sample in your results table. It will probably have a different mean from your previous sample. Repeat this process 19 more times, to record the mean from 20 random samples. Once you have 20 samples, input your means into the class spreadsheet. Then, create a new column in your Excel spreadsheet, “Means for N = 500” and repeat the process, but this time select random samples of 500. This means you need to adjust your filter so that it reads SAMPLE(REGION,500), and you have to continue to inactivate and activate the filter until you have 20 means with N = 500. Once you have 20 samples with N = 500, input those into the class spreadsheet. Once everyone has completed these tasks, we will make histograms of the means for both sample sizes as a group. While you are waiting, complete the lab activities described in the next sections. 3.4.4 Other types of filters Perhaps you are interested in the number of friends reported by those who volunteer versus those who don’t volunteer. You can use a filter in JAMOVI to get the mean number of friends for each group. To find out the number of friends reported by those who volunteer, type VOLUNTEER==1 into the filter function: The double equals sign (==) checks for equivalence. This is commonly used in programming language because a single equals sign (=) is used to assign or set a value to a given variable. We see that the mean number of friends reported by participants who volunteer is 5.71: 3.4.5 Homework Problems See Moodle. "],["lab-4-t-test-one-sample-paired-sample.html", "Chapter 4 Lab 4: t-Test (one-sample, paired sample) 4.1 Intro material for R and SPSS activities 4.2 R 4.3 Excel 4.4 SPSS 4.5 JAMOVI - Week 8 - March 15 &amp; 16", " Chapter 4 Lab 4: t-Test (one-sample, paired sample) Any experiment may be regarded as forming an individual of a ‘population’ of experiments which might be performed under the same conditions. A series of experiments is a sample drawn from this population. —William Sealy Gossett This lab is modified and extended from Open Stats Labs. Thanks to Open Stats Labs (Dr. Kevin P. McIntyre) for their fantastic work. 4.1 Intro material for R and SPSS activities 4.1.1 Does Music Convey Social Information to Infants? This lab activity uses the open data from Experiment 1 of Mehr, Song, and Spelke (2016) to teach one-sample and paired samples t-tests. Results of the activity provided below should exactly reproduce the results described in the paper. 4.1.1.1 Study description Parents often sing to their children and, even as infants, children listen to and look at their parents while they are singing. Research by Mehr, Song, and Spelke (2016) sought to explore the psychological function that music has for parents and infants, by examining the hypothesis that particular melodies convey important social information to infants. Specifically, melodies convey information about social affiliation. The authors argue that melodies are shared within social groups. Whereas children growing up in one culture may be exposed to certain songs as infants (e.g., “Rock-a-bye Baby”), children growing up in other cultures (or even other groups within a culture) may be exposed to different songs. Thus, when a novel person (someone who the infant has never seen before) sings a familiar song, it may signal to the infant that this new person is a member of their social group. To test this hypothesis, the researchers recruited 32 infants and their parents to complete an experiment. During their first visit to the lab, the parents were taught a new lullaby (one that neither they nor their infants had heard before). The experimenters asked the parents to sing the new lullaby to their child every day for the next 1-2 weeks. Following this 1-2 week exposure period, the parents and their infant returned to the lab to complete the experimental portion of the study. Infants were first shown a screen with side-by-side videos of two unfamiliar people, each of whom were silently smiling and looking at the infant. The researchers recorded the looking behavior (or gaze) of the infants during this ‘baseline’ phase. Next, one by one, the two unfamiliar people on the screen sang either the lullaby that the parents learned or a different lullaby (that had the same lyrics and rhythm, but a different melody). Finally, the infants saw the same silent video used at baseline, and the researchers again recorded the looking behavior of the infants during this ‘test’ phase.For more details on the experiment’s methods, please refer to Mehr et al. (2016) Experiment 1. 4.1.2 Lab skills learned Conducting a one-sample t-test Conducting a paired samples t-test Plotting the data Discussing inferences and limitations 4.1.3 Important Stuff citation: Mehr, S. A., Song. L. A., &amp; Spelke, E. S. (2016). For 5-month-old infants, melodies are social. Psychological Science, 27, 486-501. Link to .pdf of article Data in .csv format Data in SPSS format 4.2 R 4.2.1 Loading the data The first thing to do is download the .csv formatted data file, using the link above, or just click here. It turns out there are lots of ways to load .csv files into R. Load the data.table library. Then use the fread function and supply the web address to the file. Just like this. No downloading required. library(data.table) all_data &lt;- fread(&quot;https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/MehrSongSpelke2016.csv&quot;) Or, if you downloaded the .csv file. Then you can use fread, but you need to point it to the correct file location. The file location in this next example will not work for you, because the file is on my computer. library(data.table) all_data &lt;- fread(&quot;data/MehrSongSpelke2016.csv&quot;) 4.2.2 Inspect the data frame When you have loaded data it’s always a good idea to check out what it looks like. You can look at all of the data in the environment tab on the top right hand corner. The data should be in a variable called all_data. Clicking on all_data will load it into a viewer, and you can scroll around. This can be helpful to see things. But, there is so much data, can be hard to know what you are looking for. 4.2.2.1 summarytools The summarytools packages give a quick way to summarize all of the data in a data frame. Here’s how. When you run this code you will see the summary in the viewer on the bottom right hand side. There’s a little browser button (arrow on top of little window) that you can click to expand and see the whole thing in a browser. library(summarytools) view(dfSummary(all_data)) 4.2.3 Get the data for Experiment one The data contains all of the measurements from all five experiments in the paper. By searching through the all_data data frame, you should look for the variables that code for each experiment. For example, the third column is called exp1, which stands for experiment 1. Notice that it contains a series of 1s. If you keep scrolling down, the 1s stop. These 1s identify the rows associated with the data for Experiment 1. We only want to analyse that data. So, we need to filter our data, and put only those rows into a new variable. We do this with the dplyr library, using the filter function. library(dplyr) experiment_one &lt;- all_data %&gt;% filter(exp1==1) Now if you look at the new variable experiment_one, there are only 32 rows of data. Much less than before. Now we have the data from experiment 1. 4.2.4 Baseline phase: Conduct a one sample t-test You first want to show that infants’ looking behavior did not differ from chance during the baseline trial. The baseline trial was 16 seconds long. During the baseline, infants watched a video of two unfamiliar people, one of the left and one on the right. There was no sound during the baseline. Both of the actors in the video smiled directly at the infant. The important question was to determine whether the infant looked more or less to either person. If they showed no preference, the infant should look at both people about 50% of the time. How could we determine whether the infant looked at both people about 50% of the time? The experiment_one data frame has a column called Baseline_Proportion_Gaze_to_Singer. All of these values show how the proportion of time that the infant looked to the person who would later sing the familiar song to them. If the average of these proportion is .5 across the infants, then we would have some evidence that the infants were not biased at the beginning of the experiment. However, if the infants on average had a bias toward the singer, then the average proportion of the looking time should be different than .5. Using a one-sample t-test, we can test the hypothesis that our sample mean for the Baseline_Proportion_Gaze_to_Singer was not different from .5. To do this in R, we just need to isolate the column of data called Baseline_Proportion_Gaze_to_Singer. We will do this using the $ operator. The $ operator is placed after any data frame variable, and allows you to select a column of the data. The next bit of code will select the column of data we want, and put it into a new variable called Baseline. Note, if you type exp1$ then R-Studio should automatically bring up all the columns you can choose from. baseline &lt;- experiment_one$Baseline_Proportion_Gaze_to_Singer 4.2.4.1 Look at the numbers Question: Why is it important to look at your numbers? What could happen if you didn’t? OK, we could just do the t-test right away, it’s really easy, only one line of code. But, we haven’t even looked at the numbers yet. Let’s at least do that. First, we’ll just use plot. It will show every data point for each infant as a dot. plot(baseline) That’s helpful, we see that the dots are all over the place. Let’s do a histogram, so we can get a better sense of the frequency of different proportions. hist(baseline) 4.2.4.2 Look at the descriptives Let’s get the mean and standard deviation of the sample mean(baseline) ## [1] 0.5210967 sd(baseline) ## [1] 0.1769651 OK, so just looking at the mean, we see the proportion is close to .5 (it’s .521). And, we see there is a healthy amount of variance (the dots were all over the place), as the standard deviation was about .176. Question: Based on the means and standard deviations can you make an educated guess about what the t and p values might be? Learn how to do this and you will be improving your data-sense. Now, before we run the t-test, what do you think is going to happen? We are going to get a t-value, and an associated p-value. If you can make a guess at what those numbers would be right now in your head, and those end up being pretty close to the ones we will see in a moment, then you should pat yourself on the back. You have learned how to have intuitions about the data. As I am writing this I will tell you that 1) I can’t remember what the t and p was from the paper, and I haven’t done the test yet, so I don’t know the answer. So, I am allowed to guess what the answer will be. Here are my guesses t(31) = 0.2, p = .95. The numbers in the brackets are degrees of freedom, which we know are 31 (df= n - 1 = 32 - 1 = 31). More important than the specific numbers I am guessing (which will probably be wrong), I am guessing that the p-value will be pretty large, it will not be less than .05, which the author’s set as their alpha rate. So, I am guessing we will not reject the hypothesis that .52 is different from .5. Let’s do the t-test and see what happens. 4.2.4.3 Conduct t.test t.test(baseline, mu=.5) ## ## One Sample t-test ## ## data: baseline ## t = 0.67438, df = 31, p-value = 0.5051 ## alternative hypothesis: true mean is not equal to 0.5 ## 95 percent confidence interval: ## 0.4572940 0.5848994 ## sample estimates: ## mean of x ## 0.5210967 Question: Why was the baseline condition important for the experiment? What does performance in this condition tell us? So, there we have it. We did a one-sample t-test. Here’s how you would report it, t(31) = .67, p = .505. Or, we might say something like: During the baseline condition, the mean proportion looking time toward the singer was .52, and was not significantly different from .5, according to a one-sample test, t(31) = .67, p = .505. You should take the time to check this result, and see if it is the same one that was reported in the paper. 4.2.5 Test phase Remember how the experiment went. Infants watched silent video recordings of two women (Baseline). Then each person sung a song, one was familiar to the infant (their parents sung the song to them many times), and one was unfamiliar (singing phase). After the singing phase, the infants watched the silent video of the two singers again (test phase). The critical question was whether the infants would look more to the person who sung the familiar song compared to the person who sun the unfamiliar song. If the infants did this, they should look more than 50% of the time to the singer who sang the familiar song. We have the data, we can do another one sample t-test to find out. We can re-use all the code we already wrote to do this. I’ll put it all in one place. If we run all of this code, we will see all of the things we want to see. We only need to make two changes. We will change experiment_one$Baseline_Proportion_Gaze_to_Singer to experiment_one$Test_Proportion_Gaze_to_Singer, because that column has the test phase data. And, instead of putting the data into the variable baseline. We will make a new variable called test_phase to store the data. test_phase &lt;- experiment_one$Test_Proportion_Gaze_to_Singer plot(test_phase) hist(test_phase) mean(test_phase) ## [1] 0.5934913 sd(test_phase) ## [1] 0.1786884 t.test(test_phase, mu = .5) ## ## One Sample t-test ## ## data: test_phase ## t = 2.9597, df = 31, p-value = 0.005856 ## alternative hypothesis: true mean is not equal to 0.5 ## 95 percent confidence interval: ## 0.5290672 0.6579153 ## sample estimates: ## mean of x ## 0.5934913 Question: Why was the test condition important for the experiment? What does performance in this condition tell us? Alright. What did we find? You should take a stab at writing down what we found. You can use the same kind of language that I used from the first one sample-test. You should state the mean proportion, the t-value, the dfs, and the p-value. You should be able to answer the question, did the infants look longer at the singer who sang the familiar song? And, did they look longer than would be consist with chance at 50%. 4.2.6 Paired-samples t-test The paired samples t-test is easy to do. We’ve already made two variables called baseline, and test_phase. These contain each of the infants looking time proportions to the singer for both parts of the experiment. We can see if the difference between them was likely or unlikely due to chance by running a paired samples t-test. We do it like this in one line: t.test(test_phase, baseline, paired=TRUE, var.equal=TRUE) ## ## Paired t-test ## ## data: test_phase and baseline ## t = 2.4164, df = 31, p-value = 0.02175 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.01129217 0.13349698 ## sample estimates: ## mean of the differences ## 0.07239458 Question: Why was the paired samples t-test necessary if we already did two one sample t-test? What new question is the paired samples t-test asking? I’ll leave it to you to interpret these values, and to see if they are the same as the ones in the paper. Based on these values what do you conclude? Is there a difference between the mean proportion looking times for the baseline and testing phase? 4.2.6.1 Relationship between one-sample and paired sample t-test Question: Why is it that a paired samples t-test can be the same as the one sample t-test? What do you have to do the data in the paired samples t-test in order to conduct a one-sample t-test that would give you the same result? We’ve discussed in the textbook that the one-sample and paired sample t-tests are related, they can be the same test. The one-sample test is to determine whether a sample mean is different from some particular mean. The paired sample t-test is to determine whether one sample mean is different from another sample mean. If you take the scores for each variable in a paired samples t-test, and subtract them from one another, then you have one list of difference scores. Then, you could use a one sample t-test to test whether these difference scores are different from 0. It turns out you get the same answer from a paired sample t-test testing the difference between two sample means, and the one sample t-test testing whether the mean difference of the difference scores between the samples are different from 0. We can show this in r easily like this: t.test(test_phase, baseline, paired=TRUE, var.equal=TRUE) ## ## Paired t-test ## ## data: test_phase and baseline ## t = 2.4164, df = 31, p-value = 0.02175 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.01129217 0.13349698 ## sample estimates: ## mean of the differences ## 0.07239458 difference_scores&lt;-test_phase-baseline t.test(difference_scores, mu=0) ## ## One Sample t-test ## ## data: difference_scores ## t = 2.4164, df = 31, p-value = 0.02175 ## alternative hypothesis: true mean is not equal to 0 ## 95 percent confidence interval: ## 0.01129217 0.13349698 ## sample estimates: ## mean of x ## 0.07239458 4.2.6.2 Usefulness of difference scores OK fine, the paired samples t-test can be a one sample t-test if you use the difference scores. This might just seem like a mildly useful factoid you can use for stats trivia games (which no one plays). The point of drawing your attention to the relationship, is to get you to focus on the difference scores. These are what we are actually interested in. Let’s use the difference scores to one more useful thing. Sometime the results of a t-test aren’t intuitively obvious. By the t-test we found out that a small difference between the test phase and baseline was not likely produced by chance. How does this relate to the research question about infants using familiar songs as cues for being social? Let’s ask a very simple question. How many infants actually showed the bias? How many infants out of 32 looked longer at the singer who sang the familiar song during test, compared to during baseline. We can determine this by calculating the difference scores. Then, asking how many of them were greater than zero: difference_scores &lt;- test_phase-baseline length(difference_scores[difference_scores&gt;0]) ## [1] 22 So, 22 out of 32 infants showed the effect. To put that in terms of probability, 68.75% of infants showed the effect. These odds and percentages give us another way to appreciate how strong the effect is. It wasn’t strong enough for all infants to show it. 4.2.7 Graphing the findings It is often useful to graph the results of our analysis. We have already looked at dot plots and histograms of the individual samples. But, we also conducted some t-tests on the means of the baseline and test_phase samples. One of the major questions was whether these means are different. Now, we will make a graph that shows the means for each condition. Actually, we will make a few different graphs, so that you can think about what kinds of graphs are most helpful. There are two major important things to show: 1) the sample means, and 2) a visual aid for statistical inference showing whether the results were likely due to chance. We will use the ggplot2 package to make our graphs. Remember, there are two steps to take when using ggplot2. 1) put your data in a long form data frame, where each measure has one row, and 2) define the layers of the ggplot. 4.2.7.1 Make the dataframe for plotting To start we will need 2 columns. One column will code the experimental phase, Baseline or Test. There are 32 observations in each phase, so we want the word Baseline to appear 32 times, followed by the word Test 32 times. Then we want a single column with each of the proportions for each infant. Phase &lt;- rep(c(&quot;Baseline&quot;,&quot;Test&quot;), each = 32) Proportions &lt;- c(baseline,test_phase) plot_df &lt;- data.frame(Phase,Proportions) 4.2.7.2 Dot plot of raw scores This shows every scores value on the y-axis, split by the baseline and test groups. If you just looked at this, you might not think the test phase was different from the baseline phase. Still very useful to see the spread of individual scores. Supports the intuition that the scores are still kind of in a similar ballpark. library(ggplot2) ggplot(plot_df, aes(x=Phase, y=Proportions))+ geom_point() 4.2.7.3 Dot plot with means and raw scores Question: What kinds of inferences about the role of chance in producing the difference between the means can we make from this graph? What is missing? ggplot2 is great because it let’s us add different layers on top of an existing plot. It would be good to see where the mean values for each sample lie on top of the sample scores. We can do this. But, to do it, we need to supply ggplot with another data frame, one that contains the means for each phase in long form. There are are only two phases, and two means, so we will make a rather small data.frame. It will have two columns, a Phase column, and Mean_value column. There will only be two rows in the data frame, one for the mean for each phase. To make the smaller data frame for the means we will use the aggregate function. This allows us to find the means for each phase from the plot_df data frame. It also automatically returns the data frame we are looking for. mean_df &lt;- aggregate(Proportions ~ Phase, plot_df, mean) ggplot(plot_df, aes(x=Phase, y=Proportions))+ geom_point()+ geom_point(data=mean_df, color=&quot;Red&quot;, size=2) 4.2.7.4 Bar plot It’s very common to use bars in graphs. We can easily do this by using geom_bar, rather than geom_point. Also, we can plot bars for the means, and keep showing the dots like this…(note this will be messed up, but I want to show you why). Also look for these changes. added stat=\"identity\" Necessary for bar plot to show specific numbers added aes(fill=Phase) Makes each bar a different color, depending on which phase it comes from ggplot(plot_df, aes(x=Phase, y=Proportions))+ geom_point()+ geom_bar(data=mean_df, stat=&quot;identity&quot;,aes(fill=Phase)) OK, we see the bars and some of the dots, but not all of them. What is going on? Remember, ggplot2 works in layers. Whatever layer you add first will be printed first in the graph, whatever layer you add second will be printed on top of the first. We put the bars on top of the dots. Let’s change the order of the layers so the dot’s go on top of the bars. ggplot(plot_df, aes(x=Phase, y=Proportions))+ geom_bar(data=mean_df, stat=&quot;identity&quot;,aes(fill=Phase))+ geom_point() 4.2.7.5 Bar plot with error bars So far we have only plotted the means and individual sample scores. These are useful, but neither of them give us clear visual information about our statistical test. Our paired sample t-test suggested that the mean difference between Baseline and Test was not very likely by chance. It could have happened, but wouldn’t happen very often. Question: Why would the standard deviation of each mean, or the standard error of each mean be inappropriate to use in this case? Question: How would error bars based on the standard error of the mean differences aid in visual inference about the role of chance in producing the difference? Error bars are commonly used as an aid for visual inference. The use of error bars can be a subtle nuanced issue. This is because there a different kinds of error bars that can be plotted, and each one supports different kinds of inference. In general, the error bar is supposed to represent some aspect of the variability associated with each mean. We could plot little bars that are +1 or -1 standard deviations of each mean, or we would do +1 or -1 standard errors of each mean. In the case of paired samples, neither or these error bars would be appropriate, they wouldn’t reflect the variability associated with mean we are interested in. In a paired samples t-test, we are interested in the variability of the mean of the difference scores. Let’s calculate the standard error of the mean (SEM) for the difference scores between Baseline and Test, and then add error bars to the plot. difference_scores &lt;- baseline-test_phase #calculate difference scores standard_error &lt;- sd(difference_scores)/sqrt(length(difference_scores)) #calculate SEM ggplot(plot_df, aes(x=Phase, y=Proportions))+ geom_bar(data=mean_df, stat=&quot;identity&quot;,aes(fill=Phase))+ geom_errorbar(data=mean_df, aes(ymin=Proportions-standard_error, ymax=Proportions+standard_error), width=.1) + geom_point(alpha=.25) Question: What is one reason why these error bars (standard error of the mean difference between Baseline and Test) are appropriate to use. What is one reason they are not appropriate to use? We have done something that is useful for visual inference. From the textbook, we learned that differences of about 2 standard errors of the mean are near the point where we would claim that chance is unlikely to have produced the difference. This is a rough estimate. But, we can see that the top of the error bar for Baseline is lower than the bottom of the error bar for Test, resulting in a difference greater than 2 standard error bars. So, based on this graph, we might expect the difference between conditions to be significant. We can also complain about what we have done here, we are placing the same error bars from the mean difference scores onto the means for each condition. In some sense this is misleading. The error bars are not for the depicted sample means, they are for the hidden single set of difference scores. To make this more clear, we will make a bar plot with a single bar only for the differences scores. difference_scores &lt;- test_phase-baseline #calculate difference scores standard_error &lt;- sd(difference_scores)/sqrt(length(difference_scores)) #calculate SEM mean_difference &lt;- mean(difference_scores) qplot(x=&quot;MeanDifference&quot;, y=mean_difference)+ geom_bar(stat=&quot;identity&quot;, width=.5, alpha=.5)+ geom_hline(yintercept=0)+ geom_point(aes(y=difference_scores), alpha=.25)+ geom_errorbar(aes(ymin=mean_difference-standard_error, ymax=mean_difference+standard_error), width=.1) Question: Why is is it more appropriate to put the standard error of the difference on this bar graph? What important aspects of the original results shown in the previous graph are missing from this graph? This plot is very useful, too; it gives us some new information. We can see that the mean difference (test - baseline) was greater than 0. And, we are plotting the standard error of the mean differences, which are the error bars that more formally belong to this graph. Still, we are in a position to make some guesses for visual inference. The lower error bar represents only 1 SEM. It does not cross 0, but the fact that 1 SEM does not cross zero isn’t important. For SEMs it’s usually closer to 2. We can sort of visually guesstimate that that 2 SEMs would not cross zero, which would suggest we would obtain a small p-value. We also see each of the mean difference scores. It’s very clear that they are all over the place. This means that not every infant showed a looking time preference toward the singer of the familiar song. Finally, this single bar plot misses something. It doesn’t tell us what the values of the original means were. 4.2.7.6 Bar plot with confidence intervals Confidence intervals are also often used for error bars, rather than the standard error (or other measure of variance). If we use 95% confidence intervals, then our error bars can be even more helpful for visual inference. Running the t.test function produces confidence interval estimates, and we can pull them out and use them for error bars. t_test_results &lt;- t.test(difference_scores) lower_interval&lt;- t_test_results$conf.int[1] upper_interval&lt;- t_test_results$conf.int[2] qplot(x=&quot;MeanDifference&quot;, y=mean_difference)+ geom_bar(stat=&quot;identity&quot;, width=.5, alpha=.5)+ geom_hline(yintercept=0)+ geom_point(aes(y=difference_scores), alpha=.25)+ geom_errorbar(aes(ymin=lower_interval, ymax=upper_interval), width=.1) Notice that the 95% confidence intervals around the mean are wider than the SEM error bars from the previous graph. These new confidence intervals tell us that 95% of the time our sample mean will fall between the two lines. The bottom line is slightly above 0, so we can now visually see support for our statistical inference that chance was unlikely to produce the result. If chance was likely to produce the result, the horizontal line indicating 0, would be well inside the confidence interval. We can also notice that the mean difference was just barely different from chance, that lower bar is almost touching 0. 4.2.8 Data-simulation We can do a little bit of data simulation to get a better feel for this kind of data. For example, we saw that the dots in our plots were quite variable. We might wonder about what chance can do in the current experiment. One way to do this is to estimate the standard deviation of the looking time proportions. Perhaps the best way to do that would be to an average of the standard deviation in the baseline and test_phase conditions. Then, we could simulate 32 scores from a normal distribution with mean = .5, and standard deviation equaling our mean standard deviation. We could calculate the mean of our simulated sample. And, we could do this many times, say 1000 times. Then, we could look at a histogram of our means. This will show the range of sample means we would expect just by chance. This is another way to tell whether the observed difference in this experiment in the testing phase was close or not close from being produced by chance. Take a look at the histogram. What do you think? sample_sd &lt;- (sd(baseline)+sd(test_phase))/2 simulated_means &lt;- length(1000) for(i in 1:1000){ simulated_means[i] &lt;- mean(rnorm(32,.5, sample_sd)) } hist(simulated_means) #### Simulating the mean differences We can do the simulation slightly differently to give us a different look at chance. Above we simulated the sample means from a normal distribution centered on .5. The experimental question of interest was whether the mean difference between the baseline and test_phase condition was different. So, we should do a simulation of the difference scores. First, we estimate the standard deviation of the difference scores, and then run the simulation with a normal distribution centered on 0 (an expected mean difference of 0). This shows roughly how often we might expect mean differences of various sizes to occur. One major limitation is that we likely had only a rough estimate of the true standard deviation of these mean differences, after all there were only 32 of them, so we should take this with a grain of salt. Nevertheless, the pattern in the simulation fits well with the observations in that we already made from the data. sample_sd &lt;- sd(baseline-test_phase) simulated_mean_difference &lt;- length(1000) for(i in 1:1000){ simulated_mean_difference[i] &lt;- mean(rnorm(32,0, sample_sd)) } hist(simulated_mean_difference) 4.2.9 Generalization Exercise ( 1 point - Pass/Fail ) The following code creates two variables with simulated means for each of 20 subjects in two conditions (A and B). Each sample comes from a normal distribution with mean = 100, and standard deviation = 25. Condition_A &lt;- rnorm(20,100,25) Condition_B &lt;- rnorm(20,100,25) Conduct a paired samples t-test on sample data stored in the variables Condition_A, and Condition_B. Report the results of the t-test, and the mean difference between conditions The above code assumes no difference in the means between Condition A and Condition B. Both samples come from the same normal distribution. Change the mean for one of the distributions. Make the change large enough so that you find a significant p-value (p &lt; 0.05) when you conduct the t-test on the new simulated data. Report the t-test and the means for each condition 4.2.10 Writing assignment (2 points - Graded) Complete the writing assignment described in your R Markdown document for this lab. When you have finished everything. Knit the document and hand in your stuff (you can submit your .RMD file to blackboard if it does not knit.) Answer the following questions Explain the general concept of a t-value, and how it is different from a mean and the standard error. (.33 points) Imagine you obtained a t-value with an associated p-value of .25. Explain what this means. (.33 points) Imagine the critical t-value for a particular test was 2.6. What does the critical t-value mean (assuming alpha = 0.05 and the test is two-tailed). (.33 points) Explain the differences between a one-sample and paired-sample t-test. ( 1 point ) General grading. You will receive 0 points for missing answers You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 4.3 Excel How to do it in Excel 4.4 SPSS In this lab, we will use SPSS to: Perform a one sample t-test Perform a paired samples t-test Graph the data Assess the relationship between a one-sample and a paired-samples t-test Practice using descriptive statistics to give context to inferential statistics 4.4.1 Experiment Background For this lab, we will be using the data from Mehr, Song, and Spelke’s (2016) study of how music may convey important social information to infants. To test their hypothesis, the researchers recruited 32 infants and their parents to complete an experiment. During their first visit to the lab, the parents were taught a new lullaby (one that neither they nor their infants had heard before). The experimenters asked the parents to sing the new lullaby to their child every day for the next 1-2 weeks. Following this exposure period, the parents and their infants returned to the lab to complete the experimental portion of the study. Infants were first shown a screen with side-by-side videos of two unfamiliar people, each of whom were silently smiling and looking at the infant. The researchers recorded the looking behavior (or gaze) of the infants during this ‘baseline’ phase. Next, one by one, the two unfamiliar people on the screen sang either the lullaby that the parents learned or a different lullaby (that had the same lyrics and rhythm, but a different melody). Finally, the infants saw the same silent video used at baseline, and the researchers again recorded the looking behavior of the infants during this ‘test’ phase. 4.4.2 OPTIONAL: Performing a one sample t-test First, let’s open the relevant data file. The data file has been simplified and is available on the lab Moodle page under “T-Tests.” Click on “Mehr et al. Simplified Data File” to download it, note the filename and where you’ve downloaded it to, and then open it in SPSS. Your data should look like this: We will use SPSS to determine whether the infants looked equally at each of the people in the side-by-side videos at baseline. Let’s think about why this is important. The infants in this experiment watched silent video recordings of two women (Baseline). Later, each person in the videos sang a song, one familiar (their parents had sang the song to them many times), and one unfamiliar. Afterwards, the infants watched the silent video of the two singers again (test phase). The critical question was whether the infants would look more to the person who sang the familiar song compared to the person who sang the unfamiliar song. If the measure of what infants “like” or “prefer” is based on how long they look at a stimulus (in this case, a person in a video), we need to know that at baseline (before either of the people were associated with a song), infants looked equally at each person. If one of the people in the video was more memorable or attractive to the infants, then they would have a preferential bias towards looking at one person over the other. This could mean that the results of the study may have nothing to do with the songs, but rather an inherent bias towards the appearance of one of the people. This is why it is important to ensure that the infants looked at the people equally to start with (at baseline). In our data file, the variable we will use is called “Baseline_Proportion_Gaze_to_Singer”; this variable represents the proportion of time (out of 100%) that the infant spent looking at the person who would later be the singer of the familiar song. If the infant looks equally at each person, then the proportion of time spent looking at one out of the two people should be .5, or half of the time. Thus, we want to test whether the proportions measured are different from .5. Whenever we want to compare a sample data set (the proportions measured for all 32 infants) to a known mean (.5, or the proportion we expect if infants looked equally at both people), we use a one sample t-test. In order to run the t-test, go to the Analyze menu, then choose Compare Means and then One-Sample T-test: This will open up a window in which you will specify which variable contains the relevant sample data. Remember, we are interested in the variable labeled Baseline_Proportion_Gaze_to_Singer, so let’s choose this variable from the list on the left and move it to the right-hand field using the arrow. Next, make sure to change the value in the field labeled “Test Value” to the mean to which you are comparing the sample. Since we are comparing our sample’s proportions to the proportion that represents equal time spent looking at both people in the video, we are going to use .5 as our test value. Enter this number in the appropriate field. Your window should look like this: Now, click OK. SPSS will produce several output tables. The first table contains descriptive statistics related to the sample. We can see from this table that the average proportion of time spent looking at the person who would later be the familiar song singer is .52. This is very close to .50. The second table contains the information resulting from our t-test: The t-statistic calculated is .67, with 31 (N-1) degrees of freedom. The p-value is listed under “Sig. (2-tailed).” The fact that this value is not less than our alpha level (set at .05) means we fail to reject the null hypothesis. In other words, the proportion of time infants spent looking at the singer was not different from .50. We might formally words this as follows: During the baseline condition, the mean proportion looking time toward the singer was .52, and was not significantly different from .50, according to a one-sample test, t(31) = 0.67, p = .51. Alternatively, you could also write: During the baseline condition, the mean proportion looking time toward the singer was .52, and was not significantly different from .50, according to a one-sample test, t(31) = 0.67, p &gt; .05. 4.4.3 Performing a paired-samples t-test In this example, we will be comparing data from two measurements taken from the same individuals. In the same data file as above, we have two variables named Baseline_Proportion_Gaze_to_Singer and Test_Proportion_Gaze_to_Singer. These variables represent the proportion of time spent looking at the familiar song singer at baseline, and then again in the test phase (after the 1-2 week period in which infants have been familiarized with the song). Because each infant was measured once (baseline), and then re-measured again (test), we will use a paired samples t-test. Important terminology note: Baseline_Proportion_Gaze_to_Singer and Test_Proportion_Gaze_to_Singer are represented as two variables in SPSS, but they refer to two levels of a single independent variable. You can think of the independent variable as timepoint with two levels: baseline and test. In order to run the paired-samples t-test, go to Analyze, then Compare Means, then Paired-Samples T-test... A window will appear with a list of all variables in a field on the left. We must choose the two variables that contain our data: Baseline_Proportion_Gaze_to_Singer and Test_Proportion_Gaze_to_Singer. Move these into the right-hand field individually using the arrow. Make sure that they appear next to each other in the right-hand field, as follows: Click OK, and SPSS will produce several output tables. The tables are as follows: The paired samples t-test produces a t-value (i.e., our observed t), degrees of freedom (N-1), and a p-value. You can interpret these values the same way as in the previous example. During the baseline condition, the difference between infants’ mean proportion looking time toward the singer at baseline and the test phase was -0.07, and this difference was significant according to a paired samples t-test, t(31) = -2.42, p &lt; .05. 4.4.4 Graphing your results In order to visualize the difference between means (for a paired-samples t-test, in this case), it is most appropriate to create a bar chart, or bar plot. Because our two conditions (baseline and test) make up a discrete (and not continuous) categorical variable (also called a nominal variable), a bar chart is most appropriate. Let’s begin by going to Graphs, then Chart Builder… The Chart Builder window will open and look like this: We are going to choose a simple bar chart, which is represented by the bar icon at the top left of the set of chart options. Click on this icon and drag it into the chart window as follows: Once you do this, your window should look like this: From here, you must indicate which variables should be included in the chart on the y-axis. We will first take the Baseline_Proportion_Gaze_to_Singer variable, found in the list on the left of the window, and drag it to the y-axis in the chart window. You will see that the y-axis area will highlight with a red border when you do this. Now, take the next variable, Test_Proportion_Gaze_to_Singer, and drag it over the same y-axis title, but this time aim for the very top of the variable field. You will know you’re doing it right when a red plus sign appears in this area as you hover: Drop this variable into this field once you see the plus sign. A window will pop us asking if you want both variables on this axis. Click OK. The result will look like this (both variables’ means, baseline and test, appear in the chart). From here, you can customize the appearance of the graph. One thing we will do is add Error Bars. Find the window to the right of the main chart builder window, and select Error Bars. You will have the option to select Confidence Intervals, Standard Error, etc. Choose Standard Error and set the Multiplier to 2. Click Apply. Now, you should be able to see the bars in the chart builder window. If you are satisfied with the chart, click OK and it will appear in an SPSS output window: 4.4.5 OPTIONAL: The relationship between the one-sample and the paired-samples t-test This section is dedicated to demonstrating that the one-sample and paired-samples t-tests are almost the very same thing. In order to understand this, we must reframe how we think about the paired-samples t-test. We typically consider it a comparison between two samples in which observations have been repeated (like in a before-after scenario, for example). We can also think of the paired samples t-test as testing the difference scores between two conditions. If the difference between two conditions is 0, then there is no difference, or there is no effect of the independent variable. If the difference is non-zero, then we can say there is a difference. Thus, the paired-samples t-test is exactly the same as the one-sample t-test if we consider it as a comparison of the mean difference score to 0. Let’s demonstrate this using SPSS. We’ll continue using the same data as above. Specifically, locate the variable named Difference_in_Proportion_Looking. This variable contains the difference score between the baseline and test conditions for each infant. We’re going to treat this as our one sample (as in the one-sample t-test), and we’ll be comparing it to a mean of 0. Let’s begin. Go to Analyze, then Compare Means, then One-Sample t-test… A window will appear. Move the variable of interest, Difference_in_Proportion_Looking, into the “Test Variable(s)” field. Below that, make sure to enter 0 in the “Test Value” field. Then click OK. SPSS will generate several tables in the output window. They should look like this: You will see that the t-statistic and p-value are identical to the ones obtained when we conducted a paired-samples t-test. Therefore, a paired-samples t-test conducted on two samples is equivalent to a one-sample t-test conducted on the difference scores (calculated on the two samples) compared against 0. Nota Bene: You will see that in the previous paired-samples t-test we obtained a t-statistic of -2.42, but here the t-statistic is positive. This difference comes from the fact that SPSS automatically subtracts the later-occurring variable in your spreadsheet from the earlier-occurring one. If your variables were ordered differently, you would obtain a positive t-statistic as well. In other words, the sign does not matter; it results from the order of the variables. 4.4.6 Using descriptive statistics to give context to inferential statistics In Section 2.4.1 of the lab manual, you learned how to request descriptive statistics. If you return to the output generated by SPSS when we ran the paired-samples t-test, you should notice that the first table depicted in the output provides the mean, the sample size, the standard deviation, and the standard error of the mean for each measurement - Baseline_Proportion_Gaze_to_Singer and Test_Proportion_Gaze_to_Singer. These descriptive statistics are useful for contextualizing the inferential statistics. In this case, we see that, for Baseline_Proportion_Gaze_to_Singer, the mean is 0.52 while for Test_Proportion_Gaze_to_Singer, the mean for 0.59. The standard deviation for both rounds to 0.18. In Section 6.6.3, we reported the mean difference of -0.07 was significant according to the paired-samples t-test. Now, we might add another sentence to explain the difference. Using the means and the standard deviations for each level of the independent variable, we will generate a more detailed interpretation which includes a statement about whether there is an increase or a decrease: There was a significant difference between infants’ mean proportion looking time toward the singer between the baseline (M = 0.52; SD = 0.18) and the test phase (M = 0.59; SD = 0.18). This difference was significant according to a paired samples t-test, t(31) = -2.42, p &lt; .05. 4.4.7 Lab Homework #6 Use the data file from this lab to test whether the number of frames the baby spent gazing at the familiar song is significantly different than the number of frames spent gazing at the unfamiliar song (use alpha = .05). Hint: If you are having trouble figuring out what variables to use, remember to check the Label column in Variable View. Complete the Moodle quiz, which will ask you about both descriptive and inferential statistics. Graph this result (including 1 SEM error bars) as a bar graph. Upload your output file, including the graph, to Moodle. 4.5 JAMOVI - Week 8 - March 15 &amp; 16 This lab activity was developed by Erin Mazerolle, Christine Lomore, and Sherry Neville-MacLean. 4.5.1 Learning Objectives In this lab, we will use jamovi to: Perform a paired-sample t-test (an inferential statistic) Use descriptive statistics and graphs to give context to inferential statistics Report a paired-sample t-test in APA format Perform a one-sample t-test 4.5.2 Pre-lab Tasks Before lab, be sure to complete the Psychology 291 Data: Terms of Use quiz. When you pass that quiz, download the data file and data dictionary from OneDrive. Be sure to practice your data management skills and save the files in an appropriate file folder in your Psych 292 Lab folder. Be sure to install any updates required for JAMOVI and to have the data file opened in JAMOVI before your lab begins. 4.5.3 Research Context for Data Set The data set with which we will be working is from an online survey. Participants were students in a 200-level, Research Methods in Psychology course. They responded to questions about anxiety, stress, sleep, self-care, and substance use. The survey was delivered to the same class of students twice during the semester - once early in the term and once immediately after the course midterm. The person who constructed the data file used T1_ and T2_ before variable names to denote whether the data came from the beginning of the term (T1) or immediately after the midterm (T2). Multiple questions were asked for each topic of interest (or “construct”). In this case, the constructs were: anxiety, stress, sleep, self-care, and substance use. Multiple questions (or “items”) are often asked because no one item fully reflects the construct. A “composite score” for the construct can be calculated by combining the scores from the individual items. There are many ways to calculate composite scores. The most simple composite scores are simply sums or averages of all the items relevant to the construct. Cohen, S., Kamarck, T., &amp; Mermelstein, R. (1983). A global measure of perceived stress. Journal of Health and Social Behavior, 24, 385-396. Surveys that ask participants to rate statements often include a mix of both positive and negative statements. For example, the Perceived Stress Scale by Cohen, Kamarck, and Mermelstein (1983) asks respondents to answer on a scale from 1 to 5 (where 1 = never, 2 = almost never, 3 = sometimes, 4 = fairly often, and 5 = very often). One item, item #7, asked “In the last 7 days, how often have you been able to control irritations in your life?” For this question, a response of 1 would indicate higher stress and a response of 5 would indicate lower stress. Another item, item #9, asked “In the last 7 days, how often have you been angered because of things that were outside of your control?” We would interpret responses to this question in the opposite direction: a response of 1 would indicate lower stress and a response of 5 would indicate higher stress. Before a composite score is computed, the scale scores for any oppositely worded items would need to be “reverse coded.” You might also encounter the term “recoded” which is a more general term; reverse coding is one type of recoding. When using the Perceived Stress Scale, for item #7, we would reverse the scale so that 1 = 5, 2 = 4, 3 = 3, 4 = 2, and 5 = 1. The recoding and the calculation of composite scores has been completed for you in this data set. For perceived stress, for example, the scores for items #4, 5, 7, and 8 were reverse coded, and then, a sum of the item scores was calculated. T1_Stress represents the composite score of perceived stress at time 1, or at the beginning of the term. 4.5.4 Performing a Paired-Samples t-Test 4.5.4.1 Motivation to perform statistical analyses Imagine you are a researcher who is interested in how midterms impact students’ sleep patterns. You are curious about whether the number of nightly sleep hours changes during midterm time. You plan to use the survey data described above to answer your question. First, what is your research question? Possible research question: Do the number of hours of sleep change during midterms? Note that this is just one possible research question. You might also ask a directional question. Consider the following example: Do the number of hours of sleep decrease during midterms? We will use the non-directional research question for now. 4.5.4.2 Using descriptive statistics to look at the question What might you do to answer this question? You can use some JAMOVI skills we’ve already learned to explore the differences in sleep duration between the two timepoints: descriptive statistics! graphing! First, though, what is the scale of measurement for hours of sleep? To answer this question, look at the data dictionary. We can see by looking at T1_sleep_hours and T2_sleep_hours in JAMOVI, that the scale is entered as continuous (which can be used for variables measured on interval or ratio scales). Since we have data measured on a ratio scale, we can calculate the means and standard deviations, and we can look at the histograms. You should recall the commands used to request descriptive statistics and graphs from previous chapters. Let’s make those requests now. Stretch your Thinking: Why do the histograms look high-low-high-low? (Answer: because people tend to write/remember whole hours, so those values occur more frequently in the data). 4.5.4.3 Motivation to perform inferential statistics Having looked at the descriptive statistics and graphs, we see differences between the sleep scores at the two timepoints. But, how confident are we that that the means are truly different? That is, do the differences between these timepoints represent true differences in the sleep of students between the beginning of term and midterms? Or, could the differences explained by sampling error? Remember: Each sample is different. If you repeated these surveys with a different sample, would you expect to get the same results? (Answer: No.) Do the differences between timepoints exist in the population of all students? That is what inferential statistics will help us decide. Erin to do: (I will try to make a graph to go with this paragraph INF_FIG) We use a paired-samples t-test in this case because the data are paired. The survey was completed by the same participants at both time points. Paired-samples t-tests are also known as paired t-tests, matched t-tests, and dependent t-tests. First, we need to set up our null and alternative hypotheses. Remember our research question: Does sleep change during midterms? So, our null hypothesis (\\(H_0\\)) is there is no difference in sleep between the two timepoints: \\(\\mu_{T1}\\) = \\(\\mu_{T2}\\). Our alternative hypothesis (\\(H_A\\) or \\(H_1\\)) is there is a difference: \\(\\mu_{T1}\\) \\(\\neq\\) \\(\\mu_{T2}\\). Question: Why are our hypotheses about the mean, as opposed to a different measure of central tendency, or the distributions? Answer: t-tests answer questions about means. Other tests can be used for research questions about different statistics. 4.5.4.4 Using JAMOVI to request the paired-samples t-test • Do CI of the mean difference – not of the effect size • Use Descriptive plot – this is essentially a bar graph without the bars, with the median on it. Use Excel if we have time to do a bar graph • Explain how to interpret the t-value, df, the CI of the mean difference, the effect size, and the p-value • Write APA sentence 4.5.5 Homework Questions Continue the scenario above – use composite sleep quality variables 4.5.6 Practice Questions Canada’s Healthy Drinking Guidelines suggest that women should consume “no more than 2 standard drinks on most days and no more than 10 drinks per week.” Using the data collected in PSYC 291, select only those participants who identify as cisgender women. Compare the number of drinks women in PSYC 291 consumed in the week prior to Time 1 (September) to the healthy drinking standard. Conduct the appropriate t-test. What can you conclude? Write your answer in APA format, including the 95% confidence interval, and effect size (Cohen’s d). "],["lab-5-t-test-independent-sample.html", "Chapter 5 Lab 5: t-test (Independent Sample) 5.1 Do you come across as smarter when people read what you say or hear what you say? 5.2 Lab skills learned 5.3 Important Stuff 5.4 R 5.5 Excel 5.6 SPSS 5.7 JAMOVI", " Chapter 5 Lab 5: t-test (Independent Sample) I think he [Gosset] was really the big influence in statistics… he asked the questions and Pearson and Fisher put them into statistical language, and then Neyman came to work with the mathematics. But I think most of it came from Gosset. —F. N. David This lab is modified and extended from Open Stats Labs. Thanks to Open Stats Labs (Dr. Kevin P. McIntyre) for their fantastic work. 5.1 Do you come across as smarter when people read what you say or hear what you say? 5.1.1 STUDY DESCRIPTION Imagine you were a job candidate trying to pitch your skills to a potential employer. Would you be more likely to get the job after giving a short speech describing your skills, or after writing a short speech and having a potential employer read those words? That was the question raised by Schroeder and Epley (2015).The authors predicted that a person’s speech (i.e., vocal tone, cadence, and pitch) communicates information about their intellect better than their written words (even if they are the same words as in the speech). To examine this possibility, the authors randomly assigned 39 professional recruiters for Fortune 500 companies to one of two conditions. In the audio condition, participants listened to audio recordings of a job candidate’s spoken job pitch. In the transcript condition, participants read a transcription of the job candidate’s pitch. After hearing or reading the pitch, the participants rated the job candidates on three dimensions: intelligence, competence, and thoughtfulness. These ratings were then averaged to create a single measure of the job candidate’s intellect, with higher scores indicating the recruiters rated the candidates as higher in intellect. The participants also rated their overall impression of the job candidate (a composite of two items measuring positive and negative impressions). Finally, the participants indicated how likely they would be to recommend hiring the job candidate (0 - not at all likely, 10 - extremely likely). What happened? Did the recruiters think job applicants were smarter when they read the transcripts, or when the heard the applicants speak? We have the data, we can find out. 5.2 Lab skills learned Conduct independent samples t-tests Generate figures Discuss the results and implications 5.3 Important Stuff citation: Schroeder, J., &amp; Epley, N. (2015). The sound of intellect: Speech reveals a thoughtful mind, increasing a job candidate’s appeal. Psychological Science, 26, 877-891. Link to .pdf of article Data in .csv format Data in SPSS format 5.4 R 5.4.1 Load the data Remember that any line with a # makes a comment and the code does not run. Below is how to load the .csv data from the online repository, or from a local file (you need to change the file path to where the local file is, if you downloaded it). The data contains all of the measures and conditions from Experiment 4. library(data.table) # load from github repo #all_data &lt;- fread(&quot;https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/SchroederEpley2015data.csv&quot;) all_data &lt;- fread(&quot;data/SchroederEpley2015data.csv&quot;) # load from file on computer 5.4.2 Inspect data frame This will give you a big picture of the data frame. Click the button to view it in your browser, then take a look to see what is in it. library(summarytools) view(dfSummary(all_data)) 5.4.3 Find the data you need This time the data comes pre-filtered for us. The authors ran lots of experiments, but we only have the data from Experiment 4. This is great, we don’t need to subset the data frame to find all of the data that we need. But, we do still need to understand what data we want to analyze. Let’s start with identify the column that codes the experimental conditions for whether or not the evaluator read a transcript or heard the interview. 5.4.3.1 Condition variable Lucky for us, the condition variable is called CONDITION! Let’s take a look. We printed it out just by writing down all_data$CONDITION. There 0s and 1s for each condition (audio vs. transcript). But which one is which? This isn’t clear from the data, and it isn’t clear from the paper, or from the repository. We have to do some guess work. I went ahead and computed the means for the Intellect_rating between each condition, and then compared those to the graph in the paper for E4. It looks like 1 = audio condition, and 0 = transcript condition. all_data$CONDITION ## [1] 1 1 1 0 0 0 1 0 1 0 0 1 1 0 0 1 1 1 0 0 0 0 0 1 1 1 0 1 1 1 0 0 1 1 0 1 0 1 ## [39] 1 aggregate(Intellect_Rating~CONDITION,all_data,mean) ## CONDITION Intellect_Rating ## 1 0 3.648148 ## 2 1 5.634921 Let’s use words instead of 0s and 1s to refer to our experimental conditions. To do this, we will chance the values of 0 and 1, to the words transcript and audio. We can do this in two steps. First we convert the CONDITION column to a factor. This will automatically turn the 0s and 1s into strings (not numbers, text). Factors have an internal variable for the names of the levels, which will be 0 and 1. We can simply change the level names to transcript and audio. all_data$CONDITION &lt;- as.factor(all_data$CONDITION) levels(all_data$CONDITION) &lt;- c(&quot;transcript&quot;,&quot;audio&quot;) Now if you look at the all_data variable, you will see the words transcript and audio, where 0s and 1s used to be. 5.4.3.2 Dependent Measures Next it’s time to find the dependent measure columns. The graph from the paper shows three different measures in each condition. These included Intellect, General Impression, and Hiring Likelihood. Every evaluator (either given a transcript or audio recording of the interview) gave ratings on a scale of 1 to 10 for each of those concepts. It’s not immediately clear which columns in all_data correspond to those three measures. There are lots of different measures that could be the ones they reported. It turns out the relevant ones are called Intellect_Rating Impression_Rating Hire_Rating In this tutorial we are going to walk through doing an independent samples t-test for the first measure, Intellect_Rating. You can follow these same steps to complete the same kind of t-test for the other two variables. 5.4.4 Look at the dependent variable. Question: Why do we always want to look at the data? What is the first thing we do before even considering an inferential test? Look at the data. Always look at the data. We could make a dot plot or histogram of the data from the Intellect_ratings. But, from our last lab we already learned how to make graphs showing most of the information we would want to look at. For example, we could make a bar graph that has the means for each condition (transcript vs. audio), standard errors of the mean and the actual scores as little dots. This would be great to look at it. Not only will it tell us if there are really weird numbers in the data (who knows maybe the data file is corrupted, you need to look), it will also give us strong intuitions about what to expect for the t-test. We can plot each score as a dot using the all_data data frame. If we want to add on a layer for the sample means, and for the sample standard errors, we have to compute those and put them in a new data frame first. Then we use both data frames with ggplot to plot all of the information. We will use dplyr to quickly get the means and the standard errors and put them in a new data frame called decriptive_df. library(dplyr) library(ggplot2) # get means and SEs descriptive_df &lt;- all_data %&gt;% group_by(CONDITION) %&gt;% summarise(means= mean(Intellect_Rating), SEs = sd(Intellect_Rating)/sqrt(length(Intellect_Rating))) # Make the plot ggplot(descriptive_df, aes(x=CONDITION, y=means))+ geom_bar(stat=&quot;identity&quot;, aes(fill=CONDITION))+ # add means geom_errorbar(aes(ymin=means-SEs, # add error bars ymax=means+SEs), width=.1) + geom_point(data=all_data, aes(x=CONDITION, y=Intellect_Rating), alpha=.5)+ geom_point(alpha=.25)+ ylab(&quot;Rating&quot;) This plot is very useful. First, we can see the numbers in our dependent measure are behaving sensibly. We know that the numbers have to be between 1-10, because those were the only options in the scale. If we found numbers bigger or smaller, we would know something was wrong. Checking for things that are obviously wrong in the data is one reason why we always look at first. We are checking for obvious errors. There are other ways to check to, but looking is fast and easy. Question: Why are the standard errors of each sample an appropriate thing to use for error bars? Now that you can see the patterns in the data, you should form an intuition about how the independent samples t-test will turn out. You can see how big the error bars (+1/-1 standard error of each sample man). The t-test will tell us whether the observed difference (or greater) is likely due to chance. Should we find a big t-value or a small t-value? Should we find a big p-value or a small t-value. If you understand how t-values and p-values work, the answer should be very clear from the graph. You should already know how the t-test will turn out before you run it. Running it will confirm what you already suspect to be true. 5.4.5 Conduct Independent samples t-test Question: Why are we conducting an independent samples t-test, and not a one-sample or paired samples t-test? We use the very same t.test function that we used last time to conduct a t-test. The only difference is that we don’t tell the R to use a paired sample t-test. We leave the paired=TRUE statement out, and R automatically knows we want to do an independent samples t-test. Remember to set the var.equal=TRUE, otherwise R will compute a different version of the t-test. You can use different syntax to run the t-test. Because our data is already in a data frame we can use this syntax. t.test(Intellect_Rating~CONDITION, data=all_data, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Intellect_Rating by CONDITION ## t = -3.5259, df = 37, p-value = 0.001144 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.1284798 -0.8450652 ## sample estimates: ## mean in group transcript mean in group audio ## 3.648148 5.634921 The t.test function also will work on two variables, not in a data frame. For example, the following does the same thing. But, it’s harder to read, and the means are described in terms of X and Y, not terms of transcript and audio, like the report above. t.test(all_data[all_data$CONDITION==&#39;transcript&#39;,]$Intellect_Rating, all_data[all_data$CONDITION==&#39;audio&#39;,]$Intellect_Rating, var.equal=T) ## ## Two Sample t-test ## ## data: all_data[all_data$CONDITION == &quot;transcript&quot;, ]$Intellect_Rating and all_data[all_data$CONDITION == &quot;audio&quot;, ]$Intellect_Rating ## t = -3.5259, df = 37, p-value = 0.001144 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.1284798 -0.8450652 ## sample estimates: ## mean of x mean of y ## 3.648148 5.634921 Question: What conclusions do we draw from the t-test? Based on these results, if you were being evaluated for a job interview, would you rather have the evaluator read a transcript of your interview or listen to an audio recording? So, now we have the t-test. It shows the t-value, the p-value, and the means for each group. You can double-check with the paper to see if we found the same results as reported by the authors. 5.4.6 Remaining ratings Now, you should use what you have learned to analyse the last two ratings for the dependent variables Impression_Rating, and Hire_Rating. This is your task for the generalization exercise. Remember to plot the data for each, and conduct a t-test for each. Then compare what you found to the original article. What did you find, and what do the results mean? 5.4.7 Reconstructing the graph from the paper The results from Experiment 4 in the paper plot the means and error bars (+1 / -1 SEM) for all three dependent measures, for both experimental conditions. We can do this in ggplot using the data. We will have to make a couple changes to the data frame. But, it won’t be too hard. What we need to do is make a fully long form data frame. Remember a long form data frame has one row per dependent measure. The all_data frame is partly long and partly wide. If we are only interested in one dependent measure, then it is a long data frame for that measure. For example, example if we are only interested in plotting Intellect_Rating, then we already have one observation of that dependent measure for each row. But, in the other columns, the dependent measures for Impression_Rating and Hire_Rating are in the same rows. Before continuing, it is very much worth mentioning that this part of data analysis happens a lot, and it is kind of annoying. I call it the rubix cube problem, because we need to “rotate” and transform the format of the data to accomplish different kinds of analysis goals. It’s good to be able to know how to do this. This problem occurs all of the time, and can occur for any software package. It’s a good thing you are learning R, because we can do these things easily in R. They are not often so easy to do without a computer programming language like R. The worst thing to do is transform the data by hand. That really sucks. Believe me you don’t want to do it. Why? Because you will make mistakes, and you will mess up the data, then you will mess up your analysis. And, you won’t be able to find your mistakes, and it will take you ages to correct them. That sucks. There’s more than one way to transform data in R. For example the cast and melt functions do this kind of thing. You can look those up. In this example we will not use those functions. Instead we will show some steps to build the required data frame one step at a time. # repeat CONDITION column three times condition &lt;- rep(all_data$CONDITION,3) # make a ratings variable with all three ratings in one variable ratings &lt;- c(all_data$Intellect_Rating, all_data$Impression_Rating, all_data$Hire_Rating) # make a new factor variable with the names of the ratings # need to repeat each level name the appropriate number of times num_to_repeat &lt;- length(all_data$CONDITION) rating_type &lt;- rep(c(&quot;Intellect&quot;,&quot;Impression&quot;,&quot;Hire&quot;),num_to_repeat) # put the new variables into a data frame plot_all &lt;- data.frame(condition,rating_type,ratings) # Get the means and standard errors for each rating by condition descriptive_all &lt;- plot_all %&gt;% group_by(condition,rating_type) %&gt;% summarise(means= mean(ratings), SEs = sd(ratings)/sqrt(length(ratings))) # Make the plot ggplot(descriptive_all, aes(x=rating_type, y=means, group=condition))+ geom_bar(stat=&quot;identity&quot;, aes(fill=condition), position=&#39;dodge&#39;)+ geom_errorbar(aes(ymin=means-SEs, ymax=means+SEs), width=.1, position = position_dodge(width=.9)) + geom_point(data=plot_all, aes(x=rating_type, y=ratings, group=condition), alpha=.25, position = position_dodge(width=.9))+ geom_point(alpha=.25)+ ylab(&quot;Rating&quot;) Well, we didn’t make the exact graph. We have the bars, the error bars, and we added the individual scores because they are useful to look at. Otherwise, it’s the same graph (except the the ordering of bars is determined alphabetically here. We change that in ggplot, but we won’t do that today.) 5.4.8 Generalization Exercise (1 point - Pass/Fail) Complete the generalization exercise described in your R Markdown document for this lab. Now, you should use what you have learned to analyse the last two ratings for the dependent variables Impression_Rating, and Hire_Rating. Report the t-tests and means for each. 5.4.9 Writing assignment (2 points - Graded) Complete the writing assignment described in your R Markdown document for this lab. When you have finished everything. Knit the document and hand in your stuff (you can submit your .RMD file to blackboard if it does not knit.) Answer the following questions Explain the difference between a paired-samples t-test and an independent samples t-test. ( 1 point ) Imagine you were to conduct a between-subjects experiment with two groups, where the manipulation had no effect whatsoever. If you repeated this experiment (that doesn’t work) 100 times and computed a t-test each time, approximately how many of the experiments out of 100 would you expect find the associated p-value is .05 or smaller? Explain (1 point) General grading. You will receive 0 points for missing answers You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 5.5 Excel How to do it in Excel 5.6 SPSS In this lab, we will use SPSS to: Perform an independent-samples t-test Graph the data 5.6.1 Experiment Background Schroeder and Epley (2015) conducted an experiment to determine whether a person’s speech (i.e., vocal tone, cadence, and pitch) communicates information about their intellect better than their written words (even if they are the same words as in the speech). To conduct this study, the authors randomly assigned 39 professional recruiters for Fortune 500 companies to one of two conditions. In the audio condition, participants listened to audio recordings of a job candidate’s spoken job pitch. In the transcript condition, participants read a transcription of the job candidate’s pitch. After hearing or reading the pitch, the participants rated the job candidates on three dimensions: intelligence, competence, and thoughtfulness. These ratings were then averaged to create a single measure of the job candidate’s intellect, with higher scores indicating the recruiters rated the candidates as higher in intellect. The participants also rated their overall impression of the job candidate (a composite of two items measuring positive and negative impressions). Finally, the participants indicated how likely they would be to recommend hiring the job candidate (0 - not at all likely, 10 - extremely likely). So, what happened? Did the recruiters think job applicants were smarter when they read the transcripts, or when the heard the applicants speak? We have the data, and we can find out. 5.6.2 Performing an independent-samples t-test First, let’s open the relevant data file in SPSS. You should have already downloaded this data file from section 0.2.3 of the lab manual - we used it when we worked through the exercises in Chapter 12 of the lab manual. The file we are working with in this lesson is called “SchroederEpley2015_Study4_data.sav.” Your data should look like this: For our analysis, we will focus on only one of the three measures mentioned above: intellect. We want to know if perceived intellect is different in the audio condition (where recruiters listened to a job pitch) than in the transcript condition (where recruiters read a transcript of a job pitch). Before we run the t-test, let’s review a button at the top of our SPSS spreadsheet window. This will be important for identifying the values assigned to groups later on. The button I refer to here is highlighted below; it has two boxes, one with an A and one with a 1 on it, with arrows in-between. Press this button and see what happens to your data spreadsheet: Notice that this button has revealed the values used to signify the Audio and Transcript groups. We will need to know that these groups are signified by 0s and 1s when we come to running our t-test. If you click the button again, the cells will go back to displaying their labels. Keep in mind that revealing the values or labels does not change anything about the data itself or any subsequent analyses; it is merely a cosmetic change. Now, we’re ready to run the independent-samples t-test. Go to Analyze, then Compare Means, then Independent Samples t-test… A window will appear asking you to specify which variable to use in this analysis. Remember, we are only using intellect, so find this variable in the left-hand list and move it into the “Test Variable(s)” field on the right using the arrow. For the field labeled “Grouping Variable,” we will specify which variable is our independent variable. That variable is CONDITION (we have two conditions: audio and transcript). Move CONDITION into the “Grouping Variable” field. Notice that next to the variable name there are two question marks and the OK button is disabled: Here, SPSS wants to know the values used to signify these conditions (remember the 0s and 1s?). So, click Define Groups, and place 0 and 1 in the fields that ask for Values for Group 1 and Group 2. Click Continue, and then OK. SPSS will produce output tables as follows: The t-test output has similarities with the paired t-test output we saw in Chapter 6 of this lab manual. Like the paired t-test output, the first table contains useful descriptive statistics that help us understand the pattern of results and contextualize our inferential statistics. In the case of an independent-samples t-test, there is one special consideration to be made: the equality of variances. One of the assumptions of a t-test is that the groups being compared have roughly equal variances. Conveniently, the independent-samples t-test in SPSS performs another test automatically to determine if the variances are equal or not: this test is called the Levene’s test. In the second output table, there is a section dedicated to Levene’s test. The rule is as follows: If the Sig. value under the Levene’s test heading is smaller than your alpha level, then your variances are not equal and you must refer to the values in the second row of the table, labeled “Equal variances not assumed.” If the Sig. value for Levene’s test is larger than alpha, then you can use the top row labeled “Equal variances assumed.” However, I recommend that you always use the “Equal variances not assumed” row. In this case, the Sig. value associated with the Levene’s test is .35, which is greater than the conventional alpha level of .05, so you might use the “Equal variances assumed” row, but we are still going to use the “Equal variances not assumed” row. The t-statistic for our independent-samples t-test is -3.48, the degrees of freedom are adjusted to 33.43, and the p-value for the t-test is .001. Note: Be sure to look at the p-value associated with the t-test and not Levene’s test when you are interpreting your t-test results. What does the t-test tell us about the data? We can put our finding into words to clarify: Recruiter ratings for audio job pitches (M = 6.63, SD = 1.61) are higher than ratings for transcripts of pitches (M = 4.65, SD = 1.91). This difference is significant, t(33.43) = -3.48, p &lt; .05. The default SPSS output also includes effect sizes in the third table. You can include Cohen’s d in your results sentence as well. Find it in the Independent Samples Effect Sizes table in the first row, in the Point Estimate column. For example: Recruiter ratings for audio job pitches (M = 6.63, SD = 1.61) are higher than ratings for transcripts of pitches (M = 4.65, SD = 1.91). This difference is significant according to an independent samples t-test, t(33.43) = -3.48, p &lt; .05, d = 1.13. Some formatting guidelines for writing results sections: All of the numbers are rounded to two decimal places, but if your p-value was .0001, it would be OK to write p &lt; .001. Italicize symbols such as p and t. There are spaces on either side of =, &gt;, or &lt; symbols. 5.6.3 Graphing your data CONDITION in this experiment represents a discrete, categorical variable. Therefore, we will be using a bar chart to visualize this data. To begin, go to Graphs, then Legacy Dialogs, then Bar… Next, choose Simple in the window that appears, then click Define. In the next window, make sure that under “Bars Represent,” you have chosen Other statistic. Move your variable of interest (intellect) into the field labeled “Variable.” Then, move CONDITION to the “category axis” field. Next, click Options. Then choose Display Error Bars, and have them represent Standard Error with a multiplier of 1. Click Continue, then OK. SPSS will produce a bar graph of your mean ratings for both audio and transcript conditions. Note: It’s always a good idea to compare your graph to the descriptive statistics to make sure it looks right. 5.6.4 Optional exercises (good practice and review for the take-home final exam) At this point, you’ve covered everything you need to successfully complete the homework assignment below. However, there are a number of different analyses we can practice with this dataset. This section walks you through some optional analyses to consolidate what we’ve already covered as well as add breadth. If you’re running out of time, skip down to the Homework now. You can return to these exercises later (i.e., when studying). 5.6.4.1 Using a cut point to define groups for an independent t-test Sometimes you will see groups defined with a non-nominal independent variable. For example, in class we talked about defining countries as “overweight” or “not overweight” depending on whether 50% of their population was classified as overweight. The rate of overweight is known for each country, but we can divide the countries into two groups at an arbitrary cut point (in this case, a rate of 50%). Aside: This is a good example of how an ordinal, interval, or ratio variable might be considered to have distinct categories - you have to define the boundaries of the categories yourself first. A commonly used cut point is the median value (this is called a “median split”). Let’s use the example of age in the current dataset. You can find the median value of age via many menus. Let’s go Analyze, then Descriptive Statistics, then Frequencies…. Move age to the Variable(s) box and then click Statistics. Select Median, then click Continue and then OK. The first output table contains the median: We can use the median of 29 as the cut point. We’ll be running an independent t-test to determine whether there is a significant difference in intellect between candidates under 29 years old and over 29 years old. Click Analyze, then Compare Means, then Independent Samples t-test… It’s likely that intellect is already selected as your Test Variable(s), but do so if not. Then, move age to the Grouping Variable (you may need to move CONDIITION out first). Then click Define Groups… Select Cut point and input 29 as follows: Click Continue and then OK. You should get the following output tables: Practice writing a sentence describing the results, and then compare it to #1 in the “Example answers to practice problems” below. 5.6.4.2 Review: Correlation Let’s say you had a different research question: Is the age of the candidate correlated with intellect ratings? You could answer this question with the same variables analyzed in the section above, but using correlation instead of an independent t-test. Click Analyze, then Correlation, then Bivariate… and move age and intellect into the Variables box: Click OK. The output table should look as follows: As we noted in the previous lab session on correlations, some of the information in this output table is redundant or not useful. We can clean that up by changing some of the options in the Bivariate Correlations dialog. Click Analyze, then Correlation, then Bivariate…, but this time, select Show only the lower triangle and unselect Show diagonal (both found near the bottom). Click OK. Now the output is tidier: Write a sentence describing the results of this test. Compare your answer to #2 in the “Example answers to practice problems” below. Now, assume you are in the mood to do some exploratory data analysis. We can run multiple bivariate correlations at the same time in the same dialog. Click Analyze, then Correlation, then Bivariate… again. To the Variables box, add wordcount, time, and impression, in addition to age and intellect: Click OK. Now our output table contains the r- and p-values for each possible pair of the five variables: SPSS flags significant correlations for us with an * or **. In this case, we see a ** next to the correlation between impression and intellect. The note at the bottom of the table indicates that the correlation is significant at the 0.01 level. SPSS automatically indicates whether correlations are significant at .05 or .01. If your Sig. (p-value) is between .05 and .01, SPSS will flag it as * (significant at the 0.05 level) and if your Sig. (p-value) is less than .01, SPSS will flag it as ** (significant at the 0.01 level). Let’s pick a few pairs of variables and make scatterplots. We have a good range of different correlations in this table, so we can use these data to practice identifying correlations of different strengths. Click Graphs, Legacy Dialogs, and then Scatter/Dot…. Then click Simple Scatter and then Define. Move intellect into the Y axis and age into the X axis. Click OK. This should produce a scatterplot in the output file. Repeat for all correlations with intellect, using intellect on the Y axis each time to make it easier to compare to the example answers below (#3). Compare the pattern of dots in each scatterplot to the r-values reported in the tables. Can you see the differences between the plots? Can you tell from the scatterplots whether we have violated any of the assumptions of Pearson’s r (i.e., linearity, no outliers)? 5.6.5 Lab Homework #7 Use the same data file from this lab’s tutorial to test whether intellect ratings were different between the gender categories (use alpha = .05). Which gender category had higher intellect ratings? Was this difference significant? What was the effect size? Report your result in a sentence or two, using the example and guidelines above to help with the format and structure. Be sure to submit your writing on Moodle. Graph this result (including 1 SEM error bars) as a bar graph. Submit the .spv file containing your independent t-test and graph on Moodle. Grading: TBD 5.6.6 Example answers to practice problems Intellect ratings for candidates aged 29 or younger (M = 5.33, SD = 1.94) were not significantly different from intellect ratings for candidates over age 29 (M = 5.88, SD = 2.28), as demonstrated by an independent t-test [t(29.70) = -0.74, p &gt; .05]. Note: If you included Cohen’s d, the value was -0.26, but we often don’t report effect size if the effect was not significant. Intellect ratings were not significantly correlated with the age of the candidates, r = .05, p &gt; .05. You should have created four scatterplots. They are included below as well as some notes about each. For the correlation between age and intellect, we found r was very close to 0, at .05. This is reflected in the pattern of dots, which are spread fairly uniformly across the entire plot. There are no concerns with violating the assumption of linearity on this plot. There are also no outliers. For the correlation between time and intellect, we found r was also close to 0 but negative, at -.07. It is harder to link the r with the plot in this case because of the two dots far to the right in the plot. These might be outliers and could be investigated further, but how to do so is not covered in PSYC 292. The correlation between wordcount and intellect was r = -.24. This is a fairly weak correlation but if you focus on the cluster of dots on the left, you can get the impression that there are more dots in the top left and bottom right than the other two quadrants. The dot to the far right might be an outlier and could be investigated further, but how to do so is not covered in PSYC 292. For impression and intellect, a correlation of r = .83 was observed. In the scatterplot, you can see the dots cluster around an imaginary line that goes from the bottom left corner to the top left corner. There are no concerns that the assumption of linearity has been violated. There is also no evidence of outliers. 5.7 JAMOVI This section is copied almost verbatim, with some editorial changes, from Answering questions with data: The lab manual for R, Excel, SPSS and JAMOVI, Lab 7, Section 7.6, SPSS, according to its CC license. Thank you to Crump, Krishnan, Volz, &amp; Chavarga (2018). In this lab, we will use jamovi to: Perform an independent-samples t-test Graph the data 5.7.1 Experiment Background Schroeder and Epley (2015) conducted an experiment to determine whether a person’s speech (i.e., vocal tone, cadence, and pitch) communicates information about their intellect better than their written words (even if they are the same words as in the speech). To conduct this study, the authors randomly assigned 39 professional recruiters for Fortune 500 companies to one of two conditions. In the audio condition, participants listened to audio recordings of a job candidate’s spoken job pitch. In the transcript condition, participants read a transcription of the job candidate’s pitch. After hearing or reading the pitch, the participants rated the job candidates on three dimensions: intelligence, competence, and thoughtfulness. These ratings were then averaged to create a single measure of the job candidate’s intellect, with higher scores indicating the recruiters rated the candidates as higher in intellect. The participants also rated their overall impression of the job candidate (a composite of two items measuring positive and negative impressions). Finally, the participants indicated how likely they would be to recommend hiring the job candidate (0 - not at all likely, 10 - extremely likely). So, what happened? Did the recruiters think job applicants were smarter when they read the transcripts, or when the heard the applicants speak? We have the data, and we can find out. 5.7.2 Performing an independent-samples t-test First, let’s open the relevant data file in jamovi. The data set is available here. The file we are working with in this lesson is called “SchroederEpley2015_Study4_data.sav.” Your data should look like this: For our analysis, we will focus on only one of the three measures mentioned above: intellect. We want to know if perceived intellect is different in the audio condition (where recruiters listened to a job pitch) than in the transcript condition (where recruiters read a transcript of a job pitch). Before we run the t-test, let’s review the variable attributes by using the Data menu and the Settings button, available at the top of our jamovi spreadsheet window. Check CONDITION. When you check CONDITION, notice that this Settings button has revealed the values used to signify the Audio and Transcript groups. Take note that these groups are signified by 0s and 1s. This coding helps the program to run our t-test. Keep in mind that whether we look at the codes or labels does not change anything about the data itself or any subsequent analyses; it is merely a cosmetic change. Remember to check intellect while considering the information about the study (the context). Is intellect a variable measured on a continuous scale? Does it get represented by decimal-type data? (Hint: Be sure to carefully read the names of the variables during these exercises. Some variable names are similar and can lead to confusion when you select the variables to be included in your analysis.) Remember to press the Settings button again or to press the upward facing arrows to return to a more full version of your data spreadsheet and Results panel: Or Now, we’re ready to run the independent-samples t-test. Go to Analyses, then T-Tests, then Independent Samples T-test. A window will appear asking you to specify which variable to use in this analysis. Remember, we are only using intellect, so find this variable in the left-hand list. One way you can find the intellect variable by clicking on the search icon, the one that looks like a magnifying glass, and then typing the name of the variable. Another way to find the variable is to use the slider at the right of the list of variables and move down until you see the intellect variable. Then, move the variable into the “Dependent Variables” field on the right by highlighting the variable and using the arrow to move it. For the field labeled “Grouping Variable,” we will specify which variable is our independent variable. That variable is CONDITION (we have two conditions: audio and transcript). Move CONDITION into the “Grouping Variable” field. In the Results panel, jamovi will produce an output tables as follows: The t-test output share some similarities with the paired t-test output we saw in Chapter 6 of this lab manual. The Independent Samples T-Test table contains a t-statistic obtained, the degrees of freedom, and a p-value. Much like we learned when discussing the paired-samples t-test output, we can click on the Indpendent Samples T-Test table to reveal the Analyses menu again, and click the Descriptives button to request a second table that contains useful descriptive statistics that help us understand the pattern of results and contextualize our inferential statistics. We can also request Effect size, the 95% Confidence interval, Welch’s, and some Assumption Checks. In the case of an independent-samples t-test, one assumption made is that there is equality of variances. The groups being compared are assumed to have roughly equal variances. This test is called the Levene’s test. Simply click on Homogeneity test, and the table showing the results will appear between the table depicting the independent-samples t-test and the Descriptives table. Conveniently, in jamovi, you can request another test to determine if the assumption of normality is also upheld. This test is called the Shapiro-Wilk test. It, too, is conveniently requested by clicking on Normality test. The results will appear right after the Independent Samples T-Test table. When interpreting the second output table, or Shapiro-Wilk test, the rule is as follows: If the p-value in the table is smaller than your alpha level, which is often the conventional .05, then your data are not normally distributed and you should request Welch’s t-test. If the p-value for the test is larger than alpha, then you can use the Student’s t-test that is automatically generated when you request an independent t-test. When interpreting the third output table, or Levene’s test, the rule is as follows: If the p-value in the table is smaller than your alpha level, then your variances are not equal and you should request Welch’s t-test. If the p-value for Levene’s test is larger than alpha, then you can use the Student’s t-test that is automatically generated when you request an independent t-test. Some people may recommend that you always use the Welch’s t-test - whether the assumptions are upheld or violated. In this example, the p-value associated with the Shapiro-Wilk test is .12, which is greater than the conventional alpha level of .05, so the assumption of normality is upheld. The p-value associated with the Levene’s test is .35, which is greater than the conventional alpha level of .05, so the assumption of homogeneity is upheld. You could report the results of the Student t-test, but we are still going to use the Welch’s t-test. The t-statistic for our independent-samples t-test is -3.48, the degrees of freedom are adjusted to 33.4, and the p-value for the t-test is .001. Note: Be sure to look at the p-value associated with the t-test and not Levene’s test when you are interpreting your t-test results. What does the t-test tell us about the data? We can put our finding into words to clarify: Recruiter ratings for audio job pitches (M = 6.63, SD = 1.61) are higher than ratings for transcripts of pitches (M = 4.65, SD = 1.91). This difference is significant, t(33.4) = -3.48, p &lt; .05, 95% CI [-1.85,-0.39], d = -1.12. Some formatting guidelines for writing results sections: All of the numbers are rounded to two decimal places, but if your p-value was .0001, it would be okay to write p &lt; .001. Italicize symbols such as p and t. There are spaces on either side of =, &gt;, or &lt; symbols. 5.7.3 Graphing your data CONDITION in this experiment represents a discrete, categorical variable. Therefore, we will be using a bar chart to visualize this data. To begin, go to Analyses, then Exploration, and then Descriptives. Next, move intellect to the “Variables” window by highlighting the variable and using the arrow, and move CONDITION to the “Split by” window. Click on Plots, and then click Bar plot. jamovi will produce a bar graph of your mean ratings for both audio and transcript conditions. Note: It’s always a good idea to compare your graph to the descriptive statistics to make sure it looks right. Another Important Note: You cannot simply copy and paste the graph from jamovi into a paper that requires APA-formatting. Be sure to use/model the other resources provided to you so as to create properly formatted graphs for your course assignments. 5.7.4 Optional exercises (good practice and review for the take-home final exam) At this point, you’ve covered everything you need to successfully complete the homework assignment below. However, there are a number of different analyses we can practice with this dataset. This section walks you through some optional analyses to consolidate what we’ve already covered as well as add breadth. If you’re running out of time, skip down to the Homework now. You can return to these exercises later (i.e., when studying). 5.7.4.1 Using a cut point to define groups for an independent t-test Sometimes you will see groups defined with a non-nominal independent variable. For example, we might talk about defining countries as “overweight” or “not overweight” depending on whether 50% of their population was classified as overweight. The rate of overweight is known for each country, but we can divide the countries into two groups at an arbitrary cut point (in this case, a rate of 50%). Aside: This is a good example of how an ordinal, interval, or ratio variable might be considered to have distinct categories - you have to define the boundaries of the categories yourself first. A commonly used cut point is the median value (this is called a “median split”). Let’s use the example of age in the current dataset. You can find the median value of age in different ways. Let’s go with a familiar path: Click Analyses, then Exploration, and then Descriptive Statistics. Move age to the “Variables” filed. If the median were not showing in the table visible in the Results panel, we could click Statistics and select Median . The first output table contains the median: We can use the median of 29 as the cut point. We’ll be running an independent t-test to determine whether there is a significant difference in intellect between candidates under 29 years old and over 29 years old. First, we will need to transform the age variable. Click Data, then Add, and then either Insert or Append. Notice that when you use Insert, the new, transformed variable is added to the left of whichever variable you have highlighted or were last working in (so I highlighted gender). When you use Append, the new, transformed variable is added to the far right of all the variables. After clicking the commands to get the transformed variable, be sure to name the variable and to write a description. Select the Source variable, by clicking on the drop-down menu and selecting age. Then, create a rule for jamovi to follow to populate the new variable column. To do so, click on using transform and Create New Transform. A new panel will pop up and we will enter our transform rule here. First, we should name the transformation; we might use AgeMedSplit for the transformation name. Next, we must write the recoding rule. Click on Add recode condition. Since our median is 29, we might show that if our source variable has data that is equal to or less than 29, it should be recoded as a 1 which we will consider as a younger age group. The second part of the recoding rule will indicate what code we want to use if the first part of the rule is not true. Let’s use 2 as our other code, for an older age group. We can also indicate that the “Measure type” is nominal; we have younger and older groups. Clarifying the scale of measurement is an important step as you want to use this transformed variable as a grouping variable later. Click the downward facing arrow to close the transformation window. Click the upward facing arrow to close the transformed variable window. Having split the data by age group, we can now run the t-test on intellect. (Question: When considering the experimental design, would you say these age groups are manipulated or measured?) Click Analyses, T-Tests, and Independent Samples T-Test. Move intellect into the “Dependent Variables” field by highlighting the variable and using the arrow. Move your newly created, the transformed variable, into the “Grouping Variable” field in much the same way. In this image, you will see I named the transformed variable AgeGroups_YO. Remember to click Descriptives, Effect size, and the 95% Confidence interval under “Additional Statistics” to get the Descriptives table and Welch’s so that you can report the t-test without worrying whether or not the assumptions of homogeneity of variance and normality have been violated. You can also click to request these tests: Homogeneity test and Normality test. Practice writing a sentence describing the results, and then compare it to #1 in the “Example answers to practice problems” below. 5.7.4.2 Review: Correlation Let’s say you had a different research question: Is the age of the candidate correlated with intellect ratings? You could answer this question with the same variables analyzed in the section above, but using correlation instead of an independent t-test. Click Analyses, Regression, and Correlation Matrix. Then, move age and intellect into the untitled box at the right of the pop-up screeen: In the Results panel, the output table should look as follows: Write a sentence describing the results of this test. Compare your answer to #2 in the “Example answers to practice problems” below. Now, assume you are in the mood to do some exploratory data analysis. We can run multiple bivariate correlations at the same time in the same dialog. Click Analyses, then Regression, and then Correlation Matrix again. To the untitled variables box at the right, add age, time, wordcount, intellect, and impression: In the Results panel, the output table contains the r- and p-values for each possible pair of the five variables: By default, jamovi does not flag significant correlations. Be sure to review the p-values careful and compare them to the alpha level you set. How many significant correlations do you identify in the correlation matrix? If you would like jamovi to flag significant correlations, you can click Flag significant correlations under “Additional options.” Under the correlation matrix that appears in the Results panel, you will notice a note. If the p-value is under .05, jamovi will flag the correlation coefficient as * (significant at the .05 level); if the p-value is less than .01, SPSS will flag it as ** (significant at the .01 level); and if the p-value is less than .001, SPSS will flag it as *** (significant at the .001 level). Let’s pick a few pairs of variables and make scatterplots. We have a good range of different correlations in this table, so we can use these data to practice identifying correlations of different strengths. Click Analyses, Exploration, and then Scatterplot…. Move intellect into the Y-Axis and age into the X-Axis. These commands should produce a scatterplot in the Results panel. Repeat for all correlations with intellect, using intellect on the Y axis each time to make it easier to compare to the example answers below (#3). Compare the pattern of dots in each scatterplot to the r-values reported in the tables. Can you see the differences between the plots? Can you tell from the scatterplots whether we have violated any of the assumptions of Pearson’s r (i.e., linearity, no outliers)? 5.7.5 Example answers to practice problems Intellect ratings for candidates aged 29 or younger (M = 5.33, SD = 1.94) were not significantly different from intellect ratings for candidates over age 29 (M = 5.88, SD = 2.28), as demonstrated by an independent t-test [t(29.7) = -0.74, p &gt; .05]. Note: If you included Cohen’s d, the value was -0.26, but we often don’t report effect size if the effect was not significant. Intellect ratings were not significantly correlated with the age of the candidates, r = .05, p &gt; .05. You should have created four scatterplots. They are included below as well as some notes about each. For the correlation between age and intellect, we found r was very close to 0, at .05. This is reflected in the pattern of dots, which are spread fairly uniformly across the entire plot. There are no concerns with violating the assumption of linearity on this plot. There are also no outliers. For the correlation between time and intellect, we found r was also close to 0 but negative, at -.07. It is harder to link the r with the plot in this case because of the two dots far to the right in the plot. These might be outliers and could be investigated further, but how to do so is not covered in PSYC 292. The correlation between wordcount and intellect was r = -.24. This is a fairly weak correlation but if you focus on the cluster of dots on the left, you can get the impression that there are more dots in the top left and bottom right than the other two quadrants. The dot to the far right might be an outlier and could be investigated further, but how to do so is not covered in PSYC 292. For impression and intellect, a correlation of r = .83 was observed. In the scatterplot, you can see the dots cluster around an imaginary line that goes from the bottom left corner to the top left corner. There are no concerns that the assumption of linearity has been violated. There is also no evidence of outliers. 5.7.6 Lab Homework #7 Using the data collected in PSYC 291, perform a median split on the Time 2 alcohol consumption variable. Do people who are high consumers of alcohol experience different levels of anxiety at Time 2 (i.e., during midterms) compared to low consumers of alcohol? Conduct the appropriate t-test. What can you conclude? Write your answers in APA format, including the 95% confidence interval and effect size (Cohen’s d). Using APA format, graph the data. 5.7.7 Practice Problems Use the same data file from this lab’s tutorial to test whether intellect ratings were different between the gender categories (use alpha = .05). Which gender category had higher intellect ratings? Was this difference significant? What was the effect size? Report your result in a sentence or two, using the example and guidelines above to help with the format and structure. Graph this result (including SEM error bars) as a bar graph. Using the EngageNS data, run an independent samples t-test to examine whether people who volunteer in their community (variable name=VOLUNTEER; 1=yes, 2=no) report feeling higher perceptions of belonging in the community (variable name = BELONGING). Run a second independent-samples t-test to examine whether volunteers report feeling more satisfied with their well-being (CIW_WELLB). What can you conclude from each t-test? Write your answers in APA format, including the 95% confidence intervals and effect sizes (Cohen’s d). Using APA format, graph the data (Note that you will need to make up separate graphs to report the result of each of the t-tests). Test whether there is a correlation between BELONGING and CIW_WELLB). Using the EngageNS data, run 3 separate independent samples t-tests to examine whether people who were born in Canada (BORN_CAN; 1=yes, 2=no) experience different levels of a) discrimination (DISCRIM1) due to their ethnicity/race/skin colour, b) life satisfaction (LIFESAT), and c) job security (SECURITY) than those not born in Canada. What can you conclude from each t-test? Write your answers in APA format, including the 95% confidence intervals and effect sizes (Cohen’s d). Using APA format, graph the data (Note that you will need to make up separate graphs to report the result of each of the t-tests). Are there any correlations between DISCRIM1, LIFESAT, and SECURITY? Using the EngageNS data, run 3 separate independent samples t-tests to examine whether people who have internet access at home (INTERNET; 1=yes, 2=no) report different levels of a) work-life balance (WL_BALANCE), b) reading books for pleasure (HM_READ), and c) playing board games/cards with family/friends (HM_CARDS) than those who do not have internet access at home. What can you conclude from each t-test? Write your answers in APA format, including the 95% confidence intervals and effect sizes (Cohen’s d). Using APA format, graph the data (Note that you will need to make up separate graphs to report the result of each of the t-tests). Are there any correlations between WL_BALANCE, HM_READ, and HM_CARDS? Using the data collected in PSYC 291, test whether there are differences in alcohol consumption at both Time 1 and Time 2 between students who live on campus and those who live off campus. Note that you will have to conduct two independent samples t-tests – one for Time 1 and one for Time 2. What can you conclude from each t-test? Write your answers in APA format, including the 95% confidence intervals and effect sizes (Cohen’s d). Using APA format, graph the data (Note that you will need to make up separate graphs to report the result of each of the t-tests). Is there a correlation between TIME 1 and TIME 2 alcohol consumption? Using the data collected in PSYC 291, test whether those who have family to visit at least twice a month experience less anxiety than those who do not have family they can visit. What can you conclude from each t-test? Write your answers in APA format, including the 95% confidence intervals and effect sizes (Cohen’s d). Using APA format, graph the data. Using the data collected in PSYC 291, perform a median split on the Time 1 total self-care variable. Do people who engage in high levels of self-care experience different levels of perceived stress at Time 2 (i.e., during midterms) than those who engage in low levels of self-care? Conduct the appropriate t-test. What can you conclude? Write your answers in APA format, including the 95% confidence interval and effect size (Cohen’s d). Using APA format, graph the data. TBD - question on the experiment "],["lab-6-correlation.html", "Chapter 6 Lab 6: Correlation 6.1 General Goals 6.2 R 6.3 Excel 6.4 SPSS 6.5 JAMOVI", " Chapter 6 Lab 6: Correlation If … we choose a group of social phenomena with no antecedent knowledge of the causation or absence of causation among them, then the calculation of correlation coefficients, total or partial, will not advance us a step toward evaluating the importance of the causes at work. —Sir Ronald Fisher In lecture and in the textbook, we have been discussing the idea of correlation. This is the idea that two things that we measure can be somehow related to one another. For example, your personal happiness, which we could try to measure say with a questionnaire, might be related to other things in your life that we could also measure, such as number of close friends, yearly salary, how much chocolate you have in your bedroom, or how many times you have said the word Nintendo in your life. Some of the relationships that we can measure are meaningful, and might reflect a causal relationship where one thing causes a change in another thing. Some of the relationships are spurious, and do not reflect a causal relationship. In this lab you will learn how to compute correlations between two variables in software, and then ask some questions about the correlations that you observe. 6.1 General Goals Compute Pearson’s r between two variables using software Discuss the possible meaning of correlations that you observe 6.1.1 Important Info We use data from the World Happiness Report. A .csv of the data can be found here: WHR2018.csv 6.2 R In this lab we use explore to explore correlations between any two variables, and also show how to do a regression line. There will be three main parts. Getting r to compute the correlation, and looking at the data using scatter plots. We’ll look at some correlations from the World Happiness Report. Then you’ll look at correlations using data we collect from ourselves. It will be fun. 6.2.1 cor for correlation R has the cor function for computing Pearson’s r between any two variables. In fact this same function computes other versions of correlation, but we’ll skip those here. To use the function you just need two variables with numbers in them like this: x &lt;- c(1,3,2,5,4,6,5,8,9) y &lt;- c(6,5,8,7,9,7,8,10,13) cor(x,y) ## [1] 0.76539 Well, that was easy. 6.2.1.1 scatterplots Let’s take our silly example, and plot the data in a scatter plot using ggplot2, and let’s also return the correlation and print it on the scatter plot. Remember, ggplot2 wants the data in a data.frame, so we first put our x and y variables in a data frame. library(ggplot2) # create data frame for plotting my_df &lt;- data.frame(x,y) # plot it ggplot(my_df, aes(x=x,y=y))+ geom_point()+ geom_text(aes(label = round(cor(x,y), digits=2), y=12, x=2 )) Wow, we’re moving fast here. 6.2.1.2 lots of scatterplots Before we move on to real data, let’s look at some fake data first. Often we will have many measures of X and Y, split between a few different conditions, for example, A, B, C, and D. Let’s make some fake data for X and Y, for each condition A, B, C, and D, and then use facet_wrapping to look at four scatter plots all at once x&lt;-rnorm(40,0,1) y&lt;-rnorm(40,0,1) conditions&lt;-rep(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;), each=10) all_df &lt;- data.frame(conditions, x, y) ggplot(all_df, aes(x=x,y=y))+ geom_point()+ facet_wrap(~conditions) 6.2.1.3 computing the correlations all at once We’ve seen how we can make four graphs at once. Facet_wrap will always try to make as many graphs as there are individual conditions in the column variable. In this case there are four, so it makes four. Notice, the scatter plots don’t show the correlation (r) values. Getting these numbers on there is possible, but we have to calculate them first. We’ll leave it to you to Google how to do this, if it’s something you want to do. Instead, what we will do is make a table of the correlations in addition to the scatter plot. We again use dplyr to do this: OK, we are basically ready to turn to some real data and ask if there are correlations between interesting variables…You will find that there are some… But before we do that, we do one more thing. This will help you become a little bit more skeptical of these “correlations.” 6.2.1.4 Chance correlations As you learned from the textbook. We can find correlations by chance alone, even when there is no true correlation between the variables. For example, if we sampled randomly into x, and then sampled some numbers randomly into y. We know they aren’t related, because we randomly sampled the numbers. However, doing this creates some correlations some of the time just by chance. You can demonstrate this to yourself with the following code. It’s a repeat of what we already saw, jut with a few more conditions added. Let’s look at 20 conditions, with random numbers for x and y in each. For each, sample size will be 10. We’ll make the fake data, then make a big graph to look at all. And, even though we get to regression later in the lab, I’ll put the best fit line onto each scatter plot, so you can “see the correlations.” x&lt;-rnorm(10*20,0,1) y&lt;-rnorm(10*20,0,1) conditions&lt;-rep(1:20, each=10) all_df &lt;- data.frame(conditions, x, y) ggplot(all_df, aes(x=x,y=y))+ geom_point()+ geom_smooth(method=lm, se=FALSE)+ facet_wrap(~conditions)+ theme_classic() You can see that the slope of the blue line is not always flat. Sometimes it looks like there is a correlation, when we know there shouldn’t be. You can keep re-doing this graph, by re-knitting your r Markdown document, or by pressing the little green play button. This is basically you simulating the outcomes as many times as you press the button. The point is, now you know you can find correlations by chance. So, in the next section, you should always wonder if the correlations you find reflect meaningful association between the x and y variable, or could have just occurred by chance. 6.2.2 World Happiness Report Let’s take a look at some correlations in real data. We are going to look at responses to a questionnaire about happiness that was sent around the world, from the world happiness report 6.2.2.1 Load the data We load the data into a data frame. Reminder, the following assumes that you have downloaded the RMarkdownsLab.zip file which contains the data file in the data folder. library(data.table) whr_data &lt;- fread(&#39;data/WHR2018.csv&#39;) You can also load the data using the following URL library(data.table) whr_data &lt;- fread(&quot;https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/WHR2018.csv&quot;) 6.2.2.2 Look at the data library(summarytools) view(dfSummary(whr_data)) You should be able to see that there is data for many different countries, across a few different years. There are lots of different kinds of measures, and each are given a name. I’ll show you some examples of asking questions about correlations with this data, then you get to ask and answer your own questions. 6.2.2.3 My Question #1 For the year 2017 only, does a country’s measure for “Freedom to make life choices” correlate with that country’s measure for \" Confidence in national government\"? Let’s find out. We calculate the correlation, and then we make the scatter plot. cor(whr_data$`Freedom to make life choices`, whr_data$`Confidence in national government`) ## [1] NA ggplot(whr_data, aes(x=`Freedom to make life choices`, y=`Confidence in national government`))+ geom_point()+ theme_classic() Interesting, what happened here? We can see some dots, but the correlation was NA (meaning undefined). This occurred because there are some missing data points in the data. We can remove all the rows with missing data first, then do the correlation. We will do this a couple steps, first creating our own data.frame with only the numbers we want to analyse. We can select the columns we want to keep using select. Then we use filter to remove the rows with NAs. library(dplyr) smaller_df &lt;- whr_data %&gt;% select(country, `Freedom to make life choices`, `Confidence in national government`) %&gt;% filter(!is.na(`Freedom to make life choices`), !is.na(`Confidence in national government`)) cor(smaller_df$`Freedom to make life choices`, smaller_df$`Confidence in national government`) ## [1] 0.4080963 Now we see the correlation is .408. Although the scatter plot shows the dots are everywhere, it generally shows that as Freedom to make life choices increases in a country, that country’s confidence in their national government also increase. This is a positive correlation. Let’s do this again and add the best fit line, so the trend is more clear, we use geom_smooth(method=lm, se=FALSE). I also change the alpha value of the dots so they blend it bit, and you can see more of them. # select DVs and filter for NAs smaller_df &lt;- whr_data %&gt;% select(country, `Freedom to make life choices`, `Confidence in national government`) %&gt;% filter(!is.na(`Freedom to make life choices`), !is.na(`Confidence in national government`)) # calcualte correlation cor(smaller_df$`Freedom to make life choices`, smaller_df$`Confidence in national government`) ## [1] 0.4080963 # plot the data with best fit line ggplot(smaller_df, aes(x=`Freedom to make life choices`, y=`Confidence in national government`))+ geom_point(alpha=.5)+ geom_smooth(method=lm, se=FALSE)+ theme_classic() 6.2.2.4 My Question #2 After all that work, we can now speedily answer more questions. For example, what is the relationship between positive affect in a country and negative affect in a country. I wouldn’t be surprised if there was a negative correlation here: when positive feelings generally go up, shouldn’t negative feelings generally go down? To answer this question, we just copy paste the last code block, and change the DVs to be Positive affect, and Negative affect # select DVs and filter for NAs smaller_df &lt;- whr_data %&gt;% select(country, `Positive affect`, `Negative affect`) %&gt;% filter(!is.na(`Positive affect`), !is.na(`Negative affect`)) # calcualte correlation cor(smaller_df$`Positive affect`, smaller_df$`Negative affect`) ## [1] -0.3841123 # plot the data with best fit line ggplot(smaller_df, aes(x=`Positive affect`, y=`Negative affect`))+ geom_point(alpha=.5)+ geom_smooth(method=lm, se=FALSE)+ theme_classic() Bam, there we have it. As positive affect goes up, negative affect goes down. A negative correlation. 6.2.3 Generalization Exercise This generalization exercise will explore the idea that correlations between two measures can arise by chance alone. There are two questions to answer. For each question you will be sampling random numbers from uniform distribution. To conduct the estimate, you will be running a simulation 100 times. The questions are: Estimate the range (minimum and maximum) of correlations (using pearons’s r) that could occur by chance between two variables with n=10. Estimate the range (minimum and maximum) of correlations (using pearons’s r) that could occur bychance between two variables with n = 100. Use these tips to answer the question. Tip 1: You can use the runif() function to sample random numbers between a minimum value, and maximum value. The example below sample 10 (n=10) random numbers between the range 0 (min = 0) and 10 (max=10). Everytime you run this code, the 10 values in x will be re-sampled, and will be 10 new random numbers x &lt;- runif(n=10, min=0, max=10) Tip 2: You can compute the correlation between two sets of random numbers, by first sampling random numbers into each variable, and then running the cor() function. x &lt;- runif(n=10, min=0, max=10) y &lt;- runif(n=10, min=0, max=10) cor(x,y) ## [1] -0.5677794 Running the above code will give different values for the correlation each time, because the numbers in x and y are always randomly different. We might expect that because x and y are chosen randomly that there should be a 0 correlation. However, what we see is that random sampling can produce “fake” correlations just by chance alone. We want to estimate the range of correlations that chance can produce. Tip 3: One way to estimate the range of correlations that chance can produce is to repeat the above code many times. For example, if you ran the above code 100 times, you could save the correlations each time, then look at the smallest and largest correlation. This would be an estimate of the range of correlations that can be produced by chance. How can you repeat the above code many times to solve this problem? We can do this using a for loop. The code below shows how to repeat everything inside the for loop 100 times. The variable i is an index, that goes from 1 to 100. The saved_value variable starts out as an empty variable, and then we put a value into it (at index position i, from 1 to 100). In this code, we put the sum of the products of x and y into the saved_value variable. At the end of the simulation, the save_value variable contains 100 numbers. The min() and max() functions are used to find the minimum and maximum values for each of the 100 simulations. You should be able to modify this code by replacing sum(x*y) with cor(x,y). Doing this will allow you to run the simulation 100 times, and find the minimum correlation and maximum correlation that arises by chance. This will be estimate for question 1. To provide an estimate for question 2, you will need to change n=10 to n=100. saved_value &lt;- c() #make an empty variable for (i in 1:100){ x &lt;- runif(n=10, min=0, max=10) y &lt;- runif(n=10, min=0, max=10) saved_value[i] &lt;- sum(x*y) } min(saved_value) ## [1] 103.145 max(saved_value) ## [1] 460.2103 6.2.4 Writing assignment Answer the following questions with complete sentences. When you have finished everything. Knit the document and hand in your stuff (you can submit your .RMD file to blackboard if it does not knit.) Imagine a researcher found a positive correlation between two variables, and reported that the r value was +.3. One possibility is that there is a true correlation between these two variables. Discuss one alternative possibility that would also explain the observation of +.3 value between the variables. Explain the difference between a correlation of r = .3 and r = .7. What does a larger value of r represent? Explain the difference between a correlation of r = .5, and r = -.5. 6.3 Excel How to do it in Excel 6.4 SPSS In this lab, we will use SPSS to calculate the correlation coefficient. We will focus on the most commonly used Pearson’s coefficient, r. We will learn how to: Calculate the Pearson’s r correlation coefficient for bivariate data Produce a correlation matrix, reporting Pearson’s r for more than two variables at a time Produce a scatterplot Split a data file for further analysis Let’s first begin with a short data set we will enter into a new SPSS data spreadsheet. Remember, in order to calculate a correlation, you need to have bivariate data; that is, you must have at least two variables, x and y. You can have more than two variables, in which case we can calculate a correlation matrix, as indicated in the section that follows. 6.4.1 Correlation Coefficient for Bivariate Data: Two Variables Let’s use the following data set: {x= 1, 3, 2, 5, 4, 6, 5, 8, 9} {y= 6, 5, 8, 7, 9, 7, 8, 10, 13}. Notice there are two variables, x and y. Enter these into SPSS and name them appropriately. Next, click Analyze, then Correlate, then Bivariate: The next window will ask you to select variables to correlate. Since we have two (x and y) move them both from the left-hand field to the right-hand field using the arrow. Notice that in this window, Pearson is selected. This is the default setting (and the one we want), but notice there are other ways to calculate the correlation between variables. We will stick with Pearson’s correlation coefficient for this course. Now, click OK. SPSS will produce an output table containing the correlation coefficient requested. Notice that the table is redundant; it gives us the correlation between x and y, the correlation between y and x, the correlation between x and itself, and the correlation between y and itself. Any variable correlated with itself will result in an r of 1. The Pearson r correlation between variables x and y is .765. 6.4.2 Correlation Matrix In the event that you have more than two variables in your spreadsheet, and would like to evaluate correlations between several variables taken two at a time, you need not re-run the correlations in SPSS repeatedly. You can, in fact, enter multiple variables into the correlation window and obtain a correlation matrix–a table showing every possible bivariate correlation amongst a group of variables. To illustrate how this is done, let’s add a new variable to our existing spreadsheet: variable z, {z= 1, 4, 2, 9, 5, 7, 12, 5, 3} From here, go to Analyze, then Correlate, then Bivariate: Next, you will encounter the window that asks you to indicate which variables to correlate. Select all three variables (x, y, and z) and move them to the right-hand field using the arrow. Click OK. SPSS will produce an output table that contains correlations for every pairing of our three variables, along with the correlations of each variable with itself. According to this output: The correlation coefficient between variables x and y is .765 The correlation coefficient between variables x and z is .294 The correlation coefficient between variables y and z is -.080 6.4.3 Correlation and Scatterplots To accompany the calculation of the correlation coefficient, the scatterplot is the relevant visualization tool. Let’s use data from The World Happiness Report, a questionnaire about happiness. Here is a link to the file named WHR2018.sav. Using this data, let’s answer the following question: does a country’s measure for Freedom to make life choices correlate with that country’s measure for Confidence in national government? Let’s find the correlation coefficient between these variables first. Go to Analyze, then Correlate, then Bivariate: Next, a window will appear asking for the variables to be correlated. Go through the list on the left and find Freedom to make life choices as well as Confidence in national government. Move both of these variables to the field on the right using the arrow. Click OK. SPSS will produce a correlation table. Based on this output, the correlation between Freedom to make life choices and Confidence in national government is .408. Let’s continue to create the scatterplot for this data. Go to Graphs, then Legacy Dialogs, then Scatter… In the next window, choose Simple, then Define: Next, move your two variables (Freedom to make life choices and Confidence in national government) into the x-axis and y-axis fields. Again, it does not matter which variable goes where, for now. Click OK. SPSS will produce a scatterplot of your data, as follows: You can keep this scatterplot as it is, or, you can edit it to include a straight line that best fits the data points. This line is known as the best-fitting line as it minimizes the distance from it to all the data. To edit the scatterplot double click on the graph and a window labeled Chart Editor should appear: In this window, find the button at the top that reads Fit Line at Total when you hover your mouse over it. Below, I have highlighted it for clarity: Press this button and you will see a new menu. Make sure Linear is selected and click Apply. Next, exit from the Chart Editor. This means you will hit the X in the corner of the window. You will find that the graph in your output window has now updated and has a line drawn on it. This scatterplot is very important. The distance between the line and the data points is indicative of the strength of the correlation coefficient; they are directly related. For example, if the data were more clustered or tighter to the line, the correlation would be stronger. If the data points are more spread out and far from the line, the correlation is weaker. 6.4.4 Splitting a File What if we asked the question: for the year 2017 only, does a country’s measure for Freedom to make life choices correlate with that country’s measure for Confidence in national government? Notice that this question is asking us to find the correlation between the same two variables we used in the previous example, but only in the case where the year is 2017. To acheive this, we’re going to utilize a function called splitting. Splitting takes the file as a whole, and sets it up so that every analysis is done on some subset of the data. For example, if we split our data by year and calculate a correlation coefficient, SPSS will find Pearson r for only 2017, and another for only 2016, and so on. In order to split the data, we go to the top menu and choose Data, then Split file… In the next window, you must select Organize output by groups and then specify which variable will be used to split the data. Select year and move it to the right-hand field using the arrow. Click OK. Notice that this will cause the output window to produce some text indicating that you have split your file. You can ignore this and go back to your data window. From here, any analysis you choose to do will be done separately for each year’s worth of data. Let’s calculate the correlation coefficient, as usual. Click Analyze, then Correlate, then Bivariate: In the next window, select the variables to be used (they will be the same as in the last example). Click OK. Notice that in the output window you will see a bunch of correlation tables (13 of them to be exact), one for each year. Scroll down and find the table with the heading “year = 2017.” That’s the table we need in order to answer our question: This table indicates that, if we only look at the year 2017, the correlation coefficient between Freedom to make life choices and Confidence in national government is .442. It is VERY important to remember that once you have split a file, every analysis that follows the split will be done on the split variable. If you want to go back to performing analyses and calculating statistics for the data as a whole, you must UNSPLIT your data file (or undo the split). To do this, go to Data, then Split file… Then make sure to select Analyze all cases, do not create groups and click OK. 6.4.5 Practice Problems For the year 2005 ONLY, find the correlation between “perceptions of corruption” and “positive affect.” Create a scatterplot to visualize this relationship. What are your conclusions about the relationship between affect and perceived corruption? Is this surprising to you? What has happened to log GDP (consider this a measure of GDP) in the United States ONLY with time (as the year has increased)? Explain this relationship and provide a scatterplot. Which country (or countries) have seen a more consistent and strong increase in log GDP over time? Which country (or countries) have seen a decrease over time? 6.5 JAMOVI This section is copied almost verbatim, with some editorial changes, from Answering questions with data: The lab manual for R, Excel, SPSS and JAMOVI, Lab 3, Section 3.4, SPSS, according to its CC license. Thank you to Crump, Krishnan, Volz, &amp; Chavarga (2018). In this lab, we will use jamovi to calculate the correlation coefficient. We will focus on the most commonly used Pearson’s coefficient, r. We will learn how to: Calculate the Pearson’s r correlation coefficient for bivariate data Produce a correlation matrix, reporting Pearson’s r for more than two variables at a time Produce a scatterplot Applying a filter to the data set for further analysis Let’s first begin with a short data set we will enter into a new jamovi data spreadsheet. Remember, in order to calculate a correlation, you need to have bivariate data; that is, you must have at least two variables, x and y. You can have more than two variables, in which case we can calculate a correlation matrix, as indicated in the section that follows. 6.5.1 Correlation Coefficient for Bivariate Data: Two Variables Let’s use the following data set: {x= 1, 3, 2, 5, 4, 6, 5, 8, 9} {y= 6, 5, 8, 7, 9, 7, 8, 10, 13}. Notice there are two variables, x and y. Enter these into jamovi, name them appropriately, and be sure to indicate, in the Analyze, that these data are measured on a continuous scale. (REMEMBER: One assumption of Pearson’s correlation is that the variables are measured on at least an interval scale. That means you should not use Pearson’s correlation with variables that are measured on an ordinal scale. Spearman’s correlation may be helpful if you have variables measured on an ordinal scale.) Remember to use the upward facing arrow or the Settings button to close the Analyze pop-up window. Next, click Analyses, Regression, and Correlation Matrix: In the pop-up window, you will select variables to correlate. Since we have two (x and y) move them both from the left-hand field to the right-hand field by highlighting them and using the arrow. Notice that in this window, Pearson is selected. This is the default setting (and the one we want), but notice there are other ways to calculate the correlation between variables. We will stick with Pearson’s correlation coefficient for now. In the Results panel on the left, jamovi will produce an output table containing the correlation coefficient requested. (If you are familiar with SPSS, you may notice that the jamovi table is unlike the SPSS table in that the jamovi correlation matrix does not have the redundant information in the top and bottom triangles of the matrix; jamovi gives us only the correlation between x and y in the bottom portion of the table. Note: Any variable correlated with itself will result in an r of 1.) The Pearson r correlation between variables x and y is .765. 6.5.2 Correlation Matrix In the event that you have more than two variables in your spreadsheet, and would like to evaluate correlations between several variables taken two at a time, you need not re-run the correlations in jamovi repeatedly. You can, in fact, enter multiple variables into the correlation window and obtain a correlation matrix–a table showing every possible bivariate correlation amongst a group of variables. To illustrate how this is done, let’s add a new variable to our existing spreadsheet: variable z, {z= 1, 4, 2, 9, 5, 7, 12, 5, 3}. From here, go to Analyses, then Regression, and then Correlation Matrix: Next, you will encounter the window that asks you to indicate which variables to correlate. Select all three variables (x, y, and z) by highlighting them, and move them to the right-hand field using the arrow. jamovi will produce an output table in the Results panel to the right that contains correlations for every pairing of our three variables. You should see three correlation coefficients and three associated p-values. According to this output: The correlation coefficient between variables x and y is .765; that is, Pearson’s r for variables x and y is .765. The correlation coefficient between variables x and z is .294; Pearson’s r for x and z is .294. The correlation coefficient between variables y and z is -.080; Pearson’s r for y and z is -.080. To further our understanding of these correlation coefficients, we should also look to the p-values associated with each coefficient to decide if the correlation is significant or non-significant. Pearson’s r for variables x and y is .765. The p-value is .02 which is less than a conventional alpha level of .05, so we would consider this result to be significant. We might write: A Pearson’s correlation was performed, and variables x and y were found to be significantly correlated, r = .77, p = .02. Pearson’s r for x and z is .294. The p-value is .44 which is greater than a conventional alpha level of .05, so we would consider this result to be non-significant. We might write: A Pearson’s correlation was performed, and no significant correlation was found between variables x and z, r = .29, p &gt; .05. Pearson’s r for y and z is -.080. The p-value is .84 which is greater than a conventional alpha level of .05, so we would consider this result to be non-significant. We might write: A Pearson’s correlation was performed, and no significant correlation was found between variables y and z, r = -.08, p &gt; .05. 6.5.3 Correlation and Scatterplots To accompany the calculation of the correlation coefficient, the scatterplot is the relevant visualization tool. Let’s use data from EngageNS. Using this data, let’s answer the following question: Does Number of hours per week spent working at main job correlate with Home activity participation on a typical day: Playing computer games? Let’s find the correlation coefficient between these variables first. Go to Analyses, then Regression, and then Correlation Matrix: Next, a window will appear asking for the variables to be correlated. Use the search function to speed up your identification of those variables. Rather than scrolling through all of the variables in the list on the left, look into the Data Dictionary to find the variable names and search for them. Move both of these variables to the field on the right using the arrow. In the Results panel, jamovi will produce a correlation table. Based on this output, the correlation between WORKHR and HM_CGAME is -.042. The negative sign simply indicates that as the scores on one variable increase, the scores on the other variable decrease; the variables are negatively correlated. Looking at the p-value, we see it is .001, which is less than our commonly used alpha levels. This correlation is significant. We might communicate this information like this: A Pearson’s correlation analysis was performed, and a significant negative correlation was found between Number of hours per week spent working at main job and Home activity participation on a typical day: Playing computer games, r = -.04, p = .001. 6.5.3.1 Adding the Scatterplot module to jamovi Before you can request a scatterplot in jamovi, you must add Scatterplot as a module. To do so, click on the addition sign which is white with a blue trim that has the word “Modules” under the sign. Click jamovi library. Under the “Available” tab, you should see a module called scatr. Click to INSTALL it. When it is installed, it will appear in your Exploration menu. 6.5.3.2 Getting a visual of the correlation Let’s continue to create the scatterplot for this data. Go to Analyses, then Exploration, and then Scatterplot. In the next window, choose Simple, then Define: Next, move your two variables (WORKHR and HM_CGAMES) into the x-axis and y-axis fields. Again, it does not matter which variable goes where, for now. (Remember to use the search function to speed up your search for the variables to include.) In the Results panel, jamovi will produce a scatterplot of your data, as follows: You can keep this scatterplot as it is, or, you can edit it to include a straight line that best fits the data points. This line is known as the best-fitting line as it minimizes the distance from it to all the data. To include the line of best fit, click on Linear under the Regression Line heading. You will find that the graph in your Results panel has now updated and has a line drawn on it. This line of best fit on the scatterplot is barely visible. Typically, the distance between the line and the data points is indicative of the strength of the correlation coefficient; they are directly related. For example, if the data were more clustered or tighter to the line, the correlation would be stronger. If the data points are more spread out and far from the line, the correlation is weaker. In this case, although there are many data points clustered around the line, we also see there are a number of data points that are quite far from the line. This is a moderate correlation. We also see that this negative correlation is depicted by a line that falls to the left (i.e., a line with a negative slope). 6.5.4 Applying a Filter What if we asked the question: For residents of the Antigonish and Guysborough regions only, does Number of hours per week spent working at main job correlate with Home activity participation on a typical day: Playing computer games? Notice that this question is asking us to find the correlation between the same two variables we used in the previous example, but only in the case where the REGION is equal to 4. To achieve this, we’re going to utilize a function called filtering. Filtering the data set makes only those cases that meet our criteria available for use in the analysis to be run. For example, if we filter our data by region and calculate a correlation coefficient, jamovi will find Pearson r for only Antigonish and Guysborough, and not for other regions. In order to filter the data, we go to the top menu and choose Data and then Filter. In the next window, you must set up the filter; indicate which cases will be used. Under “Filter 1,” click on the formula editor, the fx button. Double click on the variable name (REGION), and it will be incorporated into the filter. Then, use two equal signs, and enter the code for the region of interest (4). Notice that this will cause a new column in the spreadsheet wherein a green checkmark indicates the case/participant will be included in the analysis and a red “x” indicates the case/participant will be excluded from the analysis. From here, any analysis you choose to do will be done for only the cases match the filter. Let’s calculate the correlation coefficient, as usual. Click Analyses, then Regression, and then Correlation Matrix: In the next window, select the variables to be used (they will be the same as in the last example). Notice that in the output now shows a correlation matrix with different results than you saw when you ran the correlation with the entire data set: This table indicates that, if we only look at the Antigonish-Guysborough region, the correlation coefficient between between WORKHR and HM_CGAME is .012 and the p-value is .80. Comparing this p-value to an alpha level of .05, we would say this correlation is non-significant. Again, you may want to inspect the scatterplot to get a visual representation of this correlation coefficient for the data collected from participants in the Antigonish-Guysborough region. Challenge: Give the creation of this scatterplot a try on your own. See if your graph matches the one depicted below. 6.5.5 Removing the Filter It is VERY important to remember that once you have applied a filter, every analysis will be done on the split variable. If you want to go back to performing analyses and calculating statistics for the data as a whole, you must delete the filter. To do this, you can highlight the column showing the filter in the spreadsheet, go to Data, and then Delete. You will be prompted with a question to verify that you want to delete the filter. Click Yes. 6.5.6 Homework Look at participants’ reported number of close friends and their reported time spent socializing with friends. Are these scores correlated? If so, report r and whether the correlation is significant or non-signifcant? Apply a filter so that you are looking at only the data for participants’ whose main activity is going to school (Hint: Use the data dictionary to figure out how participants’ main activities were coded.). Now, run the same correlation you looked at in #1. Are number of close friends and reported time spent socializing with friends correlated for students? Is the correlation significant? Compare these results to the results in #1. Is the correlation between number of close friends and reported time spent socializing with friends stronger or weaker for students than it is for Nova Scotians? 6.5.7 Practice Problems Use the EngageNS data to answer the following questions: Construct a scatterplot using FRIENDS on the x-axis and SOC_FRND on the y-axis to depict the results you found for the last homework question. Can you run a Pearson’s correlation analysis on the following pairs of variables? Why or why not? SEX and SLEEP? COMP_TIME and SLEEP? MAINACT and EDUCAT? Run the correlation analysis for any set(s) of variables you determined to be appropriate for using Pearson’s correlation. Report the correlation coefficient. Is it considered statistically significant? Write your results following the APA rules discussed below. Some formatting guidelines for writing results sections: All of the numbers are rounded to two decimal places, but if your p-value was .0001, it would be okay to write p &lt; .001. Italicize symbols such as p and t. There are spaces on either side of =, &gt;, or &lt; symbols. Construct the scatterplot for any set(s) of variables you determined to be appropriate for using Pearson’s correlation. What do you notice about the scatterplot? Does the slope increase or decrease? Do the dots closely follow the line of best fit? TBD: questions based on PSYC 291 survey / may want to move some from Lab 7 The follwoing three questions are copied verbatim from Answering questions with data: The lab manual for R, Excel, SPSS and JAMOVI, Lab 3, Section 3.2.4, SPSS, according to its CC license. Thank you to Crump, Krishnan, Volz, &amp; Chavarga (2018). Imagine a researcher found a positive correlation between two variables, and reported that the r value was +.3. One possibility is that there is a true correlation between these two variables. Discuss one alternative possibility that would also explain the observation of +.3 value between the variables. Explain the difference between a correlation of r = .3 and r = .7. What does a larger value of r represent? Explain the difference between a correlation of r = .5, and r = -.5. "],["lab-7-one-way-anova.html", "Chapter 7 Lab 7 One-way ANOVA 7.1 How to not think about bad memories by playing Tetris 7.2 Lab Skills Learned 7.3 Important Stuff 7.4 R 7.5 Excel 7.6 SPSS 7.7 JAMOVI", " Chapter 7 Lab 7 One-way ANOVA The analysis of variance is not a mathematical theorem, but rather a convenient method of arranging the arithmetic. —R. A. Fisher This lab is modified and extended from Open Stats Labs. Thanks to Open Stats Labs (Dr. Kevin P. McIntyre) for their fantastic work. 7.1 How to not think about bad memories by playing Tetris This lab activity uses the open data from Experiment 2 of James et al. (2015) to teach one-way ANOVA with planned comparisons. Results of the activity provided below should exactly reproduce the results described in the paper. 7.1.1 STUDY DESCRIPTION Following traumatic experiences, some people have flashbacks, which are also called “intrusive memories”\" and are characterized by involuntary images of aspects of the traumatic event. Although people often try to simply forget traumatic memories, this approach is not very effective. Instead, previous research suggests that a better approach may be to try to change aspects of the memory after it is formed. For example, some research shows that traumatic memories can be altered and weakened to the point that they are no longer intrusive. Because intrusive memories of trauma are often visual in nature, James and colleagues (2015) sought to explore whether completing a visuospatial task (e.g., Tetris) after a memory was formed would interfere with the storage of that memory, and thereby reduce the frequency of subsequent intrusions. They hypothesized that only participants who complete a visuo-spatial task after reactivation of the traumatic memories would experience a reduction in intrusive memories. In comparison, simply completing a visuo-spatial task (without reactivation) or reactivation (without a visuo-spatial task), would not reduce the occurrence intrusive memories. In other words, if you play Tetris shortly after you were remembering bad memories, playing Tetris might weaken those memories, which could cause you experience those kinds of intrusive memories less often in the future. 7.1.2 Study Methods To test their hypothesis, the authors conducted an experiment ( N = 72, n = 18 per condition). The procedure is summarized as follows: Trauma Film: All participants viewed a series of video clips of graphic violence (e.g., a person getting hit by a van while using his phone as he crosses the road) as a way to create memories that should become intrusive memories. Participants then went home and recorded the number of intrusive memories they experienced over the next 24 hours. Because this is before the experimental manipulations, all groups were predicted to have an equal occurrence of intrusive memories during the first 24-hours (called Day 0). Experimental Task: After this 24-hour period, the participants returned to the lab and completed the experimental task. The experimenters randomly assigned participants to ONE of the following conditions: No-task control: These participants completed a 10-minute music filler task. Reactivation + Tetris: These participants were shown a series of images from the trauma film to reactivate the traumatic memories (i.e., reactivation task). After a 10-minute music filler task, participants played the video game Tetris for 12 minutes. Tetris Only: These participants played Tetris for 12 minutes, but did not complete the reactivation task. Reactivation Only: These participants completed the reactivation task, but did not play Tetris. Intrusive Memories: All participants were asked to record the number of intrusive memories that they experienced over the next seven days (Days 1 to 7). After the seven days had passed, participants completed an Intrusion-Provocation Task, in which they were shown blurred images from the trauma film and asked to indicate whether the blurred image triggered an intrusive memory. 7.2 Lab Skills Learned 7.3 Important Stuff citation: James, E. L., Bonsall, M. B., Hoppitt, L., Tunbridge, E. M., Geddes, J. R., Milton, A. L., &amp; Holmes, E. A. (2015). Computer game play reduces intrusive memories of experimental trauma via re-consolidation-update mechanisms. Psychological Science, 26, 1201-1215. Link to .pdf of article Data in .csv format Data in SPSS format 7.4 R 7.4.1 Load the data Remember that any line with a # makes a comment and the code does not run. Below is how to load the .csv data from the online repository, or from a local file (you need to change the file path to where the local file is, if you downloaded it). The data contains all of the measures and conditions from Experiment 2 in the paper. library(data.table) #fread(&quot;https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv&quot;) all_data &lt;- fread(&quot;data/Jamesetal2015Experiment2.csv&quot;) 7.4.2 Inspect the dataframe This will give you a big picture of the data frame. Click the button to view it in your browser, then take a look to see what is in it. library(summarytools) view(dfSummary(all_data)) 7.4.3 Get the data you need Again we have only the data from Experiment 2, so we don’t need to get rid of any rows of the data. But we do need look at the columns to see how the independent variable and dependent variables were coded. 7.4.3.1 The independent variable There was one important independent variable, and it had four levels. The first column in the data frame is called condition, and it has four levels. The levels are 1, 2, 3, and 4 in the data-frame. These will correspond to the four levels in shown in figure: No-task control Reactivation Plus Tetris Tetris only Reactivation only Each of these refer to what subjects did after they watched the traumatic film. But, which of these correspond to the numbers 1 to 4 in the data-frame? It turns out the are in the right order, and 1 to 4 refer to: No-task control Reactivation Plus Tetris Tetris only Reactivation only Let’s do ourselves a favor and rename the levels of the Condition column with words so we know what they refer to. First, convert the Condition column to a factor, then rename the levels. Then. all_data$Condition &lt;- as.factor(all_data$Condition) levels(all_data$Condition) &lt;- c(&quot;Control&quot;, &quot;Reactivation+Tetris&quot;, &quot;Tetris_only&quot;, &quot;Reactivation_only&quot;) 7.4.3.2 The dependent variable The authors showed two figures, one where they analysed intrusive memory frequency as the mean for the week, and the other where the used intrusive memory frequency on Day 7. In this tutorial, we will do the steps to run an ANOVA on the mean for the week data, and you will do follow these steps to run another ANOVA on the Day 7 data. The mean for the week data for each subject is apparently coded in the column Days_One_to_Seven_Number_of_Intrusions. 7.4.4 Look at the data Remember before we do any analysis, we always want to “look” at the data. This first pass let’s us know if the data “look right.” For example, the data file could be messed up and maybe there aren’t any numbers there, or maybe the numbers are just too weird. In the last two labs, we saw how to show all the data we are interested in looking at in one go. We can do the same things here. For example, in one little piece of code, we can display the means in each condition, the standard errors of the mean, and the individual scores for each subject in each condition. This is a lot to look at, but it’s everything we want to look at for starters all in the same place. Looking at the data this way will also give us intuitions about what our ANOVA will tell us before we run the ANOVA. This is helpful for determining whether the results of your ANOVA are accurate or not. Let’s do it…also notice that the code is very similar to what we did for the independent t-test. In fact, all I did was copy and paste that code right here, and edited it a little bit. This is really fast, and shows the efficiency of doing things this way. library(dplyr) library(ggplot2) # get means and SEs descriptive_df &lt;- all_data %&gt;% group_by(Condition) %&gt;% summarise(means= mean(Days_One_to_Seven_Number_of_Intrusions), SEs = sd(Days_One_to_Seven_Number_of_Intrusions)/sqrt(length(Days_One_to_Seven_Number_of_Intrusions))) # Make the plot ggplot(descriptive_df, aes(x=Condition, y=means))+ geom_bar(stat=&quot;identity&quot;, aes(fill=Condition))+ # add means geom_errorbar(aes(ymin=means-SEs, # add error bars ymax=means+SEs), width=.1) + geom_point(data=all_data, aes(x=Condition, y=Days_One_to_Seven_Number_of_Intrusions), alpha=.5)+ geom_point(alpha=.25)+ ylab(&quot;Intrusive Memories (Mean for Week)&quot;) There we have it. A nice graph showing us everything. We can see there was a lot of differences at the level of individual subjects. Some subjects had a mean of 15 intrusive memories for the week. Some had 0. Lots of differences. And, to be completely honest, this data seems a bit weird to me. It might not be weird, but it might be. The wording in the manuscript is that this data is the mean frequency of intrusive memories over the week. For the people who had 15, this means that every day they had on average 15 intrusive memories. Some people had on average 0 per day. This could be the data. But, it also seems like the data might just be frequency counts and not means at all. For example, the data could be that some people had a total of 15 intrusive over the week. The data might make more sense if these were frequency counts. Otherwise the differences between people are truly very large. For example the person who had an average of 15 intrusive memories per week, must have had 15*7 = 105 intrusive memories, which is a lot more than zero. In any case, this kind of wondering about the data is what happens when you start to notice how numbers work. It’s useful develop your data sense. Let’s move on to the ANOVA. By looking at the above graph do you have an intuition about what the ANOVA will tell us? I do, it should easily tell us that we are going to get an F-value that is bigger than one, and a p-value that is probably smaller than .05? How do I know this? I looked at the error bars, which represent the standard errors of the mean. If we look across conditions we can see that that the error bars don’t always overlap. This suggests there are differences in the data that don’t happen very often by chance. So, we expect a smallish p-value. Why do you think I expect the F-value to be greater than 1? If you can answer this question with a justification and explanation of how F works, pat yourself on the back! 7.4.5 Conduct the ANOVA Conducting an ANOVA in R is pretty easy. It’s one line of code, just like the t-test. It’s worth knowing that there are a few different packages out there to do an ANOVA, for example Mike Lawrence’s ezANOVA package is pretty popular. For this tutorial we’ll show you how to run the ANOVA using the aov function from base R (comes pre-installed). This is pretty “easy” too. I put easy in quotes because the first time I saw this, it was not easy for me. Here’s a brief digression for me to tell you that I feel your pain. I was first introduced to R by Patrick Bennett (a professor at McMaster University, where I attended graduate school). Pat, like I am doing know, forced us to use R in his statistics class. I remember having zero clue about so many things, and was often very frustrated. So, I imagine some of you are quite frustrated too. I was luck, like some of you, to have had some previous experience with other programming languages, so I was familiar with what R might be doing. What I was most frustrated with, was learning how to tell R what to do. In other words, I didn’t know how to write the commands properly. I didn’t understand what we call the syntax of R. This was back many years ago now, well before there was so many helpful examples on Google with working code, showing you how the syntax works. All we had was the R help files, which were a total mystery to me. If you want to see the help file for aov, just type ?aov() into the console, and press enter. You will see an “explanation” of how the aov function is supposed to work. You can use the same trick for any R function, like this ?name_of_function(). To be clear, you have to replace the letters name_of_function, with the name of the function. Some of you think that might be super obvious, but that is the kind of thing I did not think was obvious. So, when I read the help file for how to use the aov function, that is to learn what to put where, I didn’t feel like it was showing me what I needed to do. Usually, at the bottom of the help file, there are some examples, and these are helpful, but sometimes they are missing the example you need, and you are expected to generalize your knowledge of how aov works, to make it work for your problem. This is a catch-22 because if you don’t know how it works, you can’t generalize. IMO, you need a lot of examples of things that work. So, with that digression, I’m going to explain the syntax for the aov function. It looks like this: aov(DV ~ IV, dataframe) That probably looks really foreign. Let me explain. First you need write aov(). aov is the name of the function, followed by the brackets. The brackets are a sandwich. Sandwiches have a top and a bottom, and they enclose the things you put in the sandwich. We then put things inside the (), in specific ways to make the aov sandwich. The DV stands for the name of the dependent variable in the data frame. For us, this will be Days_One_to_Seven_Number_of_Intrusions. So, when we add that, our function will look like: aov(Days_One_to_Seven_Number_of_Intrusions ~ IV, dataframe) Next, the ~ (tilda) stands for the word ‘by.’ We are saying we want to analyse the Dependent variable by the conditions of the independent variable. The IV stands for the name of the column that is your independent variable. Our’s is called Condition. Adding that in, our formula looks like: aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, dataframe) Finally, the last part is the name of the data-frame we are using. The aov function only works on long-form data, where each score on the dependent variable has it’s own row. Our’s is already set up this way! The name of our data-frame is all_data. We add that in, and it looks like: aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data) In English, this means, do an ANOVA on the dependent variable as a function of the independent variable, and use the data in my data frame. This is it for now. The aov function is very flexible because you can define different kinds of formulas (the DV ~ IV part). We’ll see other examples in later chapters. For now, this is all we need. Also, what’s cool, is that this will work for any single IV with any number of levels (conditions) 2 or greater. Fun. Let’s see it in action. aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data) ## Call: ## aov(formula = Days_One_to_Seven_Number_of_Intrusions ~ Condition, ## data = all_data) ## ## Terms: ## Condition Residuals ## Sum of Squares 114.8194 685.8333 ## Deg. of Freedom 3 68 ## ## Residual standard error: 3.175812 ## Estimated effects may be unbalanced What is this garbage? I don’t see an ANOVA table, what is this? You are seeing the raw print out of the aov function. Clearly, this is not helpful, it’s not what we want to see. Fortunately, R comes with another function called summary. What it does is summarize the results of functions like aov, and prints them out in a nicer way. Let’s see the summary function do it’s thing: summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Condition 3 114.8 38.27 3.795 0.0141 * ## Residuals 68 685.8 10.09 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Alright, now we have an ANOVA table we can look at. However, it still looks ugly, at least to me. When you are working inside an R Markdown document, you have some more options to make it look nice. We can use the kable and xtable function together, like this. library(xtable) aov_out&lt;-aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data) summary_out&lt;-summary(aov_out) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Condition 3 114.8194 38.27315 3.794762 0.0140858 Residuals 68 685.8333 10.08578 NA NA Now we see a nicer print out. Especially if we knit the document into a webpage. 7.4.6 Reporting the ANOVA results Refer tot the textbook on ANOVAs for a deeper discussion of all the things in the ANOVA table. We’ll remind about some of those things here. First, let’s look at how we might report the results. There are three very important parts to this. Saying what test you did to what data Reporting the inferential statistics Reporting the pattern in the means Here is part 1, we need to say what data we used, and what kind of test we used on that data: We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor betwee-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. Part 2 is saying what the results of the test were. Specifically, we report the values from the inferential test (see the textbook for why these values). Also, you should be able to answer this question: why do we report the values that we do? We found a main effect of Intervention type, F(3, 68) = 3.79, MSE = 10.09, p = 0.014. Part 3 is saying what the pattern was in the means. Remember, that in the ANOVA, a significant effect refers to the global variation among the means. In other words, we can say that there are some differences between the means, but we can’t specifically say which pairs of means are different, or which groups of means are different from one another. How can we report this, where are the means? In fact, we already found them when we plotted the data earlier. So, we can copy paste that code, and print out the means, rather than the figure: # get means and SEs descriptive_df &lt;- all_data %&gt;% group_by(Condition) %&gt;% summarise(means= mean(Days_One_to_Seven_Number_of_Intrusions), SEs = sd(Days_One_to_Seven_Number_of_Intrusions)/sqrt(length(Days_One_to_Seven_Number_of_Intrusions))) knitr::kable(descriptive_df) Condition means SEs Control 5.111111 0.9963623 Reactivation+Tetris 1.888889 0.4113495 Tetris_only 3.888889 0.6806806 Reactivation_only 4.833333 0.7848650 No we have to use a sentence to describe these means. Refer to table 1 for the means and standard errors of the mean in each condition or, Mean intrusive memories per week were 5.11 (SE = .99); 1.89 (SE = .41); 3.89 (SE = .68); and 4.83 (SE= .78), in the Control, Reaction plus Tetris, Tetris Only, and Reactivation only conditions, respectively Ugh, what a mouthful. Be mindful of how you write results. The above is not helpful because you see a list of numbers, and then a list of conditions, and the reader has to do a lot of work to keep everything straight. I like the table option. I also like this other kind of option: Mean intrusive memories were significantly different between the Control (M = 5.11, SE = .99), Reactivation plus Tetris (M = 3.89, SE = .68), Tetris only (M= 3.89, SE = .68), and Reactivation only (M = 4.83, .78) conditions. That’s a little bit better. Let’s put it all in one place to see what it look like: We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor betwee-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. We found a main effect of Intervention type, F(3, 68) = 3.79, MSE = 10.09, p = 0.014. Mean intrusive memories were significantly different between the Control (M = 5.11, SE = .99), Reactivation plus Tetris (M = 3.89, SE = .68), Tetris only (M= 3.89, SE = .68), and Reactivation only (M = 4.83, .78) conditions. 7.4.7 Individual comparisons This next part is complicated, so we intentionally simplify it. There are these things (remember from the textbook), called comparisons. We use them to compare differences between specific conditions of interest. That part isn’t very complicated. You just pick the things you want to compare, and compare them. What is complicated is exactly what you “should” do to make the comparison. It turns out there are lots of recommendations and disagreements about what you should do. There are also lots of tests that you can do, so you have a lot of options. We are not going to show you here all of the tests. This is beyond the scope of what we are trying to teach you. Instead, we will use tests that you already know, the t-test for independent samples from the last lab. It will do the job for this data. We think that before you can make good decisions about the kind of comparison test you want to use, you have to have a solid understanding of what you are comparing and what you are not comparing when you use different tests. We think this understanding is more important than what test you use. More important, is that you know what means you want to compare. In this case, we will talk about what means we want to compare, and then just do a t-test. 7.4.7.1 What did the ANOVA tell us Remember, the ANOVA we conducted is termed the omnibus test in the textbook. What means was it comparing? It wasn’t comparing specific means. It was asking a kind of blind and very general question: Are any of these means different. Our answer was yes. Our next question is: What means were different from what other means? The ANOVA doesn’t know the answer to this question. It just says I don’t know… 7.4.7.2 Comparing specific means and the experimental question Notice there are 4 means to compare. So, there are (4-1)! = 3! = 3x2x1 = 6 total different comparisons. The ! stands for factorial. What’s more important is recognizing that when you have more than two conditions (where you can only make one comparison, A vs. B), you get increasingly more comparisons. For four conditions, A, B, C, D, you get six comparisons, they are: AB, AC, AD, BC, BD, and CD where each letter pair refers to A compared to B (AB), A compared to C (AC), and so on. Do we actually care about all of these comparisons? Perhaps. What was the point of the experiment? Remember, the experiment was asking a questions, that’s why they set-up the condition necessary to produce these means. What question were they asking? What did they want to know? They wanted to find out if various interventions after watching the scary movie, would change how many bad intrusive memories people would experience in the week following the movie. They discuss the idea that a memory can become malleable when it is re-activated. They want to “Re-activate” the bad memories, and then while they were changeable, do something to them to make them less likely to be intrusive later on. The big idea was that doing a bit of “re-activation” AND then playing Tetris (which takes up visual cognitive bandwidth) could cause changes to the re-activated memories, that would decrease the number of intrusive memories later on. With that reminder, let’s go through some different comparisons that we can make, and talk about what they might mean. 7.4.7.3 Control vs. Reactivation_only There was a control group that did not do anything special after watching the traumatic movie. The mean number of intrusive memories for the control group, gives some idea of the amount of intrusive memories we would expect to measure, when you do nothing to change that number. Comparing to the control group is a very sensible thing do to for each of the other groups. If one of the manipulations worked, it should show a different mean (something changed) than the control group. So, did the Reaction_only group have less intrusive memories over the control group? First we use the filter function from dplyr to select only the rows from the data frame that have the Control and Reactivation_only conditions. Then we run a t-test comparison_df &lt;- all_data %&gt;% filter(Condition %in% c(&#39;Control&#39;,&#39;Reactivation_only&#39;)==TRUE) t.test(Days_One_to_Seven_Number_of_Intrusions ~ Condition, comparison_df, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Days_One_to_Seven_Number_of_Intrusions by Condition ## t = 0.219, df = 34, p-value = 0.828 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -2.299851 2.855406 ## sample estimates: ## mean in group Control mean in group Reactivation_only ## 5.111111 4.833333 The means are both basically 5, not a big difference!. The p-value is large, suggesting that change could easily have produced the tiny differences between the means. In other words, it doesn’t look like the “re-activation” phase did anything to suppress the amount of intrusive memories that people would have over one week, compared to control. Notice, this was a comparison we could make. But, was it an informative one about the goal of the study? Not really. 7.4.7.4 Control vs. Reactivation+Tetris What we really want to know is if Reactivation+Tetris cause fewer intrusive memories…but compared to what? Well, if it did something, it should have a smaller mean than the Control group. So, let’s do that comparison: Note: we just change the one level name to the level we want Reactivation+Tetris. comparison_df &lt;- all_data %&gt;% filter(Condition %in% c(&#39;Control&#39;,&#39;Reactivation+Tetris&#39;)==TRUE) t.test(Days_One_to_Seven_Number_of_Intrusions ~ Condition, comparison_df, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Days_One_to_Seven_Number_of_Intrusions by Condition ## t = 2.9893, df = 34, p-value = 0.005167 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 1.031592 5.412852 ## sample estimates: ## mean in group Control mean in group Reactivation+Tetris ## 5.111111 1.888889 There is a bigger difference now, roughly 5.1 intrusive memories for control, and 1.9 for Reactivation+Tetris. The p-value is quite small, indicating this difference was not likely produced by chance. Now, we have some evidence that Reactivation+Tetris caused something to change, that condition produced fewer intrusive memories than control. 7.4.7.5 Control vs. Tetris_only Now we can really start wondering what caused the difference. Was it just playing Tetris? It wasn’t just doing the reactivation, we already found out that didn’t do anything. Does just playing Tetris reduce the number of intrusive memories during the week? Let’s compare that to control: comparison_df &lt;- all_data %&gt;% filter(Condition %in% c(&#39;Control&#39;,&#39;Tetris_only&#39;)==TRUE) t.test(Days_One_to_Seven_Number_of_Intrusions ~ Condition, comparison_df, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Days_One_to_Seven_Number_of_Intrusions by Condition ## t = 1.0129, df = 34, p-value = 0.3183 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -1.230036 3.674480 ## sample estimates: ## mean in group Control mean in group Tetris_only ## 5.111111 3.888889 There’s mean difference of about 1, but the p-value isn’t very small. This suggests chance produces a difference of this size fairly often. If we claimed that just playing Tetris caused a difference based on this data, we could easily be making a type I error (claiming the result is real when it is not, a false-positive). Still, the difference was in the right direction wasn’t it. 7.4.7.6 Tetris_only vs. Reactivation + Tetris Finally, we might ask if the Reactivation+Tetris group had fewer unwanted memories than the Tetris_only group. Did putting the two things together (reactivation AND Tetris) really do something special here, beyond just playing Tetris. comparison_df &lt;- all_data %&gt;% filter(Condition %in% c(&#39;Tetris_only&#39;,&#39;Reactivation+Tetris&#39;)==TRUE) t.test(Days_One_to_Seven_Number_of_Intrusions ~ Condition, comparison_df, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Days_One_to_Seven_Number_of_Intrusions by Condition ## t = -2.5147, df = 34, p-value = 0.01681 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.6162855 -0.3837145 ## sample estimates: ## mean in group Reactivation+Tetris mean in group Tetris_only ## 1.888889 3.888889 Well, according to the t-test, the p-value is again fairly small. Suggesting that the difference between Reactivation+Tetris (M=1.89) and Tetris_only (3.89), was not likely to be produced by chance. So, on the basis of this, there is some evidence that Reactivation+Tetris, really does cause fewer intrusive memories. 7.4.8 Writing it all up. Because we have spent so much time on individual comparisons, we won’t do a full write up of the results. A full write-up would include telling the reader what data was used, what test was conducted, the results of the test, and the pattern of the means, AND then, the results of specific comparisons of interest. You can read the paper to see how the authors did it. 7.4.9 Food for thought Think about what we did here. We almost blindly just downloaded the data and ran the same analysis as the authors did. Sure, we looked at the data first, and then did the analysis. But, did we really look? Did you notice anything about what you looked at? What did we not look closely at that might make you skeptical of the conclusions from the research… Here’s a hint. Sample-size. We know that is important. Let’s ask the question, was there an equal number of participants in each of the 4 conditions. We can use dplyr again to do this. We’ll add the length function, which counts the number of subjects in each condition: descriptive_df &lt;- all_data %&gt;% group_by(Condition) %&gt;% summarise(means= mean(Days_One_to_Seven_Number_of_Intrusions), SEs = sd(Days_One_to_Seven_Number_of_Intrusions)/sqrt(length(Days_One_to_Seven_Number_of_Intrusions)), count = length(Days_One_to_Seven_Number_of_Intrusions)) knitr::kable(descriptive_df) Condition means SEs count Control 5.111111 0.9963623 18 Reactivation+Tetris 1.888889 0.4113495 18 Tetris_only 3.888889 0.6806806 18 Reactivation_only 4.833333 0.7848650 18 The answer is YES, there were an equal number of subjects. That’s good. We should have checked that before. Lesson for next time. For example, if there were only 9 subjects in the Reactivation+Tetris group, we might be suspicious that they got lucky, and accidentally (by chance) assigned people to that group who are unlikely to report having intrusive memories. After all, different people are different, and not everybody is as susceptible to intrusive memories. Let’s do one more thing for fun, and to see everything in action all in one place. Let’s consider the role of outliers. Looking at the first graph we can see that most people in all the groups had fewer than 10 intrusive memories (mean we assume) per week. It looks like 5 people had more than that, and they just happened to be in the other groups. Maybe Reactivation+Tetris made those people have way less intrusive memories (which is why no one is above 10), or maybe the researchers got a little bit unlucky, and accidentally didn’t get any “outliers” (people with extreme values on the measure) in that group. Let’s re-run the analysis, but remove anybody with a mean higher than 10. This will only remove 5 subjects, so we will still have a lot left. What happens? Before we find out, let me point out again the beauty of R. All we need to do is copy and paste our previous code. Then, just filter the data once to remove the outliers, then voila, we redo everything all in one go. It’s much more complicated and time consuming to do this in many other software programs. You are lucky to be learning R. # get rid out of outliers all_data &lt;- all_data %&gt;% filter(Days_One_to_Seven_Number_of_Intrusions &lt; 10) # get means and SEs descriptive_df &lt;- all_data %&gt;% group_by(Condition) %&gt;% summarise(means= mean(Days_One_to_Seven_Number_of_Intrusions), SEs = sd(Days_One_to_Seven_Number_of_Intrusions)/sqrt(length(Days_One_to_Seven_Number_of_Intrusions))) # Make the plot ggplot(descriptive_df, aes(x=Condition, y=means))+ geom_bar(stat=&quot;identity&quot;, aes(fill=Condition))+ # add means geom_errorbar(aes(ymin=means-SEs, # add error bars ymax=means+SEs), width=.1) + geom_point(data=all_data, aes(x=Condition, y=Days_One_to_Seven_Number_of_Intrusions), alpha=.5)+ geom_point(alpha=.25)+ ylab(&quot;Intrusive Memories (Mean for Week)&quot;) # run and report the ANOVA aov_out&lt;-aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data) summary_out&lt;-summary(aov_out) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Condition 3 51.49152 17.163841 4.024458 0.0110347 Residuals 63 268.68758 4.264882 NA NA # conduct critical comparisons ## control vs reactivation+Tetris comparison_df &lt;- all_data %&gt;% filter(Condition %in% c(&#39;Control&#39;,&#39;Reactivation+Tetris&#39;)==TRUE) t.test(Days_One_to_Seven_Number_of_Intrusions ~ Condition, comparison_df, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Days_One_to_Seven_Number_of_Intrusions by Condition ## t = 2.4159, df = 31, p-value = 0.02178 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.2562181 3.0326708 ## sample estimates: ## mean in group Control mean in group Reactivation+Tetris ## 3.533333 1.888889 ## Tetris_only vs reactivation+Tetris comparison_df &lt;- all_data %&gt;% filter(Condition %in% c(&#39;Tetris_only&#39;,&#39;Reactivation+Tetris&#39;)==TRUE) t.test(Days_One_to_Seven_Number_of_Intrusions ~ Condition, comparison_df, var.equal=TRUE) ## ## Two Sample t-test ## ## data: Days_One_to_Seven_Number_of_Intrusions by Condition ## t = -2.3239, df = 33, p-value = 0.02643 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -2.8561054 -0.1896463 ## sample estimates: ## mean in group Reactivation+Tetris mean in group Tetris_only ## 1.888889 3.411765 The take home is that yes, even after removing outliers, the same basic pattern in the data is observed. Overall, this is a small n study, and ideally the basic findings should be replicated in another lab before we really have full confidence in them. But, I’d say the trends here look promising. That’s ANOVA. Come back next week for another ANOVA tutorial, this time using within-subject data. It’s called a repeated measures ANOVA, and it’s what’s happening next week. 7.4.10 Generalization Exercise Your task is to conduct the ANOVA using Day_Zero_Number_of_Intrusions as the dependent variable. Report the ANOVA table, a figure to show the means, and a short write-up of the results. 7.4.11 Writing assignment (2 points - Graded) Answer the following questions: Explain why the ANOVA is called an omnibus test, and how the omnibus test is different from comparing specific means with t-tests. (1 point) Explain the general similarity between the ratios that are used to calculate the F value and the t-value (1 point) General grading. You will receive 0 points for missing answers You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 7.5 Excel How to do it in Excel 7.6 SPSS In this lab, we will use SPSS to: Perform a One-Factor Analysis of Variance (ANOVA) and Graphing the data Planned comparisons: Use orthogonal contrasts to locate differences Unplanned comparisons: Use a post-hoc test to locate differences 7.6.1 Experiment Background As described at the beginning of this lab manual section, researchers in the James et al. (2015) study sought to explore whether completing a visuo-spatial task (e.g., Tetris) after a memory was formed would interfere with the storage of that memory, and thereby reduce the frequency of subsequent intrusions. They hypothesized that only participants who complete a visuo-spatial task after reactivation of the traumatic memories would experience a reduction in intrusive memories. In comparison, simply completing a visuo-spatial task (without reactivation) or reactivation (without a visuo-spatial task), would not reduce the occurrence intrusive memories. In other words, if you play Tetris shortly after you were remembering bad memories, you will experience intrusive memories less often in the future. The authors conducted an experiment (N = 72, n = 18 per condition) wherein all participants viewed a series of video clips of graphic violence (e.g., a person getting hit by a van while using his phone as he crosses the road). Over the next 24 hours, participants recorded their intrusive memories. All groups were predicted to have an equal occurrence of intrusive memories during this pre-manipulation period (called Day 0). Experimental Task: After this 24-hour period, the participants returned to the lab and completed the experimental task. The experimenters randomly assigned participants to ONE of the following conditions: No-Task Control: These participants completed a 10-minute music filler task. Reactivation + Tetris: These participants were shown a series of images from the trauma film to reactivate the traumatic memories (i.e., reactivation task). After a 10-minute music filler task, participants played the video game Tetris for 12 minutes. Tetris Only: These participants played Tetris for 12 minutes, but did not complete the reactivation task. Reactivation Only: These participants completed the reactivation task, but did not play Tetris. Dependent variable: Intrusive Memories: All participants were asked to record the number of intrusive memories that they experienced over the next seven days (Days 1 to 7). 7.6.2 Performing a One-Factor Analysis of Variance (ANOVA) &amp; Graphing the data First, let’s open the relevant data file; Here is the link. It’s called “James2015_Experiment2.sav” Open this file in SPSS. Your data should look like this: In this experiment, there was one important independent variable, called Condition, and it has four levels. The levels are 1, 2, 3, and 4 in the spreadsheet. These will correspond to the four levels in shown below: No-Task Control Reactivation + Tetris Tetris Only Reactivation Only The dependent variable is recorded in the column Days_One_to_Seven_Number_of_Intrusions. This represents the mean number of intrusions for that week. We are testing the hypothesis that the number of intrusive memories will be different among the groups (1-4). For now, we will not specify which group we think is going to have the highest or lowest number of memories, but rather we will test if there is a difference SOMEWHERE between these 4 groups. Let’s begin. Go to Analyze, then Compare Means, then select One-Way ANOVA… The next window will ask you to specify the dependent variable (move the variable Days_One_to_Seven_Number_of_Intrusions from the list on the left to the field labeled Dependent Variable) and the “Factor,” which is the same thing as the independent variable or grouping variable (remember back to t-tests!). Move the variable Condition from the list into the field labeled “Factor.” Your window should look like this: Now, click the Options button, and then choose Means plot. Then, click Continue and OK. SPSS will produce an output window containing the results of the ANOVA (an ANOVA table), as well as a graph of the group means. It should look as follows: First, let’s look at our ANOVA table: We see our F-statistic listed is 3.795, with a p-value of .014. This tests the null hypothesis that there is no difference among the groups. Since p is less than our likely alpha level (.05), we can reject the null hypothesis and conclude that there IS a difference somewhere among these groups. We may say it more formally as follows: The effect of condition on mean intrusive memories over days 1-7 was significant, F(3, 68) = 3.80, p &lt; .05. To examine the data further, let’s refer to the graph created by SPSS: we can see that the Reactivation + Tetris condition appears to have the smallest mean. As for the others, they are all greater than Reactivation + Tetris, but differ somewhat from each other as well. It is important to know that at this point, we do not know where the significant differences could be. For example, it could be that only Reactivation + Tetris is different from No-Task Control, or it could be that there are other groups different from one another as well. In order to locate where the differences are, we must conduct additional analyses called either planned or unplanned comparisons. 7.6.3 Follow-Up Tests In practice, you know before conducting your experiment and analyses whether you have reason to look for specific differences (based on what the literature says, theories that exist, etc.) or you will explore the differences without reason to look at something specific (if you have a significant result in the omnibus ANOVA). This differentiation will determine whether you will conduct orthogonal linear contrasts / planned comparisons (you had reasons to look for specific differences / a priori comparisons) or you will run a post-hoc test to explore the differences (you had no reason to look for any specific differences). In lab, we are going to take both approaches with the same example just to discuss how to do each type of follow-up. You will NOT run conduct both planned comparisons and post-hoc tests in practice – EVER. We are doing this for demonstration purposes only. 7.6.4 Planned Comparisons: T-Contrasts Section contributed by Sherry Neville-MacLean, 2021. 7.6.4.1 Planned Comparisons and Ideas to Keep in Mind when Making Orthogonal Contrasts The first approach we will consider in terms of follow-up tests is planned comparisons. There are some rules about making these comparisons which we call orthogonal linear contrasts. First, we can only make as many comparisons as the number of groups we have minus 1 (k - 1, where k = number of conditions). In our example, we could make up to 3 comparisons because we have 4 groups: No-Task Control Reactivation + Tetris Tetris Only Reactivation Only This section is largely paraphrased from Discovering Statistics Using IBM Statistics, according to its “All rights reserved” copyright license. Thank you Field, A. (2018) for aiding in our understanding of orthogonal contrasts. According to Field (2018), your planned comparisons should also be guided by these rules: 1: Compare only two chunks of variation at a time (within a contrast). If a group is compared to a group containing all other levels in one contrast, that first group should be excluded from any subsequent contrasts. 2: Within a given contrast, assign one chunk of variation positive coefficients and the opposite chunk negative coefficients. 3: The sum of the coefficients for a given contrast should be zero. 4: For a given contrast, excluded groups are given a coefficient of zero. 5: For a given contrast, the coefficients assigned to the group(s) in one chunk of variation should be equal to the number of groups in the opposite chunk of variation. 7.6.4.2 Coefficients for This Example For the sake of our demonstration, let’s follow the planned comparisons that the researchers reported. It is very likely their planned comparisons were based on the literature about visual images and memory. The report three planned comparisons: No-Task Control vs. Reactivation + Tetris Reactivation + Tetris vs. Tetris Only Reactivation + Tetris vs. Reactivation Only Let’s consider the orthogonal contrasts before returning to SPSS to request these follow-up tests. For the first planned comparison, No-Task Control vs. Reactivation + Tetris, we are excluding two groups (Tetris Only and Reactivation Only). Each of those groups will be given a coefficient of zero in the contrast. We are left with two groups to compare. Each can be given a coefficient of 1, but one will need to be a positive 1 and the other will need to be a negative 1. It does not matter which group is given which sign. Consider the first contrast: Sum of Coefficients: -1 + 1 + 0 + 0 = 0 For the second planned comparison, Reactivation + Tetris vs. Tetris Only, we are excluding two groups (No-Task Control and Reactivation Only). Each of those groups will be given a coefficient of zero in the contrast. We are left with two groups to compare. Each can be given a coefficient of 1, but one will need to be a positive 1 and the other will need to be a negative 1. It does not matter which group is given which sign. Consider the second contrast: Sum of Coefficients: 0 + 1 + -1 + 0 = 0 For the third planned comparison, Reactivation + Tetris vs. Reactivation Only, we are excluding two groups (No-Task Control and Tetris Only). Each of those groups will be given a coefficient of zero in the contrast. We are left with two groups to compare. Each can be given a coefficient of 1, but one will need to be a positive 1 and the other will need to be a negative 1. It does not matter which group is given which sign. Consider the third contrast: Sum of Coefficients: 0 + 1 + 0 + -1 = 0 7.6.4.3 Requesting the Planned Comparisons in SPSS We can request all three planned comparisons at the same time in SPSS. Let’s start with the first comparison (Groups 1 and 2; No-Task Control vs. Reactivation + Tetris). Go to Analyze, Compare Means, and then One-Way ANOVA.. Let’s place our dependent variable (Days_One_to_Seven_Number_of_Intrusions) in its appropriate field – in the Dependent List field. Then, place Condition into the Factor field. At this point, we have to click Contrasts to specify our planned comparison. It is important to keep the coefficients for the contrast in the same order as the order in which the groups are included in the data file. In the data file, No-Task Control, Reactivation + Tetris, Tetris Only, and Reactivation Only are coded as 1, 2, 3, and 4, respectively. Fortunately, we considered our groups in the previously tables in the order they are in the data file. Each time you enter a coefficient, you will need to click Add before entering the following coefficient. You will need to enter each of the four coefficients and click Add. That is sufficient information to have SPSS run the first planned comparison. Now, to enter the coefficients for the second contrast (Groups 2 and 3; Reactivation + Tetris vs. Tetris Only), you will need to click Next. Follow the steps explained above to include the coefficients for the contrast. You will know your second contrast is included when you see something like this – with the four coefficients reported under a section called “Contrast 2 of 2.” Repeat the process of clicking Next and entering the coefficients for the third contrast (Groups 2 and 4; Reactivation + Tetris vs. Reactivation Only). When you are finished, you will see something like this – with the four coefficients reported under a section called “Contrast 3 of 3.” Select “Estimate effect size for contrasts.” Click Continue and then OK. SPSS will produce the standard output tables for the ANOVA, contrasts, and effect sizes. As we can see, while considering the violation to the assumption of homogeneity of variance, the t-tests are significant. We can report Hedge’s correction when considering the effect size. There is indeed a difference between Groups 1 and 2 (No-Task Control vs. Reactivation + Tetris), t(22.63) = -2.99, p &lt; .05, g = -1.00; between Groups 2 and 3 (Reactivation + Tetris vs. Tetris Only), t(27.96) = -2.52, p &lt; .05, g = -0.62; and between Groups 2 and 4 (Reactivation + Tetris vs. Reactivation Only), t(25.68) = -3.32, p &lt; .05, g = -0.92. 7.6.5 Unplanned Comparisons: Post-hoc tests Another way to find the differences between groups in a one-way, or one-factor, ANOVA is to conduct something called a post-hoc test. This test is referred to as “unplanned” because you only conduct one when you have a significant overall ANOVA. The post-hoc test is neat because it is conveniently summoned during the process of conducting an ANOVA, and its results are presented in a compact table. Let’s use a post-hoc test to look at this data. Although there are many types of post-hoc tests, the commonly used is Tukey post-hoc test when the assumption of homogeneity of variance is met. When that assumption is violated, Games-Howell is commonly used. Let’s begin. We are going to go through the same steps as before in order to conduct our ANOVA: Go to Analyze, then Compare Means, then One-Way ANOVA… Place the dependent variable (Days_One_to_Seven_Number_of_Intrusions) in its appropriate field – in the “Dependent List” field. Then, place Condition into the “Factor” field. Next, click the button labeled Post-hoc. A window will appear with options for various post-hoc tests. We are going to choose Games-Howell (Question: Why are we selecting Games-Howell?): Click Continue, and then OK. SPSS will produce the ANOVA table once again, followed by a table that refer to the post-hoc test. Let’s look at the table named “Multiple Comparisons.” 7.6.5.1 Multiple Comparisons In this table, every possible group of 2 conditions is being compared. Notice that the table is redundant; it considers the comparison between No-task Control and Reactivation + Tetris to be different from Reactivation + Tetris vs. No-task Control. However, we know these are the same comparisons. So, we only need to look at half of the table, in essence. If you start with row 1, this row compares No-task Control with Reactivation + Tetris. If we find the Sig. column, we see the corresponding p-value for this row is .031. Because this is less than our likely alpha level (.05), this means that these two conditions ARE significantly different from one another. Where else is there a Sig. that is less than alpha (.05)? Reactivation + Tetris compared with Reactivation Only has a p-value of .013. This is also a significant difference. These are the only significant differences we see here. This means that, among the 4 groups, only two differences were found: Reactivation + Tetris is different from No-task Control, and Reactivation + Tetris is different from Reactivation Only. 7.6.6 Other Commands Used to Conduct the One-Way ANOVA in SPSS: General Linear Model Oftentimes, there is more than one way to accomplish a similar task using SPSS. We have examined how to conduct an ANOVA using the Analyze → Compare Means → One-Way ANOVA… command. Using the same example, let’s look at another set of commands to request an ANOVA. Go to Analyze, then General Linear Model, and then Univariate… You should be presented with a pop-up window similar to the following: Place the dependent variable (Days_One_to_Seven_Number_of_Intrusions) in its appropriate field – in the “Dependent List” field. Then, place Condition into the “Fixed Factor(s)” field. Next, click Options. Here, you could request Descriptive Statistics, Estimates of effect sizes, and Homogeneity Tests. For our purposes, let’s request a test of homogeneity of variance. Click Continue and Ok. SPSS should generate three output tables in the output file. Let’s focus on the homogeneity test first. As we noted using the other set of commands, you should see that Levene’s test is significant. Based on that significant result, we would prefer to use an adjusted ANOVA. Recall that adjustment can be requested using the other set of commands: Analyze → Compare Means → One-Way ANOVA… → Options → select the adjustment you want (Brown-Forsythe or Welch). Although we did not get to request the Brown-Forsythe or Welch adjusted tests, we can compare and contrast the regular overall ANOVA tests. While the Tests of Between-Subjects Effects table generated using these commands is slightly different from the ANOVA table generated using the other commands, you should notice the degrees of freedom, the F-statistic, and the p-value are the same. 7.6.6.1 Planned Comparisons You can also request follow-up tests using the Analyze → General Linear Model → Univariate commands. Let’s begin by considering planned comparisons. After having selected the previously noted commands, select Contrasts. A pop-up window will appear. Notice that the independent variable is listed in the “Factors” field. Also, notice that there is a drop-down menu you can access by clicking the black, downward-facing arrowhead next to “None” which is the default setting in the “Contrasts” field. Please visit SPSS’s website for more information on the types of contrasts that are programmed into SPSS. In short, Deviation is used to compare the mean of a specific level (first or last) to the mean of all combined levels. Simple is used to compare the mean of a given level (first or last) to the mean of each other level. Difference is also known as Reverse Helmert, and it is used to compare the mean of each level except the first to the mean of the previous levels. Helmert is used to compare the mean of each level except the last to the mean of subsequent levels. Repeated is used to compare the mean of each level except the last to the mean of the subsequent level. Polynomial compares the linear effect, quadratic effect, cubic effect, and so on. The best contrast option for our example is Simple; however, our groups are not in the order that allows this comparison. We want to compare Group 1 (No-Task Control) to Group 2 (Reactivation + Tetris), Group 2 (Reactivation + Tetris) to Group 3 (Tetris Only), and Group 2 (Reactivation + Tetris) to Group 4 (Reactivation Only). One way to accomplish a change in order so that we could use Simple is to move the Reactivation + Tetris group to first position in the order. Just in case you have not yet encountered recoding or need a refresher, let’s discuss how it is accomplished. First, click Transform, and then click Recode into Different Variable. When the pop-up window appears, move the variable of interest to the “Numeric Variable → Output Variable” field, and enter/create a name for the new variable in the “Name” field under the title “Output Variable” on the far right of the pop-up window. Click Change, and the newly created variable name should be moved to the “Numeric Variable → Output Variable” field near the center of the pop-up window. Next, click Old and New Values…. For our purposes, we will indicate that the “Old Value” of 1 should become the “New Value” of 2, and click Add. We will also indicate that the “Old Value” of 2 should become the “New Value” of 1, and click Add again. To keep the codes for the Tetris Only and Reactivation Only groups, we also need to indicate that the “Old Value” of 3 should become (or stay the same as) the “New Value” of 3 and the “Old Value” of 4 should become (or stay the same as) the “New Value” of 4, respectively, and to click Add after entering each. Click Continue and Ok. The newly created variable – with the levels changed in their order - will appear at the end of the data file. You may want to change the default setting of 2 under Decimals in the Variable View to 0. Now, we can return to the Contrasts, but move the new variable over. Click Analyze, then General Linear Model, and then Univariate commands. Place the dependent variable (Days_One_to_Seven_Number_of_Intrusions) in its appropriate field – in the “Dependent List” field. Then, place ConditionRecoded (or whatever you named your new variable) into the “Fixed Factor(s)” field. Select Contrasts. Use the drop-down menu by “Contrast” to select Simple. Then, click Change. The change to the Simple contrast will be noted in brackets behind the IV listed in the “Factors” field. Be sure to select “First” so that SPSS will compare the first mean to each other group. Click Continue and Ok. SPSS will generate the tables we discussed previously plus a new table called “Contrasts Results (K Matrix).” You should notice that although the information is depicted in a different manner, the same p-values are being noted for these comparisons as were noted in Section 8.6.4.3 within the “Assumes equal variances” row of the “Contrast Tests” table generated using the Compare Means menu. While the convenience of a programmed contrast may be appealing, you should also notice a drawback of accessing the contrasts via the General Linear Model menu: not only are we unable to access the adjustments for the F-test, but also we are unable to look at contrast with corrections for the violation to the assumption of homogeneity of variance. It is a good idea to check your data set before deciding which menu provides the best options for you. 7.6.6.2 Unplanned Comparisons Now, let’s look at the options for follow-up tests that are performed when you do not have a priori hypotheses, but you do have a significant overall F-test. Again, you can click Analyze, then General Linear Model, and then Univariate commands. Place the dependent variable (Days_One_to_Seven_Number_of_Intrusions) in its appropriate field – in the “Dependent List” field. Then, place Condition into the “Fixed Factor(s)” field. This time, click Post Hoc… Move Condition to the “Post Hoc Tests for” field by clicking the arrow between the two fields. You should notice that options for adjustments which assume homogeneity of variance and options for adjustments which assume heterogeneity of variance are available. Since we noticed a violation to the assumption of homogeneity of variance and have seen the results of Games-Howell in a previous section, let’s select that option. Click Continue and then OK. Notice that the “Multiple Comparisons” table presented in the output file looks the same as the one we observed using the Compare Means menu. Again, although you could calculate the effect sizes, we were not able to request that SPSS generate them using this General Linear Model menu. 7.6.7 Homework questions See Moodle. 7.7 JAMOVI How to do it in JAMOVI "],["lab-8-repeated-measures-anova.html", "Chapter 8 Lab 8 Repeated Measures ANOVA 8.1 Betcha can’t type JHDBZKCO very fast on your first try 8.2 Lab Skills Learned 8.3 Important Stuff 8.4 R 8.5 Excel 8.6 SPSS 8.7 JAMOVI", " Chapter 8 Lab 8 Repeated Measures ANOVA However, perhaps the main point is that you are under no obligation to analyse variance into its parts if it does not come apart easily, and its unwillingness to do so naturally indicates that one’s line of approach is not very fruitful. —R. A. Fisher 8.1 Betcha can’t type JHDBZKCO very fast on your first try This lab activity uses the data from Behmer &amp; Crump (2017) to teach one-factor repeated measures ANOVA with-up follow comparisons 8.1.1 STUDY DESCRIPTION Behmer &amp; Crump (2017) used the everyday task of typing on a computer keyboard to ask questions about how people learn to put sequences of actions together. Whenever you type a series of letters on the keyboard, you are putting a sequence of actions together, so typing is task that could be used to measure skilled sequencing. Typing also happens to be a convenient task for measuring sequencing. For example, every time a person types a letter, the timing of the button press and the letter pressed can be measured and stored for later analysis. Behmer &amp; Crump were interested in asking a few different questions, however, we will simplify everything and talk about replication. First we describe an interesting finding from previous research. Behmer &amp; Crump repeated an experiment that should also produce this same finding. If they succeed in doing this, it means the finding can be replicated, and that it happens in more than one lab. Finding from previous resaearch: Prior research showed that typists do something funny. Skilled typists can type normal words very fast. This suggests they know how to locate all of the letters on the keyboard, and can press each letter very quickly to type words. That part isn’t particularly funny. However, if you take really skilled typists and make them type random letters like this: kwitb dhhgjtryq xkldpt mazhyffdt, guess what happens? They slow down a lot. It’s kind of weird that a typist would slow down, after all they can type letters really fast when they appear in words, but not when they appear in random orders…what gives? Last, it turns out that typists are kind of in the middle in terms of speed, if you ask them to type non-words that have similar properties to words, such as: quenp hamlke phwempy. To summarize, prior research showed that typing speed changes as a function of the structure of the text, roughly in this order from fastest to slowest. (FASTEST) Normal Words &lt; Word-like Non-words &lt; Random strings (SLOWEST) Replication question: Behmer &amp; Crump also measured typists while they typed words, non-words that were English-like, and random strings. They had some additional things they were interested in, but for us, we are interested in whether they would show the same effect. Would they replicate the pattern: Normal words (Fastest) &lt; Word-like Non-words (medium) &lt;- Random strings (Slowest)? 8.1.2 Study Methods The authors conducted a repeated measures experiment. A total of 38 subjects were used for the analysis. Independent Variable: The IV Stimulus or typing material had three levels: Normal, Bigrams, and Random. Normal refers to normal 5 letter English words (like truck, or plant). Bigrams refers to non-words that have properties similar to words (e.g., phemt quilp). Random refers to 5 letter strings whose letters were totally random (qmklt gdrzn lprni). Dependent Variables: There were three dependent variables, that all measured different aspects of typing performance. Reaction times (RTs) were defined as the temporal interval between seeing a stimulus (to type), and then starting to type it (first key press). Inter-keystroke intervals (IKSIs) are the times between each key-press. Last, accuracy was also measured (correct or incorrect key-presses) The task: Participants (who happened to also be students from Brooklyn College) sat in front a computer. They were presented with one stimulus (word, bigrams, or random) at a time. As soon as they saw the string of letters, they typed it as quickly and accurately as they could, then they moved on to the next trial. Reminder, this is a repeated measures design because each participant typed letter strings from the word, bigrams, and random conditions. 8.2 Lab Skills Learned Conducting a one-factor repeated measures ANOVA Conducting follow-up comparisons 8.3 Important Stuff citation: Behmer, Lawrence P., Crump, M. J. C. (2017). Spatial Knowledge during Skilled Action Sequencing: Hierarchical versus Non-Hierarchical Representations. Attention, Perception &amp; Psychophysics, 79, 2435-2448. Link to .pdf of article Data in .csv format 8.4 R 8.4.1 Load the data Remember that any line with a # makes a comment and the code does not run. Below is how to load the .csv data from the online repository, or from a local file (you need to change the file path to where the local file is, if you downloaded it). The data contains all of the measures and conditions from Experiment 1 in the paper. library(data.table) #all_data &lt;- fread(&quot;https://github.com/CrumpLab/statisticsLab/raw/master/data/exp1_BehmerCrumpAPP.csv&quot;) all_data &lt;- fread(&quot;data/exp1_BehmerCrumpAPP.csv&quot;) 8.4.2 Inspect the dataframe This will give you a big picture of the data frame. Click the button to view it in your browser, then take a look to see what is in it. library(summarytools) view(dfSummary(all_data[,c(1:7,10:20)])) Note, there is some weird stuff in code above. Normally, we would just write view(dfSummary(all_data)), why we add this: all_data[,c(1:7,10:20)]? It turns out the dfSummary function didn’t like some of the data. In particular it didn’t like the data in columns 8 an 9 (notice those numbers are missing, the range inside c is 1 to 7 and 10 to 20). It doesn’t mean the data isn’t there, just that it didn’t want to display it in the viewer. 8.4.3 Get the data you need This data file contains all of the data from Experiment 1 in the paper. So, we don’t need to get rid of any rows. There are numerous columns, some of them we don’t need for the analysis. But, we’ll just ignore these later when we use dplyr to group by the columns we want. The structure of this data a file is in long form. Every row described a measurement for a single key-press. For example, the first 5 rows, have data for the timing of the first 5 key-presses, that the first subject made to type the first string of letters they saw. In total there were 85,410 key-presses made. That’s quite a lot. 8.4.3.1 The independent variable The important independent variable is in the column Stimulus. Normal (5 letter English words) Bigrams (5 letter strings that kind of looked like words) Random (5 letter strings that were random) It is also important to know that the Order column codes the position for each letter, from 1 to 5. Note: there was another independent variable in the study as well. We talk about this later. The second IV is coded in the Block column. Baseline (normal typing, keyboard is visible while typing) Manipulation (occluded typing, keyboard is covered while typing) 8.4.3.2 The dependent variables TimeFromOnset : This column records the temporal interval in milliseconds between the onset of the word and each key-press. When order is 1 (first keystroke), the number here is the reaction time to start typing. PureRTs : This column contains keystroke intervals. The first interval is between the onset of the word and the first key-press (order 1), the second interval is between the first and second key-press (order 2), and so on. PureRTs for orders 2 to 5, represent the inter-keystroke intervals reported in paper. AllCorrect : 0 means incorrect (wrong letter was typed), 1 means correct (correct letter was typed) 8.4.4 Look at the data Remember before we do any analysis, we always want to “look” at the data. This first pass let’s us know if the data “look right.” For example, the data file could be messed up and maybe there aren’t any numbers there, or maybe the numbers are just too weird. For example, this study involves reaction times: the time between seeing something and responding to it. If you had done a study like this before, you would know that it usually doesn’t take people that long to start responding. Most reaction times will be under a second (or 1000 milliseconds). But, sometime people are little slow, and sometimes they do funny things like check their phone in the middle of an experiment. Before I analyze reaction time data, I often make a histogram of all of the RT data, like this: hist(all_data$PureRTs) We can see that almost all of the reaction times are well below 5000 milliseconds (5 seconds), which is good. Most of the time people were paying attention and not “checking their phone.” Notice, the range of the histogram goes out to 15,000 milliseconds. You can’t see any bars out there (too small to notice), but there must be at least a few trials where somebody took 15 seconds to start responding. These are called outliers. We will remove them before we conduct our analysis 8.4.5 Look at the means As part of looking at the data, we might as well make a figure that shows the mean reaction times in each condition, and some error bars to look at the spread in each condition. The following code takes three important steps: Get the means for each subject in each condition. These are put into the data frame called subject_means. Get the means for each condition, by averaging over the means for each subject. These are put into the data frame called plot_means. Make a graph with the plot_means data frame using ggplot2. library(dplyr) library(ggplot2) all_data$Block&lt;-as.factor(all_data$Block) levels(all_data$Block) &lt;- c(&quot;Visible keyboard&quot;,&quot;Covered Keyboard&quot;) ## get subject mean RTs subject_means &lt;- all_data %&gt;% filter(Order==1, Correct==1, PureRTs&lt;5000) %&gt;% group_by(Subject, Block, Stimulus) %&gt;% summarise(mean_rt = mean(PureRTs)) subject_means$Subject&lt;-as.factor(subject_means$Subject) subject_means$Block&lt;-as.factor(subject_means$Block) subject_means$Stimulus&lt;-as.factor(subject_means$Stimulus) ## get condition mean RTs plot_means &lt;- subject_means %&gt;% group_by(Block, Stimulus) %&gt;% summarise(means = mean(mean_rt), SEs = sd(mean_rt)/sqrt(length(mean_rt))) ## plot the condition means # re-order stimulus factor for plotting plot_means$Stimulus &lt;- factor(plot_means$Stimulus, levels = c(&quot;Normal&quot;, &quot;Bigrams&quot;, &quot;Random&quot;)) ggplot(plot_means, aes(x=Stimulus, y=means, group=Block, color=Block))+ geom_point()+ geom_line()+ geom_errorbar(aes(ymin=means-SEs, ymax=means+SEs), width=.2)+ theme_classic()+ ylab(&quot;Mean Reaction Time (ms)&quot;)+ xlab(&quot;Typing Material&quot;) Alright, we made things a little bit more complicated than they need to be. Our primary question is whether reaction times followed this pattern: Normal &lt; Bigrams &lt; Random. We can see the means do follow this pattern. However, shouldn’t we only be looking at three means, why are their six means, and two lines? The above code included the second independent variable Block. As a result, you are seeing the means for Typing material when subjects could see the keyboard, and when the couldn’t see the keyboard. We will come back to this later. For now, let’s ignore the Block condition, and find the means for the Typing Material IV by averaging over the Block conditions. We run the same code as above, by take out Block, in the group_by function. We also take Block out the ggplot function. VERY IMPORTANT: We did something in the above code that we didn’t point out. We filtered the data before we found the means. For most of the data sets in other labs, we given you data that is more or less ready to analyse. More often than not data needs to be pre-processed, or filtered before you analyze it. We can use the filter function in dplyr to do our filtering. filter filters the rows for us, so we will only include the rows that we want. We want to analyze the time between the onset of the stimulus and the first keystroke. The reaction times for this value are in the PureRTs column, but this column contains other RTs that we do not want to analyse. For example, the Order column codes for the letter position in the string. We only want to analyze the rows that contain a 1, for the first position. So, that is why we add Order==1 to the filter function below. We want to analyze only the reaction times that are correct. That is, when the subject typed the first letter correctly, and did not make a typo. Accuracy is coded in the Correct column, with 1 = correct, and 0 = incorrect. We add Correct==1 to the filtering function. Note the use of ==, that is two equal signs in a row. In R, two equal signs in a row has a special meaning. It means conduct a logic test to determine if one thing is the same as another. We want to analyze only reaction times that are “sensible” to analyze. What does sensible mean? We don’t want to analyze data that is clearly garbage data. For example, if someone fell asleep at the computer and didn’t respond for 15 seconds, that kind of data is not what we want to analyze. If we were to filter the data, and exclude these kinds of outliers, we would be conducting an outlier elimination procedure. Behmer &amp; Crump (2017) did this, and it is commonly done in many different kinds of studies. We skip an extended discussion of outlier elimination for this lab. But, we do introduce the idea of doing it. We want to keep as much of the data as possible. So, what we do is keep all of the RTs that are less than 5000 ms (that’s 5 seconds). To do this, we add PureRTs&lt;5000 to the filter function. ## get subject mean RTs subject_means &lt;- all_data %&gt;% filter(Order==1, Correct==1, PureRTs&lt;5000) %&gt;% group_by(Subject, Stimulus) %&gt;% summarise(mean_rt = mean(PureRTs)) subject_means$Subject&lt;-as.factor(subject_means$Subject) subject_means$Stimulus&lt;-as.factor(subject_means$Stimulus) ## get condition mean RTs plot_means &lt;- subject_means %&gt;% group_by(Stimulus) %&gt;% summarise(means = mean(mean_rt), SEs = sd(mean_rt)/sqrt(length(mean_rt))) ## plot the condition means # re-order stimulus factor for plotting plot_means$Stimulus &lt;- factor(plot_means$Stimulus, levels = c(&quot;Normal&quot;, &quot;Bigrams&quot;, &quot;Random&quot;)) ggplot(plot_means, aes(x=Stimulus, y=means, group=1))+ geom_point()+ geom_line(stat=&quot;identity&quot;)+ geom_errorbar(aes(ymin=means-SEs, ymax=means+SEs), width=.2)+ theme_classic()+ ylab(&quot;Mean Reaction Time (ms)&quot;)+ xlab(&quot;Typing Material&quot;) 8.4.6 Conduct the repeated Measures ANOVA We use the same aov function as we used last time. The only difference is that we add in a new part to the formula. Remember the formula for a one-factor between subjects ANOVA looked like this: aov( DV ~ IV , dataframe), where DV is the name of the column with your independent variable, IV is the name of the column with your independent variable, and dataframe is the name of your data frame containing the means in each condition. The formula for a repeated-measures ANOVA looks like this: aov( DV ~ IV + Error(Subject/IV), dataframe). We have added + Error(Subject/IV). This tells R to use the appropriate error term for the repeated measures ANOVA. In the formula, Subject refers to the name of the column coding your subjects (make sure this is a factor in R), and IV is the name of the column for your independent variable. The formula for our data would be: aov( mean_rt ~ Stimulus + Error(Subject/Stimulus), subject_means). Here is the code below. Just as reminder, the raw data codes every single key press on each row. We don’t want to submit this as the data frame to the aov function. Instead, we need to calculate the data frame for the subject means in each condition. We did that above as a step toward making the graphs. We do it again here to remind you that you need to do this. # get subject means subject_means &lt;- all_data %&gt;% filter(Order==1, Correct==1, PureRTs&lt;5000) %&gt;% group_by(Subject, Stimulus) %&gt;% summarise(mean_rt = mean(PureRTs)) # Make sure IV and Subject are coded as factors subject_means$Subject &lt;- as.factor(subject_means$Subject) subject_means$Stimulus &lt;- as.factor(subject_means$Stimulus) # Conduct the anova aov_out &lt;- aov( mean_rt ~ Stimulus + Error(Subject/Stimulus), subject_means) summary_out &lt;- summary(aov_out) library(xtable) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Residuals 37 3030779.9 81912.970 NA NA Stimulus 2 1157965.2 578982.606 230.5806 0 Residuals1 74 185812.3 2510.977 NA NA Great, we have conducted the ANOVA. We could write up the results of the ANOVA like this: For each subject we computed mean reactions for correct keystrokes in each condition of the Stimulus factor. These means were submitted to a one-factor repeated-measures ANOVA, with Stimulus (Normal, Bigrams, and Random) as the sole factor. The effect of Stimulus was signficant, F(2, 74) = 230.58, MSE = 2510.98, p &lt; 0.001. Note, the p-value shows up as a zero, that’s because it is so small that R doesn’t want to print the actual number 0.000000000000000…1. What does this tell us? The \\(F\\) value we obtained (230.58) almost never occurs by chance. More specifically, the sampling distribution of F from the distribution of no differences virtually never produces a huge F like 230.58 It is super-duper unlikely that chance (sampling error) could have produced the difference we observed. We reject the idea that chance caused the differences, and are very confident that the manipulation (changing the kinds of letters that people have to type), has a causal influence on reaction time in typing. 8.4.6.1 Report the means too Remember, the important goal when conducting analyses, and then writing about them, is to tell people what you did and what you found. This involves more than one step. For this example, we might do three basic things. 1) make a figure to show the means, 2) report the ANOVA so people know if there is support for the inference that the differences between the means are not caused by chance, and 3) report descriptives for the means, so people know what the numbers are (the figure doesn’t show the exact values). We’ve already made the figure and done the ANOVA, let’s report the condition means. To do this, we need to find the means for each condition, collapsing over the means for each subject in each condition. Note that, we already did this to make the figure. Here’s the code again: ## get subject mean RTs subject_means &lt;- all_data %&gt;% filter(Order==1, Correct==1, PureRTs&lt;5000) %&gt;% group_by(Subject, Stimulus) %&gt;% summarise(mean_rt = mean(PureRTs)) subject_means$Subject&lt;-as.factor(subject_means$Subject) subject_means$Stimulus&lt;-as.factor(subject_means$Stimulus) ## get condition mean RTs plot_means &lt;- subject_means %&gt;% group_by(Stimulus) %&gt;% summarise(means = mean(mean_rt), SEs = sd(mean_rt)/sqrt(length(mean_rt))) knitr::kable(plot_means) Stimulus means SEs Bigrams 924.8764 26.69375 Normal 833.1872 24.00055 Random 1077.5361 31.60979 Now, our full write-up of the results would look like this. For each subject we computed mean reactions for correct keystrokes in each condition of the Stimulus factor. These means were submitted to a one-factor repeated-measures ANOVA, with Stimulus (Normal, Bigrams, and Random) as the sole factor. The effect of Stimulus was signficant, F(2, 74) = 230.58, MSE = 2510.98, p &lt; 0.001. The mean reaction time was fastest in the Normal condition (M = 833 ms, SE = 24 ms), followed by the Bigram condition, (M = 924 ms, SE = 27 ms) and slowest in the Random Condition (M = 1078 ms, SE = 32 ms). 8.4.7 Follow-up comparisons The ANOVA tells us that the differences between the means are unlikely to be due to chance. But, remember, this is an omnibus test. It does not tell us if specific pairs of means are different from one another. To determine whether the difference between two specific means is not likely due to chance, we need to conduct follow-up tests. Because this is a repeated-measures design, we can use the paired-samples t-test for follow-up tests. Let’s do two follow-up tests to confirm that the RTs for Normal words were indeed faster than the RTs for the Bigram condition (word-like non-words); and then, let’s confirm that the RTs for the Bigram condition were indeed faster than the RTs for the Random condition. 8.4.7.1 Normal vs Bigrams We use the subject_means data frame. But, we want to rid of all the rows containing the means from the Random condition. We use filter to do that, then we conduct the paired-samples t-test. comparison_df &lt;- subject_means %&gt;% filter(Stimulus != &quot;Random&quot;) t.test(mean_rt~Stimulus, paired=TRUE, var.equal=TRUE, data = comparison_df) ## ## Paired t-test ## ## data: mean_rt by Stimulus ## t = 12.14, df = 37, p-value = 1.807e-14 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 76.38601 106.99253 ## sample estimates: ## mean of the differences ## 91.68927 8.4.7.2 Bigrams vs Random We use the subject_means data frame. But, we want to rid of all the rows containing the means from the Normal condition. We use filter to do that, then we conduct the paired-samples t-test. comparison_df &lt;- subject_means %&gt;% filter(Stimulus != &quot;Normal&quot;) t.test(mean_rt~Stimulus, paired=TRUE, var.equal=TRUE, data = comparison_df) ## ## Paired t-test ## ## data: mean_rt by Stimulus ## t = -14.212, df = 37, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -174.4245 -130.8949 ## sample estimates: ## mean of the differences ## -152.6597 8.4.8 Reporting everything Now we can look at some write-ups that report everything we did, and everything we want to know. I’ll show you two ways to do it. 8.4.8.1 First way In the first way, we embed the results of the t-test into the description of the mean reaction times. For each subject we computed mean reactions for correct keystrokes in each condition of the Stimulus factor. These means were submitted to a one-factor repeated-measures ANOVA, with Stimulus (Normal, Bigrams, and Random) as the sole factor. The effect of Stimulus was significant, F(2, 74) = 230.58, MSE = 2510.98, p &lt; 0.001. The mean reaction time was significantly faster in the Normal condition (M = 833 ms, SE = 24 ms), compared to the Bigram condition, (M = 924 ms, SE = 27 ms), t(37) = 12.14, p&lt;0.001. Additionally, mean reactions in the Bigram condition were significantly faster than the Random Condition (M = 1078 ms, SE = 32 ms), t(37) = 14.21, p &lt; 0.001. 8.4.8.2 Second way In the second way, we first report the means as we did the very first time, and then after that we report the t-test results to highlight the size the of the differences between each comparison. For each subject we computed mean reactions for correct keystrokes in each condition of the Stimulus factor. These means were submitted to a one-factor repeated-measures ANOVA, with Stimulus (Normal, Bigrams, and Random) as the sole factor. The effect of Stimulus was significant, F(2, 74) = 230.58, MSE = 2510.98, p &lt; 0.001. The mean reaction time was fastest in the Normal condition (M = 833 ms, SE = 24 ms), followed by the Bigram condition, (M = 924 ms, SE = 27 ms) and slowest in the Random Condition (M = 1078 ms, SE = 32 ms). Mean reaction times were significantly faster (M = 91 ms) in the Normal than Bigrams condition, t(37) = 12.14, p &lt; 0.001. And, mean reaction times were significantly faster (M = 152 ms) in the Bigrams than Random condition, t(37) = 14.21, p &lt; 0.01. There are other ways to write-up statistical results. These are just some example recipes. The important thing is to: Say what the numbers were that you are analyzing Say what the statistical test was Say the results of the statistical test Say what the patterns of means were Say what the follow-up tests were when you test differences between specific means. Add a table or figure so it is easier to “see” the results. 8.4.9 Generalization Exercise Your task is to conduct another repeated-measures ANOVA. Rather than using the reaction time for the first-keystroke as the dependent measure, you will use the reaction times between all of the keystrokes in each word, these are called interkeystroke intervals. The Order variable is used to code keystroke position (1 to 5). You will want to analyze only the PureRTs that have an Order greater than 1. For example, you could use the following code to get the subject_means for the mean interkeystroke intervals. subject_means &lt;- all_data %&gt;% filter(Order &gt; 1, Correct==1, PureRTs&lt;5000) %&gt;% group_by(Subject, Stimulus) %&gt;% summarise(mean_rt = mean(PureRTs)) A. Make a figure for the new DV B. Report the ANOVA table for the new repeated measures ANOVA C. Discuss whether the general pattern is the same as before. 8.4.10 Writing assignment (2 points - Graded) Explain the concept of \\(SS_\\text{Total}\\) (.5 points) Explain the concept of partitioning SS_ into smaller pieces. What is the goal of the spitting? (.5 points) Explain the major difference between a between-subjects ANOVA and repeated-measures ANOVA in terms of what is being partioned. (1 point) General grading. You will receive 0 points for missing answers You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 8.5 Excel How to do it in Excel 8.6 SPSS In this lab, we will use SPSS to: Produce a frequency histogram and remove outliers Conduct and graph One-Factor Repeated Measures ANOVA Conduct planned comparisons using a paired-samples t-test 8.6.1 Experiment Background In this experiment, Behmer and Crump (2017) recruited 38 subjects to type words presented on a screen as quickly as they could. The independent variable was typing material and it had 3 levels: Normal (5 letter English words), Bigrams (5 letter non-words that have properties like real words), and Random (random 5 letter strings). The authors wanted to know whether reaction time (RT) was different according to the type of word being typed. Dependent Variables: There were three dependent variables, that all measured different aspects of typing performance. Reaction times (RTs) were defined as the temporal interval between seeing a stimulus (to type), and then starting to type it (first key press). Inter-keystroke intervals (IKSIs) are the times between each key-press. Last, accuracy was also measured (correct or incorrect key-presses). For this analysis we will use Pure RTs as our one DV. Nota bene: This is a repeated measures design because each participant typed letter strings from the word, bigrams, and random conditions. 8.6.2 Produce a frequency histogram and remove outliers Here is a link to the data file. It is named BehmerCrump.sav. Your data should look like this: First, we’ll be creating a histogram to look at our data. Go to Graphs, then Legacy Dialogs, then Histogram… The next window will ask you to specify the variable you would like graphed. Choose PureRTs from the list on the left and move it into the “Variable” field using the arrow. Click OK. SPSS will produce a frequency histogram of your data. Notice that the RTs form a positively skewed distribution. Most RT measurements are on the lower end of the scale, and there are very few RTs that are higher than 5000ms. These measurements could have resulted from subjects falling asleep, looking at their phones, or being otherwise distracted in the middle of the experiment. We want to remove those values so they do not influence and mischaracterize our results. To do this, go to the top menu and choose Data, then Select Cases… The next window will ask you which cases to select. We specifically want to remove any cases larger than 5000, so check off If condition is satisfied: Then click If… The window that follows will ask you to specify the condition for inclusion. Find the variable PureRTs in the left-hand list and move it to the field on top using the arrow. Then, type “&lt; 5000” to specify that we want to keep only values under 5000ms. Click Continue. Your data has now been edited so that trials on which the PureRTs value was greater than 5000 have been removed. Let’s take some time to think about this data. We have measurements taken from many participants across multiple trials and multiple conditions. Our goal is to be able to come up with a single RT for each person per condition. The only way to do this is to take an individual’s RTs for a particular condition and average them. To do this, we need to calculate means. First, go to Analyze, then Compare Means, then Means… In the next window, move the PureRTs variable into the “Dependent List” field. In the field below, labeled “Independent List,” place the Subject variable: Then, click Next. The bottom field will become blank again, and you can now place the Stimulus variable into it. Click OK. SPSS will produce an output table containing each subject’s average RT per condition: 8.6.3 Conduct and graph One-Factor Repeated Measures ANOVA For this part of the tutorial, we will switch over to a new SPSS file. Here is the link; it’s called BehmerCrumpMeanRTs.sav. When you open the file, it should look like this: Notice that this file contains the means from the table we just created. Each person’s data is contained within a row: there are 3 measurements corresponding to all stimulus conditions. To calculate a One-Factor Repeated Measures ANOVA, go to Analyze, then General Linear Model, then Repeated Measures… The next window will ask you to label your within-subjects variable. Type Stimulus into the “Within-Subjects Factor Name” field. Indicate that this variable has 3 levels. Then click Add, and then Define. In the next window, move all 3 conditions listed on the left into the “Within-Subjects Variables” field. Click OK. SPSS will produce an output table labeled “Tests of Within-SUbjects Effects” that contains The F statistic and its corresponding p-value. From this table, we see that there is a significant effect of stimulus on RT, F(2, 74)= 420.33, p&lt;.05. In order to graph this data and look at the means, go to Graphs, then Legacy Dialogs, then Bar… In the next window, choose Simple, but this time select Summaries of separate variables, then Define: In the next window, move the three stimulus conditions listed in the field on the left into the field labeled “Bars Represent.” Then click OK. SPSS will produce a bar graph with each bar representing the mean of each of the conditions. We can see that the Random condition has the longest RT, followed by Bigrams, and then Normal. However, at this point we do not know which groups are significantly different from the others. 8.6.4 Conduct planned comparisons using a paired-samples t-test To find out where the difference among these 3 conditions exists, we will use a planned comparison in the form of a paired-samples t-test. This method takes 2 groups at a time and tests for pairwise differences. There are three comparisons that can be made here: normal vs. bigram bigram vs. random random vs. normal We will use a paired-samples t-test instead of an independent-samples t-test because in each comparison, the same people are being remeasured in each group. To begin, go to Analyze, then Compare Means, then Paired Samples T-test… In the next window, move the two conditions of our first pairwise comparison (normal vs. bigram) into the field on the right using the arrow. Click OK. SPSS will produce a series of tables. The “Paired Samples test” table contains the t-statistic and its associated p-value. Looking at this output, we can see that the Normal and Bigrams conditions are indeed significantly different, t(37)= 13.09, p&lt;.05. You can use this same method for the remaining comparisons. 8.6.5 Practice Problems Run the same analysis as illustrated in this lab tutorial but with accuracy (correct) as the dependent variable. Use an alpha level of .05. Remember to calculate means per subject and stimulus first. This will generate a table, whose values you can enter into a new SPSS spreadsheet file. Is there an effect of stimulus on error rate? If so, conduct the appropriate planned comparisons. Graph the means using a bar graph; include +/-1 SEM Error bars. 8.7 JAMOVI How to do it in JAMOVI "],["lab-9-factorial-anova.html", "Chapter 9 Lab 9: Factorial ANOVA 9.1 Does standing up make you focus more? 9.2 Lab Skills Learned 9.3 Important Stuff 9.4 R 9.5 Excel 9.6 SPSS 9.7 JAMOVI", " Chapter 9 Lab 9: Factorial ANOVA Simplicity is complex. It’s never simple to keep things simple. Simple solutions require the most advanced thinking. —Richie Norton 9.1 Does standing up make you focus more? This lab activity uses the data from “Stand by your Stroop: Standing up enhances selective attention and cognitive control” (Rosenbaum, Mama, Algom, 2017) to teach the analysis of a 2x2 design using ANOVA. Although the research design is a 2x2 repeated meaures design, we treat the design both as repeated measures, and as a between-subjects design to illustrate how to conduct either type of ANOVA in software. 9.1.1 STUDY DESCRIPTION Do you pay more attention when you are sitting or standing? We analyse the data from “Stand by your Stroop: Standing up enhances selective attention and cognitive control” (Rosenbaum, Mama, Algom, 2017). This paper asked whether sitting versus standing would influence a measure of selective attention, the ability to ignore distracting information. They used a classic test of selective attention, called the Stroop effect. In a typical Stroop experiment, subjects name the color of words as fast as they can. The trick is that sometimes the color of the word is the same as the name of the word, and sometimes it is not. Here are some examples: Congruent trials occur when the color and word match. So, the correct answers for each of the congruent stimuli shown would be to say, red, green, blue and yello. Incongruent trials occur when the color and word mismatch. The correct answers for each of the incongruent stimuli would be: blue, yellow, red, green. The Stroop effect is an example of a well-known phenomena. What happens is that people are faster to name the color of the congruent items compared to the color of the incongruent items. This difference (incongruent reaction time - congruent reaction time) is called the Stroop effect. Many researchers argue that the Stroop effect measures something about selective attention, the ability to ignore distracting information. In this case, the target information that you need to pay attention to is the color, not the word. For each item, the word is potentially distracting, it is not information that you are supposed to respond to. However, it seems that most people can’t help but notice the word, and their performance in the color-naming task is subsequently influenced by the presence of the distracting word. People who are good at ignoring the distracting words should have small Stroop effects. They will ignore the word, and it won’t influence them very much for either congruent or incongruent trials. As a result, the difference in performance (the Stroop effect) should be fairly small (if you have “good” selective attention in this task). People who are bad at ignoring the distracting words should have big Stroop effects. They will not ignore the words, causing them to be relatively fast when the word helps, and relatively slow when the word mismatches. As a result, they will show a difference in performance between the incongruent and congruent conditions. If we take the size of the Stroop effect as a measure of selective attention, we can then start wondering what sorts of things improve selective attention (e.g., that make the Stroop effect smaller), and what kinds of things impair selective attention (e.g., make the Stroop effect bigger). The research question of this study was to ask whether standing up improves selective attention compared to sitting down. They predicted smaller Stroop effects when people were standing up and doing the task, compared to when they were sitting down and doing the task. 9.1.2 Study Methods The design of the study was a 2x2 repeated-measures design. The first IV was congruency (congruent vs incongruent). The second IV was posture (sitting vs. standing). The DV was reaction time to name the word. There were 50 participants in the study. 9.2 Lab Skills Learned Conducting a 2x2 between-subjects ANOVA Conducting a 2x2 repeated-measures ANOVA 9.3 Important Stuff citation: Rosenbaum, D., Mama, Y., &amp; Algom, D. (2017). Stand by Your Stroop: Standing Up Enhances Selective Attention and Cognitive Control. Psychological science, 28(12), 1864-1867. Link to .pdf of article Data in .csv format 9.4 R 9.4.1 Load the data Remember that any line with a # makes a comment and the code does not run. Below is how to load the .csv data from the online repository, or from a local file (you need to change the file path to where the local file is, if you downloaded it). The data contains all of the measures and conditions from Experiment 1 in the paper. library(data.table) #all_data &lt;- fread(&quot;https://github.com/CrumpLab/statisticsLab/raw/master/stroop_stand.csv&quot;) all_data &lt;- fread(&quot;data/stroop_stand.csv&quot;) 9.4.2 Inspect the dataframe This will give you a big picture of the data frame. Click the button to view it in your browser, then take a look to see what is in it. library(summarytools) view(dfSummary(all_data)) We see there are four columns of numbers. The column names tell us whether the data is for a congruent or incongruent condition, and whether the participant was sitting or standing. Note, this data is in wide-format, not long-format. Each subject has 4 measures per row. We will need to change this to work with the data in R. 9.4.3 Get the data you need This data file contains all of the data from Experiment 1 in the paper. So, we don’t need to get rid of any rows. 9.4.4 Get the data into the format you want As mentioned before we need to convert the data from wide to long format. What we want at the end of this conversion is: A column for the subject variable A column for the congruency variable A column for the posture (sit vs. stand) variable A column for the DV ( mean reaction times) We look at two ways to do the transformation from wide to long. The first way is to “do it by hand,” which refers to creating every variable individually, and then putting them together in a single data frame. This next bit of code does this, and you can check out stroop_df to see the result. RTs &lt;- c(as.numeric(unlist(all_data[,1])), as.numeric(unlist(all_data[,2])), as.numeric(unlist(all_data[,3])), as.numeric(unlist(all_data[,4])) ) Congruency &lt;- rep(rep(c(&quot;Congruent&quot;,&quot;Incongruent&quot;),each=50),2) Posture &lt;- rep(c(&quot;Stand&quot;,&quot;Sit&quot;),each=100) Subject &lt;- rep(1:50,4) stroop_df &lt;- data.frame(Subject,Congruency,Posture,RTs) Another way to transform between long and wide is to use R functions that were designed to do this job. For example there are the spread and gather functions from the tidyr package, and the melt and cast functions, which also do some data frame transforming. The transformation from wide to long can be complicated depending on the structure of the data, and you may often find it helpful to google these functions to look for more examples of their use. Let’s use the tidyr gather function to change our data from wide to long library(tidyr) stroop_long&lt;- gather(all_data, key=Condition, value=RTs, congruent_stand, incongruent_stand, congruent_sit, incongruent_sit) Take a moment to look at stroop_long. It is almost what we need. It is certainly in long format. There is a column for Subjects, and a column for the RTs, but there is only one column for both IVs, that’s no good. There are two IVs, we need two columns. Fortunately, the levels in the new Condition column are coded with a specific and consistent structure: congruent_stand incongruent_stand congruent_sit incongruent_sit If only we could split these by the \"_\" (underscore), then we would have two columns for the congruency and the posture variable. We can do this using tstrsplit from the data.table package new_columns &lt;- tstrsplit(stroop_long$Condition, &quot;_&quot;, names=c(&quot;Congruency&quot;,&quot;Posture&quot;)) You can look inside new_columns to see that we succesfully made the split. Now, we just need to add them on to the stroop_long data frame. stroop_long &lt;- cbind(stroop_long,new_columns) Look at the stroop_long data frame and you will find that we have added two new columns, one that codes for Congruency, and the other that codes for posture. Using this method we still haven’t added a column for subjects. We can do that like this: stroop_long &lt;- cbind(stroop_long,Subject=rep(1:50,4)) 9.4.4.1 The independent variables After all of this data transformation you should be familiar with the IVs. Congruency: congruent vs. incongruent Posture: stand vs. sit 9.4.4.2 The dependent variables There is only one DV that we look at, that is the mean reaction time to name the color. 9.4.5 Look at the data Remember before we do any analysis, we always want to “look” at the data. This first pass let’s us know if the data “look right.” For example, the data file could be messed up and maybe there aren’t any numbers there, or maybe the numbers are just too weird. Let’s make a quick histogram of all of the RT data, like this: hist(stroop_long$RTs) This looks pretty good, there are no super huge numbers here. 9.4.6 Look at the means As part of looking at the data, we might as well make a figure that shows the mean reaction times in each condition, and some error bars to look at the spread in each condition. The following code takes two important steps: Get the means for each condition, by averaging over the means for each subject. These are put into the data frame called plot_means. Make a graph with the plot_means data frame using ggplot2. library(dplyr) library(ggplot2) plot_means &lt;- stroop_long %&gt;% group_by(Congruency,Posture) %&gt;% summarise(mean_RT = mean(RTs), SEM = sd(RTs)/sqrt(length(RTs))) ggplot(plot_means, aes(x=Posture, y=mean_RT, group=Congruency, fill=Congruency))+ geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ geom_errorbar(aes(ymin=mean_RT-SEM, ymax=mean_RT+SEM), position=position_dodge(width=0.9), width=.2)+ theme_classic()+ coord_cartesian(ylim=c(700,1000)) 9.4.7 Conduct the ANOVA In this lab we will show you how to conduct ANOVAs for factorial designs that are for: fully between-subjects designs (both IVs are between-subjects IVs) fully repeated measures designs (both IVs are repeated measures) The data we are looking at right now is fully repeated measures. However, in this lab we are first going to pretend that the experiment was not repeated measures. We are going to pretend it was fully between-subjects. Then we are going to conduct a between-subjects ANOVA. After that, we will conduct a repeated-measures ANOVA, which is what would be most appropriate for this data set. The overall point is to show you how to both of them, and the discuss how to interpret them and write them both up. 9.4.8 Between Subjects ANOVA We can always conduct a between-subjects version of the ANOVA on repeated-measures data if we wanted to. In this case we wouldn’t really want to do this. But, we will do this for educational purposes to show you how to do it in R. The syntax is very similar to what we do for one-way ANOVAs, remember the syntax was: aov(DV ~ IV, dataframe) If you want to add another IV, all you need to do is insert another one into the formula, like this: aov(DV ~ IV1*IV2, dataframe) Just, switch DV to the name of your dependent measure, and IV1 and IV2 to the names of your independent variables. Finally, put the name of your dataframe. Your dataframe must be in long format with one observation of the DV per row. Our formula will look like this: aov(RTs ~ Congruency*Posture, stroop_long) In plain language, this formula means, analyze RTs by the Congruency and Posture Variables. R will automatically produce the main effects for Congruency and Posture, as well as the interaction (Congruency X Posture). Also, remember, that in the following code, we use a few other functions so that we can print out the results nicely. library(xtable) aov_out&lt;-aov(RTs ~ Congruency*Posture, stroop_long) summary_out&lt;-summary(aov_out) library(xtable) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Congruency 1 576821.635 576821.635 43.7344419 0.0000000 Posture 1 32303.453 32303.453 2.4492381 0.1191950 Congruency:Posture 1 6560.339 6560.339 0.4974029 0.4814808 Residuals 196 2585080.215 13189.185 NA NA We can also have R print out the Grand Mean, the means for each level of each main effect, and the means for the interaction term. This is the same print out you would get in the console for R. It is admittedly not very pretty. There’s probably a way to make the means provided by model.tables() more pretty. If we find a way we will update this section, if you find a way, please let us know. print(model.tables(aov_out,&quot;means&quot;), format=&quot;markdown&quot;) ## Tables of means ## Grand mean ## ## 868.6454 ## ## Congruency ## Congruency ## congruent incongruent ## 814.9 922.3 ## ## Posture ## Posture ## sit stand ## 881.4 855.9 ## ## Congruency:Posture ## Posture ## Congruency sit stand ## congruent 821.9 808.0 ## incongruent 940.8 903.9 9.4.8.1 ANOVA write-up Here are the steps for writing up the results of an ANOVA: Say what means you analyzed Say what test you performed Say the inferential statisic for each of the effects (main effects and interaction) Say the pattern of results for each effect. A short example of the whole write-up is below: Example write-up We submitted the mean reaction times for each group to a 2 (Congruency: congrueny vs. incongruent) x 2 (Posture: Standing vs. Sitting) between-subjects ANOVA. There was a main effect of Congruency, F (1, 196) = 43.73, MSE = 13189.185, p &lt; 0.001. Mean reaction times were slower for incongruent (922 ms) than congruent groups (815 ms). There main effect of Posture was not significant, F (1, 196) = 2.45, MSE = 13189.185, p =.119. Mean reaction times were slower for sitting (881 ms) than standing groups (855 ms). The two-way interaction between Congruency and Posture was not significant, F (1, 196) = .497, MSE = 13189.185, p &lt; 0.481. For every F-value, we report F (df1, df2) = F-value, MSE = MSE for the error term, and p = x.xxx. In R, the df1, for the df in the numerator is always listed beside the name for a particular effect. For example, Congruency has 1 degree of freedom (there are two condition, and 2-1 =1). Similarly, the relevant F and p-value are listed in the same row as the effect of interest. However, the error term used to calculate the F-value is listed at the bottom, in R this is called “Residuals.” Df2, the df for the denominator is listed beside “Residuals,” in our case it was 196. The important bit is the MSE, which was 13189.185. Notice, that in the write up for each main effect and interaction we always reported the same MSE. That’s because in this between-subjects version of the ANOVA, we divide by same very same error term. Also notice that we don’t report the sums of squares of the MSE for the effect. Why not? The main reason why not is that you can reconstruct those missing numbers just by knowing the dfs, the MSE for the error, and the f-value. For example, you can get the MSE for the effect by multiplying the F-value by the MSE for the error. Now you have both MSEs. You can get both Sums of Squares by multiplying by their associated dfs. That’s just working backwards from the F-value. You can always check if you are reporting the correct MSE for the error term. If the MSE for your effect (numerator) divided by the MSE you are using for the error term does not equal the F-value, then you must be using the wrong terms! 9.4.9 Repeated measures ANOVA Of course, the design for this experiment was not between-subjects, it was fully within-subjects. Every participant completed both congruent and incongruent trials, while they were standing or sitting. For this reason, we should conduct a repeated measures ANOVA. This way we will be able capitilize on the major benefit provided by the repeated measures design. We can remove the variance due to individual subjects from the error terms we use to calculate F-values for each main effect and interaction. Rember the formula for the one-factor repeated-measures ANOVA, we’ll remind you: aov( DV ~ IV + Error(Subject/IV), dataframe) To do the same for a design with more than one IV we put in another IV to the formula, like this: aov( DV ~ IV1*IV2 + Error( Subject/(IV1*IV2) ), dataframe) DV = name of dependent variable IV1 = name of first independent variable IV2 = name of second indpendent variable Subject = name of the subject variable, coding the means for each subject in each condition dataframe = name of the long-format data frame Here is what our formula will look like: aov(RTs ~ Congruency*Posture + Error(Subject/(Congruency*Posture)), stroop_long) The main thing you need to watch out for when running this analysis in R, is that all your factors need to be factors in R. Often times people will use numbers rather than words or letters to code the levels for specific factors. This can be very often done for the subjects factor, using number 1 for subject one, and number 2 for subject 2. If you want your column variable to be treated as a factor, then you may need to convert it to a factor. We do this below for the Subject variable, which happens to be coded as numbers. If we do not do this, the repeated-measures ANOVA will return incorrect results. For example, if you look at the stroop_long data frame, and click the little circle with an arrow on in it in the environment panel, you should see that Subject is an int. That stands for integer. You should also see that Congruency and Posture are Factor, that’s good. We need to turn Subject into Factor. stroop_long$Subject &lt;- as.factor(stroop_long$Subject) #convert subject to factor summary_out&lt;-aov(RTs ~ Congruency*Posture + Error(Subject/(Congruency*Posture)), stroop_long) library(xtable) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Residuals 49 2250738.636 45933.4416 NA NA Congruency 1 576821.635 576821.6349 342.452244 0.0000000 Residuals 49 82534.895 1684.3856 NA NA Posture 1 32303.453 32303.4534 7.329876 0.0093104 Residuals1 49 215947.614 4407.0942 NA NA Congruency:Posture 1 6560.339 6560.3389 8.964444 0.0043060 Residuals 49 35859.069 731.8177 NA NA print(model.tables(aov_out,&quot;means&quot;), format=&quot;markdown&quot;) ## Tables of means ## Grand mean ## ## 868.6454 ## ## Congruency ## Congruency ## congruent incongruent ## 814.9 922.3 ## ## Posture ## Posture ## sit stand ## 881.4 855.9 ## ## Congruency:Posture ## Posture ## Congruency sit stand ## congruent 821.9 808.0 ## incongruent 940.8 903.9 What’s different here? Are any of the means different now that we have conducted a repeated-meaures version of the ANOVA, instead of the between-subjects ANOVA? NO! The grand mean is still the grand mean. The means for the congruency conditions are still the same, the means for the Posture conditions are still the same, and the means for the interaction effect are still the same. The only thing that has changed is the ANOVA table. Now that we have removed the variance associated with individual subjects, our F-values are different, and so are the-pvalues. Using an alpha of 0.05, all of the effects are “statistically significant.” Each main effect and the one interaction all have their own error term. In the table below, R lists each effect in one row, and then immediately below lists the error term for that effect. 9.4.9.1 ANOVA write-up Here is what a write-up would look like. Example write-up We submitted the mean reaction times for each subject in each condition to a 2 (Congruency: congrueny vs. incongruent) x 2 (Posture: Standing vs. Sitting) repeated measures ANOVA. There was a main effect of Congruency, F (1, 49) = 342.45, MSE = 1684.39, p &lt; 0.001. Mean reaction times were slower for incongruent (922 ms) than congruent groups (815 ms). There main effect of Posture was significant, F (1, 49) = 7.33, MSE = 4407.09, p =.009. Mean reaction times were slower for sitting (881 ms) than standing groups (855 ms). The two-way interaction between Congruency and Posture was significant, F (1, 49) = 8.96, MSE = 731.82, p &lt; 0.004. The Stroop effect was 23 ms smaller in the standing than sitting conditions. 9.4.10 Follow-up comparisons In a 2x2 ANOVA there are some follow-up comparisons you may be interested in making that are not done for you with the ANOVA. If an IV only have 2 levels, then you do not have to do any follow-up tests for the main effects of those IVs (that’s what the main effect from the ANOVA tells you). So, we don’t have to do follow-up comparisons for the main effects of congruency or posture. What about the interaction? Notice the interaction is composed of four means. The mean RT for congruent and incongruent for both sitting and standing. Also notice that we only got one F-value and one p-value from the ANOVA for the interaction term. So, what comparison was the ANOVA making? And what comparisons was it not making? It has already made one comparison, so you do not need a follow-up test for that…which one is it? If you remember back to the textbook, we should you how to analyze a 2x2 design with paired-samples t-tests. We analyzed the interaction term as the comparison of difference scores. Here, we would find the differences scores between incongruent and congruent for each level of the posture variable. In other words, we compute the Stroop effect for each subjet when they were sitting and standing, then compare the two Stroop effects. This comparison is looking at the difference between two differences scores, and that is the comparison that the ANOVA does for the interaction. To be more precise the comparison is: \\((sit:incongruent - sit:congruent) - (stand:incongruent - stand:congruent)\\) What comparisons are not made, what are the other ones we could do? Here are some: sit:congruent vs sit:incongruent stand:congruent vs stand:incongruent sit:congruent vs stand:incongruent stand:congruent vs sit:incongruent We could add a few more. These kinds of comparisons are often called simple effects, apparently referring to the fact they are just comparing means in a straight forward way. There are a few different comparisons we could do. Should we do any of them? Whether or not you compare means usually depends on the research question you are asking. Some comparisons make sense within context of the research question, and others may not. We will do two follow-up comparisons. Our question will be about the size of the Stroop effect in the Sitting and Standing conditions. We already know that the size of the effect was smaller in the Standing condition. But, we don’t know if it got so small that it went away (at least statistically speaking). Now, we can ask: Was the Stroop effect only for the sitting condition statistically signficant. In other words, was the difference in mean RT between the incongruent and congruent conditions unlikely under the null (or unlikely to be produced by chance) Was the Stroop effect only for the standing condition statistically signficant. In other words, was the difference in mean RT between the incongruent and congruent conditions unlikely under the null (or unlikely to be produced by chance) We can answer both of the questions using paired sample t-tests comparing the means in question 9.4.10.1 Sitting Stroop means_to_compare &lt;- stroop_long %&gt;% filter(Posture==&quot;sit&quot;) t.test(RTs~Congruency, paired=TRUE, var.equal=TRUE, data=means_to_compare) ## ## Paired t-test ## ## data: RTs by Congruency ## t = -16.516, df = 49, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -133.3250 -104.3997 ## sample estimates: ## mean of the differences ## -118.8623 9.4.10.2 Standing Stroop means_to_compare &lt;- stroop_long %&gt;% filter(Posture==&quot;stand&quot;) t.test(RTs~Congruency, paired=TRUE, var.equal=TRUE, data=means_to_compare) ## ## Paired t-test ## ## data: RTs by Congruency ## t = -14.327, df = 49, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -109.41185 -82.49462 ## sample estimates: ## mean of the differences ## -95.95323 9.4.11 Generalization Exercise Here are some means for four conditions in a 2x2 Design: IV1 Level 1 Level 2 IV 2 Level 1 100 200 Level 2 200 500 Your task is to: A. Compute the mean difference for the main effect of IV1 B. Compute the mean difference for the main effect of IV2 C. Compute the mean difference for the interaction 9.4.12 Writing asignment (2 points - Graded) Factorial designs have main effects and interactions. Explain the concept of a main effect. (1 point) Explain the concept of an interaction. (1 point) General grading. You will receive 0 points for missing answers You must write in complete sentences. Point form sentences will be given 0 points. Completely incorrect answers will receive 0 points. If your answer is generally correct but very difficult to understand and unclear you may receive half points for the question 9.5 Excel How to do it in Excel 9.6 SPSS In this lab, we will use SPSS to: Conduct and graph a Between-Subjects Two-Factor Analysis of Variance (ANOVA) Calculate simple effects Conduct and graph a Repeated Measures Two-Factor Analysis of Variance (ANOVA) Calculate simple effects 9.6.1 Experiment Background The Rosenbaum, Mama, and Algom (2017) paper asked whether sitting versus standing would influence a measure of selective attention, the ability to ignore distracting information. Selective attention here is measured as performance on the Stroop task. In a typical Stroop experiment, subjects name the color of words as fast as they can. The trick is that sometimes the color of the word is the same as the name of the word, and sometimes it is not. The design of the study was a 2x2 design. The first IV was congruency (congruent vs incongruent). The second IV was posture (sitting vs. standing). The DV was reaction time (RT)to name the word. 9.6.2 Conduct a Between-Subjects Two-Factor Analysis of Variance (ANOVA) Here is a link to our data file. It is named stroopsit.sav. Your data should look like this: Notice that in this file, there are 200 rows (corresponding to 200 subjects). Each subject is categorized according to 2 independent variables: posture (whether they were in the standing or sitting condition), and congruency (whether the stimuli they received were congruent or incongruent). In this application, we are treating the design as between-subjects. This means each participant only experienced one of the following four conditions: congruent stand incongruent stand congruent sit incongruent sit Now, let’s run our Two-Factor ANOVA. Go to Analyze, then General Linear Model, then Univariate… A window will appear asking for you to specify your variables. Place RT into the “Dependent Variable” field, and put both “posture” and “congruency” into the “Fixed Factors” field. Now, before pressing anything else, click on Plots… (this will allow us to create a plot of means right along with our SPSS output). In the plots window, you must place the congruency and posture variables into the fields labeled “Horizontal Axis”\" and “Separate Lines.” You can place either variable in either field, and the graph will still make sense. However, for this example, I will be putting congruency into the “Separate Lines”\" field, and posture in “Horizontal Axis”: You must click Add for this table to be included in your SPSS output. After you do this, Your window should look like this: Then click Continue and OK. Your output will include a table labeled “Tests of Between Subjects Effects” and a plot of the means. You can see from this output that: There is no main effect of posture, F(1, 196)=2.449, p=NS There is a main effect of congruency, F(1, 196)=43.734, p&lt;.05 where (from looking at the plot) incongruent stimuli were processed with a longer reaction time than congruent stimuli. There is no interaction between posture and congruency, F(1, 196)=.497, p=NS 9.6.3 Calculate simple effects In previous ANOVAs, we have conducted both planned and unplanned comparisons to locate the significant differences. In the case of a two-factor ANOVA, there are many comparisons that can be made. However, the comparisons you choose will depend on the results of your ANOVA. In this case, we found only a significant main effect of congruency. So, we can explore this effect more by asking: For the sitting condition only, are congruent and incongruent means significantly different? For the standing condition only, are congruent and incongruent means significantly different? To answer these questions, we must calculate something called simple effects. They look at mean differences within levels of a single independent variable. In order to acheive this in SPSS, we have to get into the coding environment that runs the SPSS program; it’s called Syntax. Don’t freak out here, we’re going to make this as simple as possible. First, let’s go to the menu just as we did to run this ANOVA. Analyze, General Linear Model, then Univariate… The next window looks just as we left it, with the variables in the right places. Here, click on the button that says Paste. The result will be a new window with code already entered into it. This code correponds to the ANOVA setup we have specified. You are going to edit this code so that it looks like this: UNIANOVA RT BY posture congruency /METHOD=SSTYPE(3) /INTERCEPT=INCLUDE /PLOT=PROFILE(posture * congruency) /EMMEANS=TABLES(posture * congruency) COMPARE(congruency) ADJ(LSD) /CRITERIA=ALPHA(.05) /DESIGN=posture congruency posture * congruency. Once it does, click the big green triangle (“play”) at the top of the window. SPSS will produce a series of tables. The one that refers to simple effects is called “Pairwise Comparisons.” From this table, we can see that, In the sitting condition, the congruent and incongruent conditions are significantly different (p&lt;.05). In the standing condition, the congruent and incongruent conditions are significantly different (p&lt;.05). 9.6.4 Conduct a Repeated Measures Two-Factor Analysis of Variance (ANOVA) Next, we will use this same data but treat it as a repeated measures (within-subjects) design (just as in the original experiment). This means each person in the study experienced ALL 4 conditions. To start, we need a new data file. Here is link. This data file is called stroopsit_RM.sav. I have set it up so that the data is arranged for a repeated-measures design. Notice that each person is represented by a single row, and the columns correspond to the 4 conditions: Now, to run a repeated measures ANOVA, we go to Analyze, then General Linear Model, then Repeated Measures: The next window will ask for the name and number of levels of your within-subjects factors (variables); We have two within-subjects factors: posture and congruency, and each factor has two levels. We must enter then here one at a time. First, change the default factor1 name to congruency, and specify that it has 2 levels: Click Add, and then enter a new within-subjects factor, posture with 2 levels as well: Now, click Add, and then Define. The next window asks for the 4 conditions produced by our two independent variables. Because we entered posture first, and congruency next, the four conditions, in THIS EXACT order, are entered as follows: Click Plots and specify a graph exactly as we did in the previous example. Place posture in the “Separate Lines” field and congruency in the “Horizontal axis” field. Remember, you must click Add to process this graph! Now, click Continue, then OK. SPSS will produce several tables of output, along with a graph. The Fs for our ANOVA are located in the table labeled “Tests of Within-Subjects Effects,” and the plot we requested is found below: According to this output: 1. There is a main effect of congruency, F(1, 49)=342.45, p&lt;.05. 2. There is a main effect of posture, F(1, 49)=7.33, p&lt;.05. 3. There is an interaction effect between congruency and posture, F(1, 49)=8.96, p&lt;.05. From the plot we can see that incongruent words produced longer RTs than congruent words. We also see that sitting produced longer RTs than standing. As for the interaction, you can see that the difference between congruent and incongruent is more pronounced (larger) in the sitting condition than in the standing condition. 9.6.5 Calculate simple effects We may want to dissect these effects similarly to the way did in the previous example. This time, because all 3 effects were significant, we will ask SPSS to conduct simple effects for both congruency and posture. To begin, go to Analyze, General Linear Model, and Repeated Measures… In the next window, all of your saved settings are still there, so click Define. In the next window, click Paste: You will be taken to the SPSS Syntax window. Change the syntax you see to the following: GLM congruent_stand congruent_sit incongruent_stand incongruent_sit /WSFACTOR=congruency 2 Polynomial posture 2 Polynomial /METHOD=SSTYPE(3) /PLOT=PROFILE(congruency * posture) /EMMEANS=TABLES(congruency * posture) compare(congruency) adj(lsd) /EMMEANS=TABLES(congruency * posture) compare(posture) adj(lsd) /CRITERIA=ALPHA(.05) /WSDESIGN=congruency posture congruency * posture. Click the green triangle (“play”)at the top and you will see several output tables appear in the output window. We will focus on the following two: When reading these tables, remember that: For posture, 1=stand and 2=sit For congruency, 1=congruent and 2=incongruent. In this output, we can see that: 1. For standing only, congruent and incongruent RTs are significantly different (p&lt;.05). 2. For sitting only, congruent and incongruent RTs are significantly different (p&lt;.05). 3. For congruent words only, standing and sitting RTs are not significantly different (p=NS). 4. For incongruent words only, standing and sitting are significantly different (p&lt;.05). 9.6.6 Practice Problems Below is fictitious data representing the number of milliimeters a plant has grown under several water/sunlight combinations: Water &amp; Sunlight NoWater &amp; Sunlight Water &amp; NoSunlight NoWater &amp; NoSunlight 1.2 2.4 3.1 2.5 3.0 1.1 2.2 3.4 2.5 1.2 2.5 4.2 1.6 2.4 4.3 2.1 Enter this data into SPSS as appropriate for a Two-Factor Between-Subjects ANOVA (N=16). Perform the ANOVA and report all results in standard statistical reporting format (use alpha=.05). Include a plot of means. Enter this data into SPSS as appropriate for a Two-Factor Repeated-Measures ANOVA (N=4). Perform the ANOVA and report all results in standard statistical reporting format (use alpha=.05). Include a plot of means. 9.7 JAMOVI How to do it in JAMOVI "],["lab-10-mixed-factorial-anova.html", "Chapter 10 Lab 10: Mixed Factorial ANOVA 10.1 Do you remember things better when you take pictures of them? 10.2 Lab Skills Learned 10.3 Important Stuff 10.4 R 10.5 Excel 10.6 SPSS 10.7 JAMOVI", " Chapter 10 Lab 10: Mixed Factorial ANOVA No amount of experimentation can ever prove me right; a single experiment can prove me wrong —Albert Einstein 10.1 Do you remember things better when you take pictures of them? People take pictures of things all the time on their phones. Barasch et al. (2017) asked whether taking pictures of things had consequences for later memory of those experiences. 10.1.1 Study description In Experiment 1, participants visited a museum exhibit. Half of the participants were allowed to take photographs (with camera, at least 10 pictures) and the other half were not (no camera). They freely looked at anything in the exhibit, and were allowed to take pictures of anything they wanted (if they were in the camera condition). Additionally, while visiting the exhibit, participants listened to audio guides about the things the were looking at. After participants were done with the exhibit the returned to the sign-in desk. At this point they were given two memory tests for the things they saw and heard in the exhibit. They were given a visual recognition test containing pictures of objects, and were asked to identify which objects they remembered seeing. They were also given an auditory recognition test containing statements that could have been on the audio guide, and they had to identify which ones they had heard before. This is a 2x2 mixed design. IV 1 was a between-subjects manipulation involving picture-taking (camera vs. no camera). IV2 was a within-subject manipulation of memory test (visual vs. audio). The dependent measure was performance on the memory test. An overarching question was whether or not participants would have better visual memory for exhibit objects when they took pictures, compared to when they didn’t. Additionally, taking pictures or not, may have no influence on memory for the statements in the audio guide. 10.2 Lab Skills Learned Conducting a 2x2 mixed design ANOVA 10.3 Important Stuff citation: Barasch, A., Diehl, K., Silverman, J., &amp; Zauberman, G. (2017). Photographic memory: The effects of volitional photo taking on memory for visual and auditory aspects of an experience. Psychological science, 28(8), 1056-1066. Link to .pdf of article Data in .csv format 10.4 R 10.4.1 Load the data Remember that any line with a # makes a comment and the code does not run. Below is how to load the .csv data from the online repository, or from a local file (you need to change the file path to where the local file is, if you downloaded it). The data contains all of the measures and conditions from Experiment 1 in the paper. library(data.table) #all_data &lt;- fread(&quot;https://github.com/CrumpLab/statisticsLab/raw/master/stroop_stand.csv&quot;) all_data &lt;- fread(&quot;data/study1_data_photo.csv&quot;) 10.4.2 Inspect the dataframe This will give you a big picture of the data frame. Click the button to view it in your browser, then take a look to see what is in it. library(summarytools) view(dfSummary(all_data)) 10.4.3 Get the data you need This data file contains all of the data from Experiment 1 in the paper. 10.4.4 Get the data into the format you want The data is sort of in long-format, we will see that we need to do some transformation after looking more closely at the independent and dependent variables 10.4.4.1 The independent variables Photo vs. No photo is coded in the condition column Memory task (visual vs. audio). There are no column variables describing which memory task people performed. Instead, the percent correct for the visual memory task is coded in the vpercent column, and the percent correct for the audio memory task is coded in the apercent column. We will need to transform the data, we do that after describing the DV 10.4.4.2 The dependent variable In a sense there are two dependent variables, vpercent and apercent. However, we will treat them as a single memory performance variable. 10.4.4.3 Transforming the data There were 297 participants. You can check that we have data for each participant by looking at the labID column. length(unique(all_data$labID)) ## [1] 297 There are 297 rows of data, each corresponding to a single subject. Let’s build a data frame we can use for analysis subjects &lt;- as.factor(c(all_data$labID,all_data$labID)) memory_accuracy &lt;- c(all_data$vpercent,all_data$apercent) memory_task&lt;-as.factor(rep(c(&quot;visual&quot;,&quot;audio&quot;), each=297)) camera &lt;- as.factor(c(all_data$condition,all_data$condition)) new_data &lt;- data.frame(subjects, memory_accuracy, memory_task, camera) 10.4.5 Look at the data Remember before we do any analysis, we always want to “look” at the data. This first pass let’s us know if the data “look right.” For example, the data file could be messed up and maybe there aren’t any numbers there, or maybe the numbers are just too weird. For example, the memory performance DV is a percent, so it should range between 0 and 100, if we find numbers that are negative or greater than 100, then we know something is wrong. hist(new_data$memory_accuracy) range(new_data$memory_accuracy) ## [1] 11.11111 100.00000 Great, the numbers check out, they are all inside the range of 0 to 100. 10.4.6 Look at the means As part of looking at the data, let’s graph the means in each condition. Get the means for each condition, by averaging over the means for each subject. These are put into the data frame called plot_means. Make a graph with the plot_means data frame using ggplot2. library(dplyr) library(ggplot2) plot_means &lt;- new_data %&gt;% group_by(memory_task,camera) %&gt;% summarise(mean_accuracy = mean(memory_accuracy), SEM = sd(memory_accuracy)/sqrt(length(memory_accuracy))) ggplot(plot_means, aes(x=memory_task, y=mean_accuracy, group=camera, fill=camera))+ geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ geom_errorbar(aes(ymin=mean_accuracy-SEM, ymax=mean_accuracy+SEM), position=position_dodge(width=0.9), width=.2)+ theme_classic()+ coord_cartesian(ylim=c(50,100)) 10.4.7 Conduct the ANOVA This is a 2x2 mixed design. So, we need to run a mixed design ANOVA. The formula for running a mixed design ANOVA is very similar what we have seen before. The only difference is that we specify which IV is within-subjects by placing it in the error term: aov(DV ~ IVB * IVW + Error(Subjects/IVW, data) library(xtable) aov_out&lt;-aov(memory_accuracy ~ camera*memory_task + Error(subjects/memory_task), new_data) summary_out&lt;-summary(aov_out) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) camera 1 641.9545 641.9545 2.26222 0.1336337 Residuals 295 83712.7032 283.7719 NA NA memory_task 1 26786.5902 26786.5902 108.84808 0.0000000 camera:memory_task 1 3394.1862 3394.1862 13.79237 0.0002441 Residuals 295 72597.0014 246.0915 NA NA Let’s also print out the means for the main effects and interaction: print(model.tables(aov_out,&quot;means&quot;), format=&quot;markdown&quot;) ## Tables of means ## Grand mean ## ## 69.86532 ## ## camera ## nophoto photo ## 68.83 70.91 ## rep 298.00 296.00 ## ## memory_task ## audio visual ## 76.58 63.15 ## rep 297.00 297.00 ## ## camera:memory_task ## memory_task ## camera audio visual ## nophoto 77.93 59.73 ## rep 149.00 149.00 ## photo 75.23 66.59 ## rep 148.00 148.00 10.4.8 Generalization Exercise The generalization exercise is the writing assignment for this lab. 10.4.9 Writing assignment Your writing assignment is to write up the results of the ANOVA that you just conducted. You can follow the general recipe from the ANOVA write-up from the previous lab on factorial designs. Your write up will be in two parts (3 points total) Part 1 Say what the numbers were that you are analyzing Say what the statistical test was Say the results of the statistical test for each main effect and interaction For each effect, say what the patterns of the means were. Part 2 Conduct follow-up t-tests. A. Determine whether memory accuracy is better in the camera vs no camera condition for the visual memory task. Report the t-test and the pattern of means. B. Determine whether memory accuracy is better in the camera vs. no camera condition for the audio memory task. Report the t-test and the pattern of means. 10.5 Excel How to do it in Excel 10.6 SPSS In this lab, we will use SPSS to: Conduct and graph a Mixed-Factorial Analysis of Variance (ANOVA) Calculate simple effects 10.6.1 Experiment Background People take pictures of things all the time on their phones. Barasch et al. (2017) asked whether taking pictures of things had consequences for later memory of those experiences. In this experiment participants visited a museum exhibit. Half the participants were able to use a camera to document their visit, while the other half were not, all while listening to an audio tour of the exhibit. At the end of the visit, everyone was given two memory tests (visual and audio) for the content they saw and heard, respectively. This is a 2x2 Mixed-Factorial design. The individuals in the photo group are different than the individuals in the no photo group (this is our between-subjects variable–it is called condition), while the memory test_type (audio and visual) is our within-subjects variable since everyone took both types of tests. 10.6.2 Conduct a Mixed-Factorial Analysis of Variance (ANOVA) Using SPSS, open the data file linked here. It is called “study1_data_photo.sav.” It should look like this: Scroll through the file. Find the variable named condition. This variable tells you if the row in question corresponds to a person who was or was not able to use a camera. Now, find the variables apercent and vpercent. These variables refer to the percentage score received by everyone on the audio and visual memory tests, respectively. Notice that every row in the data file only has ONE “condition” label. That is, you were either in the camera or no camera condition. BUT, everyone in the file has scores for BOTH tests, audio and visual. This is the way your data must be structed in SPSS in order to perform a mixed-factorial ANOVA. Now, let’s begin. Go to the top menu and choose Analyze, General Linear Model , and Repeated Measures… The next window will ask for you to specify the Within-Subjects variable ONLY. Our within-subjects variable (the variable for which participants were measured across all levels) was the memory test_type. Enter test_type into this field, and specify that there are 2 levels. You must click Add in order to continue: Then click Define. The next window will ask you to specify the levels of your within-subjects variable. Place apercent and vpercent from the list on the left into the field labeled “Within-Subjects Variables.” Then, place condition into the field labeled “Between-Subjects variables.” Now, click Plots. Place condition in the “Separate Lines” field and test_type in the “Horizontal axis” field: Then click Add. Your window will look like this once you’ve done that: Now, click Continue and then OK. SPSS will produce output tables for your ANOVA, as well as a plot: Let’s look at our output tables. Based on its values, we can tell that: There is a significant main effect of test type, F(1, 295)=108.59, p&lt;.05. Overall, memory test scores were higher for the audio test than the video test. There is a significant ineraction effect between test type and condition, F(1, 295)=13.79, p&lt;.05. People taking photos did worse on the audio test than people without photos, however, on the visual test, people taking photos did better than those who did not take photos. There is no significant main effect of condition, F(1, 295)=2.26, p=NS. 10.6.3 Calculate simple effects What if we asked the questions: 1. In the no photo condition only, was there a difference between audio and visual memory score? 2. In the photo condition only, was there a difference between audio and visual memory score? 3. Were audio memory test scores different between photo and no photo conditions? 4. Were visual memory test scores different between photo and no photo conditions? To answer these questions, we must run simple effects. If you remember from earlier labs, we must use SPSS syntax to do this. Go to Analyze, then General Linear Model, then Repeated Measures… In the next window, you’ll find your settings from the previously-run ANOVA have been saved. Click Define. The following window will appear: Click Paste and the SPSS Syntax Editor will appear: Change the code on the screen to the following: GLM apercent vpercent BY condition /WSFACTOR=test_type 2 Polynomial /METHOD=SSTYPE(3) /EMMEANS=TABLES(test_type * condition) compare(test_type) adj(lsd) /EMMEANS=TABLES(test_type * condition) compare(condition) adj(lsd) /CRITERIA=ALPHA(.05) /WSDESIGN=test_type /DESIGN=condition. Click the green triangle (“play”) at the top of the window. The following two tables will appear (among others) in your output window: Keep in mind that for test_type, 1=audio and 2=visual . According to the table, we can see that: In the no photo condition only, there was a significant difference between audio and visual memory (p&lt;.05)? In the photo condition only, there was a significant difference between audio and visual memory (p&lt;.05)? Audio memory test scores in the photo condition were not significantly different from those in the no photo condition (p=NS). Visual memory test scores in the photo condition were significantly different from those in the no photo condition (p&lt;.05). 10.6.4 Practice Problems Using the same data file we used for this lab’s tutorial, run a Mixed-Factorial ANOVA using test type (audio and visual) and Gender (Male, Female). Use an alpha level of .05. Report your results in standard statistical reporting format. Produce a plot of means. 10.7 JAMOVI How to do it in JAMOVI "],["lab-11-choosing-an-appropriate-statistical-test.html", "Chapter 11 Lab 11: Choosing an appropriate statistical test 11.1 General Goals 11.2 Summary of the tests 11.3 SPSS 11.4 Homework (Mar 9 and 10, 2021) 11.5 Homework (Feb 23 and 24, 2021)", " Chapter 11 Lab 11: Choosing an appropriate statistical test 11.1 General Goals Considering the scale of measurement of your variables and the research question, select the appropriate statistical test from the following options: Pearson’s r correlation coefficient, Spearman’s r correlation coefficient, independent t-test, and Mann-Whitney U-test. 11.2 Summary of the tests 11.2.1 Pearson’s r correlation coefficient Pearson’s r tests for a linear relation between two variables. The scale of measurement of the variables must be interval or ratio. An example research question that could be addressed with Pearson’s r is: What is the correlation between height (measured in metres) and weight (measured in kilograms)? 11.2.2 Spearman’s r correlation coefficient Spearman’s r tests for a linear relation between the ranks of two variables. The scale of measurement of the variables must be ordinal, interval or ratio. Spearman’s r is a good choice when outliers are present. An example research question that could be addressed with Spearman’s r is: What is the correlation between height category (very short, short, average, tall, very tall) and weight category (very low, low, average, high, very high)? 11.2.3 Independent t-test The independent t-test determines whether there is a difference between the mean of two groups. The groups must be independent (i.e., made up of different participants) and the dependent variable (the one being compared between the groups) must be measured on an interval or ratio scale. An example research question that could be addressed with an independent t-test is: Is there a difference in mean weight between short and tall individuals? 11.2.4 Mann-Whitney U-test The Mann-Whitney U-test determines whether the distribution is different between two groups. The dependent variable (the one being compared between the groups) must be measured on an ordinal, interval, or ratio scale. In this class, we are going to apply the Mann-Whitney U-test to independent groups (i.e., the groups are made up of different participants). An example research question that could be addressed with a Mann-Whitney U-test is: Is there a difference in the distribution of weight categories (very low, low, average, high, very high) between short and tall individuals? 11.3 SPSS 11.3.1 Pearson and Spearman Correlation To demonstrate correlation, we will use the life_expectancy.sav file downloaded from section 0.2.3 of this lab manual. Both Pearson’s and Spearman’s r can be accessed in SPSS via the Analyze menu. Select Correlate, and then Bivariate… Select two variables from the list on the left (in this case, the life expectancy data from the year 1800 and the year 2018) and drag them to the box on the right, or use the arrow in the middle. Under Correlation Cefficients, Pearson will be checked on by default. Check Spearman as well to get both (see red circle in figure below). Click OK. In your output window, you will see two output tables. The first displays the results of the Pearson correlations, and the second displays the results of the Spearman correlations. The tables show the correlation between 1800 and 2018, as well as the correlation between 2018 and 1800 - these work out to be the same, of course. The Pearson correlation coefficient is .436 and the Spearman correlation coefficient is .461 - make sure you can find those numbers on the tables below. Why are the correlation coefficients different for Pearson and Spearman? 11.3.1.1 Interpreting and reporting the results The first thing to note about the output of both Pearson and Spearman’s correlation analysis is that the tables include redundant information. You can see from the first row and first column of the table that the Pearson’s correlation between life expectancy in 1800 and 1800 is 1. This is a perfect correlation because you are correlating the variable with itself. You will see that the correlation is equal to 1 along the diagonal of the table as each variable is correlated with itself. You will also see that the first row, second column contains the same information as the second row, first column. This tells you that the correlation between life expectancy in 1800 and 2018 is the same as the correlation between life expectancy in 2018 and 1800. This is always true - the order the variables are input to SPSS never impacts the correlation. If you aren’t sure why, go back and look at the equation for r we covered in class or in the textbook. To determine the output of the correlation between life expectancy in 1800 and 2018 (i.e., the analysis of interest), look to the first row, second column. The correlation coefficient, r, is labelled “Pearson’s correlation” and has a value of .436. It has two asterisks next to it, which you can see from the note at the bottom of the table means “Correlation is significant at the 0.01 level (2-tailed).” We will get more into what “2-tailed” means in class, but the important thing to note here is that your correlation is statistically significant. “Significant” is a special word in statistics that doesn’t mean what it means in normal language. It does not mean important, or interesting, or anything like that. In statistics, “significant” means that you have rejected the null hypothesis. You can think of it like this: it means the data you analyzed “signify” something. In addition to the two asterisks, you can also check whether your correlation is significant by looking at the number labelled “Sig. (2-tailed).” For the correlation between life expectancy in 1800 and 2018, the “Sig. (2-tailed)” row says “&lt;.001.” This is also called a p-value, which we talked about in class. By convention, when the p-value is less than .05, we reject the null hypothesis. In this case, .05 is your alpha or cutoff value. You can set your alpha to whatever you like, but typically we use .05. For both Pearson’s and Spearman’s r, you must report the r-value and the p-value. Both of these can be found in the tables. For example, for Pearson’s r, you might write the following sentence in your Results section: The correlation between life expectancy in 1800 and life expectancy in 2018 was significant (r = .44, p &lt; .05). For Spearman’s r, you might write the following sentence in your Results section: The correlation between life expectancy in 1800 and life expectancy in 2018 was significant (r = .46, p &lt; .05). Note that for this class, we are going to round test statistics like r to two decimal places. Can you find these numbers in the tables above? Where is the .05 coming from? 11.3.2 Independent t-test To demonstrate independent t-tests, we will use the SchroederEpley2015_Study4_data.sav file downloaded from section 0.2.3 of this lab manual. Schroeder and Epley (2015) conducted an experiment to determine whether a person’s speech (i.e., vocal tone, cadence, and pitch) communicates information about their intellect better than their written words (even if they are the same words as in the speech). To conduct this study, the authors randomly assigned 39 professional recruiters for Fortune 500 companies to one of two conditions. In the audio condition, participants listened to audio recordings of a job candidate’s spoken job pitch. In the transcript condition, participants read a transcription of the job candidate’s pitch. After hearing or reading the pitch, the participants rated the job candidates on three dimensions: intelligence, competence, and thoughtfulness. So, what happened? Did the recruiters think job applicants were smarter when they read the transcripts, or when the heard the applicants speak? We have the data, we can find out. Before we run the t-test, let’s introduce a button at the top of our SPSS spreadsheet window. This will be important for identifying the values assigned to groups later on. The button I refer to here is highlighted below; it has two boxes, one with an A and one with a 1 on it, with arrows in-between. Press this button and see what happens to your data spreadsheet. Notice that this button has revealed the values used to signify the Audio and Transcript groups. We will need to know that these groups are signified by 0s and 1s when we come to running our t-test. If you click the button again, the cells will go back to displaying their labels. Keep in mind that revealing the values or labels does not change anything about the data itself or any subsequent analyses; it is merely a cosmetic change. The independent t-test can be accessed via the Analyze menu as well. Select Compare Means, and then Independent Samples T Test… The dependent variable is moved by dragging or with the arrow from the list of variables on the left to the Test Variable(s) box on the right. Move meanintellect to the Test Variable(s) box. The Grouping Variable defines the groups. Move CONDITION to the Grouping Variable box. Next, click Define Groups… Place 0 and 1 in the fields that ask for Values for Group 1 and Group 2 and click Continue. The dialog box should look like this: Then click OK. You will get three tables in your output file. Focus on the second one for now. The t-value you are interested in can be found in the red circle below: 11.3.2.1 Interpreting and reporting the results There are two rows in the t-test output. We are going to focus on the second row, labelled “Equal variances not assumed” because it is always OK to use this row. Sometimes it is OK to use the top row and sometimes it isn’t. We will get into the reasons why when we cover t-tests in more detail in class. For t-tests, we must report the t value, degrees of freedom (df), and p-value. Degrees of freedom are closely linked to sample size for t-tests; we may discuss further in class if time allows. Like for correlation, the p-value is labelled “Sig. (2-tailed).” By convention, when the p-value is less than .05, we reject the null hypothesis. In this case, .05 is your alpha or cutoff value. You can set your alpha to whatever you like, but typically we use .05. For example, you might write the following sentence in your Results section: There was not a significant difference in mean intellect between the Audio and Transcript groups [t(36.22) = 0.51, p &gt; .05]. Note that for this class, we are going to round test statistics like t to two decimal places. Can you find these numbers in the tables above? Where is the .05 coming from? 11.3.3 Mann-Whitney U-test We will use the same data and variables from the independent t-test example to try out the Mann-Whitney U-test. The Mann-Whitney U-test can be accessed via the Analyze menu as well. Select Nonparametric Tests, and then Legacy Dialogs, and then 2 Independent Samples … Like we did for the independent t-test, move meanintellect to the Test Variable List box and move CONDITION to the Grouping Variable box. Next, click Define Groups… Place 0 and 1 in the fields that ask for Values for Group 1 and Group 2 and click Continue. The dialog box should look like this: Note that Mann-Whitney U is checked on by default. Click OK. This time you will get two tables in your output file. Focus on the second one. The U value is highlighted with a red circle in the figure below: 11.3.3.1 Interpreting and reporting the results For Mann-Whitney U-tests, we must report the U value and p-value. The p-value is labelled as “Asymp. Sig. (2-tailed).” By convention, when the p-value is less than .05, we reject the null hypothesis. In this case, .05 is your alpha or cutoff value. You can set your alpha to whatever you like, but typically we use .05. For example, you might write the following sentence in your Results section: There was not a significant difference in mean intellect between the Audio and Transcript groups (U = 171.00, p &gt; .05). Note that for this class, we are going to round test statistics like U to two decimal places. Can you find these numbers in the tables above? Where is the .05 coming from? 11.4 Homework (Mar 9 and 10, 2021) Use the Chapter12Homework.spv output file provided to answer the quiz on interpreting SPSS output on Moodle. 11.5 Homework (Feb 23 and 24, 2021) A simplified version of the SchroederEpley2015_Study4_data.sav file, entitled Chap12Homework.sav has been uploaded to Moodle. Download Chap12Homework.sav and use it to address the following research questions. Your task is to create and submit one SPSS output file (*.spv format) showing that you have run the appropriate statistical analyses for the four questions. The output file should include four analyses and show that you ran the correct analyses on the correct variables. Remember to check the Measure column in Variable View. Research Questions: Is the number of words in a candidate’s pitch related to the recruiter’s perception of the candidate’s intellect? Are recruiters’ hiring rankings of candidates related to their perception of candidates’ intellect? Is there a difference between recruiters’ perceptions of candidates’ intellect between the audio recording and written transcript conditions? Is there a difference between recruiters’ hiring rankings of candidates between the audio recording and written transcript conditions? "]]
